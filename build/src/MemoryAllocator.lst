GAS LISTING /tmp/cctUUFKI.s 			page 1


   1              		.file	"MemoryAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN15MemoryAllocator10initialiseEv
   9              	_ZN15MemoryAllocator10initialiseEv:
  10              	.LFB0:
  11              		.file 1 "src/MemoryAllocator.cpp"
   1:src/MemoryAllocator.cpp **** //
   2:src/MemoryAllocator.cpp **** // Created by os on 8/2/23.
   3:src/MemoryAllocator.cpp **** //
   4:src/MemoryAllocator.cpp **** 
   5:src/MemoryAllocator.cpp **** #include "../h/MemoryAllocator.hpp"
   6:src/MemoryAllocator.cpp **** #include "../h/print.hpp"
   7:src/MemoryAllocator.cpp **** 
   8:src/MemoryAllocator.cpp **** void* MemoryAllocator::memStart = nullptr;
   9:src/MemoryAllocator.cpp **** void* MemoryAllocator::memEnd = nullptr;
  10:src/MemoryAllocator.cpp **** FreeMem* MemoryAllocator::head = nullptr;
  11:src/MemoryAllocator.cpp **** 
  12:src/MemoryAllocator.cpp **** void MemoryAllocator::initialise()
  13:src/MemoryAllocator.cpp **** {
  12              		.loc 1 13 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  14:src/MemoryAllocator.cpp ****     // trim je start location to be aligned with blocks
  15:src/MemoryAllocator.cpp ****     //MemoryAllocator::memStart = (void*)((size_t)HEAP_START_ADDR - ((size_t)HEAP_START_ADDR % MEM_
  16:src/MemoryAllocator.cpp ****     MemoryAllocator::memStart = (void*)((size_t)HEAP_START_ADDR + MEM_BLOCK_SIZE - ((size_t)HEAP_ST
  20              		.loc 1 16 5
  21              		.loc 1 16 82 is_stmt 0
  22 000c 97070000 		la	a5,HEAP_START_ADDR
  22      83B70700 
  23 0014 03B70700 		ld	a4,0(a5)
  24 0018 137707FC 		andi	a4,a4,-64
  25 001c 13060704 		addi	a2,a4,64
  26              		.loc 1 16 31
  27 0020 97070000 		lla	a5,.LANCHOR0
  27      93870700 
  28 0028 23B0C700 		sd	a2,0(a5)
  17:src/MemoryAllocator.cpp **** 
  18:src/MemoryAllocator.cpp ****     // calculate the size that will be discarded in memory
  19:src/MemoryAllocator.cpp ****     size_t trimSize = ((size_t)HEAP_END_ADDR - (size_t)MemoryAllocator::memStart) % MEM_BLOCK_SIZE;
  29              		.loc 1 19 5 is_stmt 1
  30              		.loc 1 19 46 is_stmt 0
  31 002c 97060000 		la	a3,HEAP_END_ADDR
  31      83B60600 
  32 0034 83B60600 		ld	a3,0(a3)
  33              	.LVL0:
  20:src/MemoryAllocator.cpp **** 
  21:src/MemoryAllocator.cpp ****     MemoryAllocator::memEnd = (void*) ((size_t)HEAP_END_ADDR - trimSize);
  34              		.loc 1 21 5 is_stmt 1
GAS LISTING /tmp/cctUUFKI.s 			page 2


  35              		.loc 1 21 62 is_stmt 0
  36 0038 93F606FC 		andi	a3,a3,-64
  37              	.LVL1:
  38              		.loc 1 21 29
  39 003c 23B4D700 		sd	a3,8(a5)
  22:src/MemoryAllocator.cpp **** 
  23:src/MemoryAllocator.cpp ****     // Create the first free segment
  24:src/MemoryAllocator.cpp ****     MemoryAllocator::head = (FreeMem*)MemoryAllocator::memStart;
  40              		.loc 1 24 5 is_stmt 1
  41              		.loc 1 24 27 is_stmt 0
  42 0040 23B8C700 		sd	a2,16(a5)
  25:src/MemoryAllocator.cpp ****     MemoryAllocator::head->next = nullptr;
  43              		.loc 1 25 5 is_stmt 1
  44              		.loc 1 25 33 is_stmt 0
  45 0044 23300704 		sd	zero,64(a4)
  46              	.LVL2:
  26:src/MemoryAllocator.cpp ****     MemoryAllocator::head->prev = nullptr;
  47              		.loc 1 26 5 is_stmt 1
  48              		.loc 1 26 28 is_stmt 0
  49 0048 83B60701 		ld	a3,16(a5)
  50              		.loc 1 26 33
  51 004c 23B40600 		sd	zero,8(a3)
  27:src/MemoryAllocator.cpp ****     MemoryAllocator::head->size = ((size_t)MemoryAllocator::memEnd - (size_t)MemoryAllocator::memSt
  52              		.loc 1 27 5 is_stmt 1
  53              		.loc 1 27 68 is_stmt 0
  54 0050 03B78700 		ld	a4,8(a5)
  55 0054 83B70700 		ld	a5,0(a5)
  56 0058 B307F740 		sub	a5,a4,a5
  57              		.loc 1 27 105
  58 005c 93D76700 		srli	a5,a5,6
  59              		.loc 1 27 33
  60 0060 23B8F600 		sd	a5,16(a3)
  28:src/MemoryAllocator.cpp **** 
  29:src/MemoryAllocator.cpp ****     /*
  30:src/MemoryAllocator.cpp ****     printInteger((size_t)MemoryAllocator::memStart);
  31:src/MemoryAllocator.cpp ****     printString("\n");
  32:src/MemoryAllocator.cpp ****     printInteger((size_t)MemoryAllocator::memEnd);
  33:src/MemoryAllocator.cpp ****     printString("\n");
  34:src/MemoryAllocator.cpp ****     printInteger((size_t)MemoryAllocator::head->size);
  35:src/MemoryAllocator.cpp ****      */
  36:src/MemoryAllocator.cpp **** }
  61              		.loc 1 36 1
  62 0064 03348100 		ld	s0,8(sp)
  63              		.cfi_restore 8
  64              		.cfi_def_cfa 2, 16
  65 0068 13010101 		addi	sp,sp,16
  66              		.cfi_def_cfa_offset 0
  67 006c 67800000 		jr	ra
  68              		.cfi_endproc
  69              	.LFE0:
  71              		.align	2
  72              		.globl	_ZN15MemoryAllocator9mem_allocEm
  74              	_ZN15MemoryAllocator9mem_allocEm:
  75              	.LFB1:
  37:src/MemoryAllocator.cpp **** 
  38:src/MemoryAllocator.cpp **** void *MemoryAllocator::mem_alloc(size_t size)
  39:src/MemoryAllocator.cpp **** {
GAS LISTING /tmp/cctUUFKI.s 			page 3


  76              		.loc 1 39 1 is_stmt 1
  77              		.cfi_startproc
  78              	.LVL3:
  79 0070 130101FF 		addi	sp,sp,-16
  80              		.cfi_def_cfa_offset 16
  81 0074 23348100 		sd	s0,8(sp)
  82              		.cfi_offset 8, -8
  83 0078 13040101 		addi	s0,sp,16
  84              		.cfi_def_cfa 8, 0
  40:src/MemoryAllocator.cpp ****     if (size == 0)
  85              		.loc 1 40 5
  86 007c 6300050C 		beqz	a0,.L13
  41:src/MemoryAllocator.cpp ****         return nullptr;
  42:src/MemoryAllocator.cpp **** 
  43:src/MemoryAllocator.cpp ****     // Calculate number of blocks
  44:src/MemoryAllocator.cpp ****     // In front of every allocated block needs to be a struct
  45:src/MemoryAllocator.cpp ****     size_t totalSize = size + sizeof(AllocatedMem);
  87              		.loc 1 45 5
  88              		.loc 1 45 12 is_stmt 0
  89 0080 13058500 		addi	a0,a0,8
  90              	.LVL4:
  46:src/MemoryAllocator.cpp ****     size_t blockNum = 0;
  91              		.loc 1 46 5 is_stmt 1
  47:src/MemoryAllocator.cpp **** 
  48:src/MemoryAllocator.cpp ****     if (totalSize % MEM_BLOCK_SIZE != 0)
  92              		.loc 1 48 5
  93              		.loc 1 48 19 is_stmt 0
  94 0084 9377F503 		andi	a5,a0,63
  95              		.loc 1 48 5
  96 0088 638A0702 		beqz	a5,.L5
  49:src/MemoryAllocator.cpp ****         blockNum = totalSize / MEM_BLOCK_SIZE + 1; // mozda ne treba hardkovoati jedinicu
  97              		.loc 1 49 9 is_stmt 1
  98              		.loc 1 49 30 is_stmt 0
  99 008c 93576500 		srli	a5,a0,6
 100              		.loc 1 49 18
 101 0090 93871700 		addi	a5,a5,1
 102              	.LVL5:
 103              	.L6:
  50:src/MemoryAllocator.cpp ****     else
  51:src/MemoryAllocator.cpp ****         blockNum = totalSize / MEM_BLOCK_SIZE;
  52:src/MemoryAllocator.cpp **** 
  53:src/MemoryAllocator.cpp ****     // Find the first free segment if exists
  54:src/MemoryAllocator.cpp ****     FreeMem* curr = MemoryAllocator::head;
 104              		.loc 1 54 5 is_stmt 1
 105              		.loc 1 54 14 is_stmt 0
 106 0094 97060000 		ld	a3,.LANCHOR0+16
 106      83B60600 
 107              	.LVL6:
 108 009c 13850600 		mv	a0,a3
 109              	.LVL7:
 110              	.L12:
  55:src/MemoryAllocator.cpp **** 
  56:src/MemoryAllocator.cpp ****     while (curr != nullptr)
 111              		.loc 1 56 5 is_stmt 1
 112              		.loc 1 56 17
 113 00a0 63020506 		beqz	a0,.L3
 114              	.LBB2:
GAS LISTING /tmp/cctUUFKI.s 			page 4


  57:src/MemoryAllocator.cpp ****     {
  58:src/MemoryAllocator.cpp ****         // Found free soace in a segment
  59:src/MemoryAllocator.cpp ****         // Allocate the highest memory, so we potentially don't have to move the FreeMem struct
  60:src/MemoryAllocator.cpp ****         if (curr->size >= blockNum)
 115              		.loc 1 60 9
 116              	.LBB3:
 117              		.loc 1 60 19 is_stmt 0
 118 00a4 03370501 		ld	a4,16(a0)
 119              		.loc 1 60 9
 120 00a8 637EF700 		bgeu	a4,a5,.L15
 121              	.LBE3:
  61:src/MemoryAllocator.cpp ****         {
  62:src/MemoryAllocator.cpp ****             // Update the FreeMem segment, if it gets destroyed it doesn't matter
  63:src/MemoryAllocator.cpp ****             curr->size -= blockNum;
  64:src/MemoryAllocator.cpp **** 
  65:src/MemoryAllocator.cpp ****             // Check if FreeMem is destroyed and update the linked list
  66:src/MemoryAllocator.cpp ****             if (curr->size == 0)
  67:src/MemoryAllocator.cpp ****             {
  68:src/MemoryAllocator.cpp ****                 if (curr == MemoryAllocator::head)
  69:src/MemoryAllocator.cpp ****                 {
  70:src/MemoryAllocator.cpp ****                     MemoryAllocator::head = MemoryAllocator::head->next;
  71:src/MemoryAllocator.cpp ****                 }
  72:src/MemoryAllocator.cpp **** 
  73:src/MemoryAllocator.cpp ****                 if (curr->next != nullptr && curr->prev != nullptr)
  74:src/MemoryAllocator.cpp ****                 {
  75:src/MemoryAllocator.cpp ****                     curr->prev->next = curr->next;
  76:src/MemoryAllocator.cpp ****                     curr->next->prev = curr->prev;
  77:src/MemoryAllocator.cpp ****                 }
  78:src/MemoryAllocator.cpp ****                 // curr->next == nullptr
  79:src/MemoryAllocator.cpp ****                 else if (curr->prev != nullptr)
  80:src/MemoryAllocator.cpp ****                 {
  81:src/MemoryAllocator.cpp ****                     curr->prev->next = nullptr;
  82:src/MemoryAllocator.cpp ****                 }
  83:src/MemoryAllocator.cpp ****                 // curr->prev == nullptr
  84:src/MemoryAllocator.cpp ****                 else if (curr->next != nullptr)
  85:src/MemoryAllocator.cpp ****                 {
  86:src/MemoryAllocator.cpp ****                     curr->next->prev = nullptr;
  87:src/MemoryAllocator.cpp ****                 }
  88:src/MemoryAllocator.cpp ****             }
  89:src/MemoryAllocator.cpp **** 
  90:src/MemoryAllocator.cpp ****             // Address of the allocated memory
  91:src/MemoryAllocator.cpp ****             // Behind the beginning address we must allocate AllocatedMem
  92:src/MemoryAllocator.cpp ****             AllocatedMem* allocatedMem = (AllocatedMem*)((size_t)curr + curr->size  * MEM_BLOCK_SIZ
  93:src/MemoryAllocator.cpp ****             allocatedMem->blockNum = blockNum;
  94:src/MemoryAllocator.cpp ****             void* ptr = (void*)((size_t)allocatedMem + sizeof(AllocatedMem));
  95:src/MemoryAllocator.cpp **** 
  96:src/MemoryAllocator.cpp ****             /*
  97:src/MemoryAllocator.cpp ****             printString("malloc-------------------");
  98:src/MemoryAllocator.cpp ****             printString("\n");
  99:src/MemoryAllocator.cpp ****             printString("blockNum: ");
 100:src/MemoryAllocator.cpp ****             printInteger((size_t)blockNum);
 101:src/MemoryAllocator.cpp ****             printString("\n");
 102:src/MemoryAllocator.cpp ****             printString("allocatedMem addr: ");
 103:src/MemoryAllocator.cpp ****             printInteger((size_t)allocatedMem);
 104:src/MemoryAllocator.cpp ****             printString("\n");
 105:src/MemoryAllocator.cpp ****             printString("ptr addr: ");
 106:src/MemoryAllocator.cpp ****             printInteger((size_t)ptr);
GAS LISTING /tmp/cctUUFKI.s 			page 5


 107:src/MemoryAllocator.cpp ****             printString("\n");
 108:src/MemoryAllocator.cpp ****             */
 109:src/MemoryAllocator.cpp **** 
 110:src/MemoryAllocator.cpp ****             return ptr;
 111:src/MemoryAllocator.cpp ****         }
 112:src/MemoryAllocator.cpp ****         curr = curr->next;
 122              		.loc 1 112 9 is_stmt 1
 123              		.loc 1 112 14 is_stmt 0
 124 00ac 03350500 		ld	a0,0(a0)
 125              	.LVL8:
 113:src/MemoryAllocator.cpp **** 
 114:src/MemoryAllocator.cpp ****         // Prevents infinite loop
 115:src/MemoryAllocator.cpp ****         if (curr == MemoryAllocator::head)
 126              		.loc 1 115 9 is_stmt 1
 127 00b0 E398A6FE 		bne	a3,a0,.L12
 128              	.LBE2:
 116:src/MemoryAllocator.cpp ****             break;
 117:src/MemoryAllocator.cpp ****     }
 118:src/MemoryAllocator.cpp **** 
 119:src/MemoryAllocator.cpp ****     return nullptr;
 129              		.loc 1 119 12 is_stmt 0
 130 00b4 13050000 		li	a0,0
 131              	.LVL9:
 132 00b8 6F00C004 		j	.L3
 133              	.LVL10:
 134              	.L5:
  51:src/MemoryAllocator.cpp **** 
 135              		.loc 1 51 9 is_stmt 1
  51:src/MemoryAllocator.cpp **** 
 136              		.loc 1 51 18 is_stmt 0
 137 00bc 93576500 		srli	a5,a0,6
 138              	.LVL11:
 139 00c0 6FF05FFD 		j	.L6
 140              	.LVL12:
 141              	.L15:
 142              	.LBB8:
 143              	.LBB6:
 144              	.LBB4:
  63:src/MemoryAllocator.cpp **** 
 145              		.loc 1 63 13 is_stmt 1
  63:src/MemoryAllocator.cpp **** 
 146              		.loc 1 63 24 is_stmt 0
 147 00c4 3307F740 		sub	a4,a4,a5
 148 00c8 2338E500 		sd	a4,16(a0)
  66:src/MemoryAllocator.cpp ****             {
 149              		.loc 1 66 13 is_stmt 1
 150 00cc 63120702 		bnez	a4,.L8
  68:src/MemoryAllocator.cpp ****                 {
 151              		.loc 1 68 17
 152 00d0 6300D504 		beq	a0,a3,.L16
 153              	.L9:
  73:src/MemoryAllocator.cpp ****                 {
 154              		.loc 1 73 17
  73:src/MemoryAllocator.cpp ****                 {
 155              		.loc 1 73 27 is_stmt 0
 156 00d4 03370500 		ld	a4,0(a0)
  73:src/MemoryAllocator.cpp ****                 {
GAS LISTING /tmp/cctUUFKI.s 			page 6


 157              		.loc 1 73 17
 158 00d8 63040704 		beqz	a4,.L10
  73:src/MemoryAllocator.cpp ****                 {
 159              		.loc 1 73 52 discriminator 1
 160 00dc 83368500 		ld	a3,8(a0)
  73:src/MemoryAllocator.cpp ****                 {
 161              		.loc 1 73 43 discriminator 1
 162 00e0 63800604 		beqz	a3,.L10
  75:src/MemoryAllocator.cpp ****                     curr->next->prev = curr->prev;
 163              		.loc 1 75 21 is_stmt 1
  75:src/MemoryAllocator.cpp ****                     curr->next->prev = curr->prev;
 164              		.loc 1 75 38 is_stmt 0
 165 00e4 23B0E600 		sd	a4,0(a3)
  76:src/MemoryAllocator.cpp ****                 }
 166              		.loc 1 76 21 is_stmt 1
  76:src/MemoryAllocator.cpp ****                 }
 167              		.loc 1 76 46 is_stmt 0
 168 00e8 83368500 		ld	a3,8(a0)
  76:src/MemoryAllocator.cpp ****                 }
 169              		.loc 1 76 38
 170 00ec 2334D700 		sd	a3,8(a4)
 171              	.L8:
  92:src/MemoryAllocator.cpp ****             allocatedMem->blockNum = blockNum;
 172              		.loc 1 92 13 is_stmt 1
  92:src/MemoryAllocator.cpp ****             allocatedMem->blockNum = blockNum;
 173              		.loc 1 92 79 is_stmt 0
 174 00f0 03370501 		ld	a4,16(a0)
  92:src/MemoryAllocator.cpp ****             allocatedMem->blockNum = blockNum;
 175              		.loc 1 92 85
 176 00f4 13176700 		slli	a4,a4,6
  92:src/MemoryAllocator.cpp ****             allocatedMem->blockNum = blockNum;
 177              		.loc 1 92 71
 178 00f8 3305E500 		add	a0,a0,a4
 179              	.LVL13:
  93:src/MemoryAllocator.cpp ****             void* ptr = (void*)((size_t)allocatedMem + sizeof(AllocatedMem));
 180              		.loc 1 93 13 is_stmt 1
  93:src/MemoryAllocator.cpp ****             void* ptr = (void*)((size_t)allocatedMem + sizeof(AllocatedMem));
 181              		.loc 1 93 36 is_stmt 0
 182 00fc 2330F500 		sd	a5,0(a0)
  94:src/MemoryAllocator.cpp **** 
 183              		.loc 1 94 13 is_stmt 1
  94:src/MemoryAllocator.cpp **** 
 184              		.loc 1 94 54 is_stmt 0
 185 0100 13058500 		addi	a0,a0,8
 186              	.LVL14:
 110:src/MemoryAllocator.cpp ****         }
 187              		.loc 1 110 13 is_stmt 1
 188              	.L3:
 189              	.LBE4:
 190              	.LBE6:
 191              	.LBE8:
 120:src/MemoryAllocator.cpp **** }
 192              		.loc 1 120 1 is_stmt 0
 193 0104 03348100 		ld	s0,8(sp)
 194              		.cfi_remember_state
 195              		.cfi_restore 8
 196              		.cfi_def_cfa 2, 16
GAS LISTING /tmp/cctUUFKI.s 			page 7


 197 0108 13010101 		addi	sp,sp,16
 198              		.cfi_def_cfa_offset 0
 199 010c 67800000 		jr	ra
 200              	.LVL15:
 201              	.L16:
 202              		.cfi_restore_state
 203              	.LBB9:
 204              	.LBB7:
 205              	.LBB5:
  70:src/MemoryAllocator.cpp ****                 }
 206              		.loc 1 70 21 is_stmt 1
  70:src/MemoryAllocator.cpp ****                 }
 207              		.loc 1 70 68 is_stmt 0
 208 0110 03B70600 		ld	a4,0(a3)
  70:src/MemoryAllocator.cpp ****                 }
 209              		.loc 1 70 43
 210 0114 97060000 		sd	a4,.LANCHOR0+16,a3
 210      23B0E600 
 211 011c 6FF09FFB 		j	.L9
 212              	.L10:
  79:src/MemoryAllocator.cpp ****                 {
 213              		.loc 1 79 22 is_stmt 1
  79:src/MemoryAllocator.cpp ****                 {
 214              		.loc 1 79 32 is_stmt 0
 215 0120 83368500 		ld	a3,8(a0)
  79:src/MemoryAllocator.cpp ****                 {
 216              		.loc 1 79 22
 217 0124 63860600 		beqz	a3,.L11
  81:src/MemoryAllocator.cpp ****                 }
 218              		.loc 1 81 21 is_stmt 1
  81:src/MemoryAllocator.cpp ****                 }
 219              		.loc 1 81 38 is_stmt 0
 220 0128 23B00600 		sd	zero,0(a3)
 221 012c 6FF05FFC 		j	.L8
 222              	.L11:
  84:src/MemoryAllocator.cpp ****                 {
 223              		.loc 1 84 22 is_stmt 1
 224 0130 E30007FC 		beqz	a4,.L8
  86:src/MemoryAllocator.cpp ****                 }
 225              		.loc 1 86 21
  86:src/MemoryAllocator.cpp ****                 }
 226              		.loc 1 86 38 is_stmt 0
 227 0134 23340700 		sd	zero,8(a4)
 228 0138 6FF09FFB 		j	.L8
 229              	.LVL16:
 230              	.L13:
 231              	.LBE5:
 232              	.LBE7:
 233              	.LBE9:
  41:src/MemoryAllocator.cpp **** 
 234              		.loc 1 41 16
 235 013c 13050000 		li	a0,0
 236              	.LVL17:
 237 0140 6FF05FFC 		j	.L3
 238              		.cfi_endproc
 239              	.LFE1:
 241              		.align	2
GAS LISTING /tmp/cctUUFKI.s 			page 8


 242              		.globl	_ZN15MemoryAllocator9tryToJoinEP7FreeMem
 244              	_ZN15MemoryAllocator9tryToJoinEP7FreeMem:
 245              	.LFB3:
 121:src/MemoryAllocator.cpp **** 
 122:src/MemoryAllocator.cpp **** int MemoryAllocator::mem_free(void* ptr)
 123:src/MemoryAllocator.cpp **** {
 124:src/MemoryAllocator.cpp ****     AllocatedMem* allocatedMem = (AllocatedMem*)((size_t)ptr - sizeof(AllocatedMem));
 125:src/MemoryAllocator.cpp **** 
 126:src/MemoryAllocator.cpp ****     size_t blockNum = allocatedMem->blockNum;
 127:src/MemoryAllocator.cpp **** 
 128:src/MemoryAllocator.cpp ****     // Get the FreeMem head and iterate to put the new FreeMem Segment
 129:src/MemoryAllocator.cpp ****     size_t addr = (size_t)allocatedMem;
 130:src/MemoryAllocator.cpp ****     FreeMem* curr = 0;
 131:src/MemoryAllocator.cpp ****     if (!MemoryAllocator::head || addr < (size_t)MemoryAllocator::head)
 132:src/MemoryAllocator.cpp ****     {
 133:src/MemoryAllocator.cpp ****         curr = 0;
 134:src/MemoryAllocator.cpp ****     }
 135:src/MemoryAllocator.cpp ****     else
 136:src/MemoryAllocator.cpp ****     {
 137:src/MemoryAllocator.cpp ****         for (curr = MemoryAllocator::head; curr->next != nullptr && addr > (size_t) curr->next; cur
 138:src/MemoryAllocator.cpp ****     }
 139:src/MemoryAllocator.cpp **** 
 140:src/MemoryAllocator.cpp ****     FreeMem* newSeg = (FreeMem*)addr;
 141:src/MemoryAllocator.cpp ****     newSeg->size = blockNum;
 142:src/MemoryAllocator.cpp ****     newSeg->prev = curr;
 143:src/MemoryAllocator.cpp ****     if (curr) newSeg->next = curr->next;
 144:src/MemoryAllocator.cpp ****     else newSeg->next = MemoryAllocator::head;
 145:src/MemoryAllocator.cpp ****     if (newSeg->next) newSeg->next->prev = newSeg;
 146:src/MemoryAllocator.cpp ****     if (curr) curr->next = newSeg;
 147:src/MemoryAllocator.cpp ****     else MemoryAllocator::head = newSeg;
 148:src/MemoryAllocator.cpp **** 
 149:src/MemoryAllocator.cpp ****     // Try to merge with previous and next segment
 150:src/MemoryAllocator.cpp **** 
 151:src/MemoryAllocator.cpp ****     /*
 152:src/MemoryAllocator.cpp ****     printString("free-------------------");
 153:src/MemoryAllocator.cpp ****     printString("\n");
 154:src/MemoryAllocator.cpp ****     printString("ptr addr: ");
 155:src/MemoryAllocator.cpp ****     printInteger((size_t)ptr);
 156:src/MemoryAllocator.cpp ****     printString("\n");
 157:src/MemoryAllocator.cpp ****     printString("allocatedMem blockNum: ");
 158:src/MemoryAllocator.cpp ****     printInteger((size_t)allocatedMem->blockNum);
 159:src/MemoryAllocator.cpp ****     printString("\n");
 160:src/MemoryAllocator.cpp ****     */
 161:src/MemoryAllocator.cpp **** 
 162:src/MemoryAllocator.cpp ****     MemoryAllocator::tryToJoin(newSeg);
 163:src/MemoryAllocator.cpp ****     MemoryAllocator::tryToJoin(curr);
 164:src/MemoryAllocator.cpp **** 
 165:src/MemoryAllocator.cpp ****     return 0;
 166:src/MemoryAllocator.cpp **** }
 167:src/MemoryAllocator.cpp **** 
 168:src/MemoryAllocator.cpp **** int MemoryAllocator::tryToJoin(FreeMem *curr)
 169:src/MemoryAllocator.cpp **** {
 246              		.loc 1 169 1 is_stmt 1
 247              		.cfi_startproc
 248              	.LVL18:
 249 0144 130101FF 		addi	sp,sp,-16
 250              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/cctUUFKI.s 			page 9


 251 0148 23348100 		sd	s0,8(sp)
 252              		.cfi_offset 8, -8
 253 014c 13040101 		addi	s0,sp,16
 254              		.cfi_def_cfa 8, 0
 170:src/MemoryAllocator.cpp ****     if (!curr) return 0;
 255              		.loc 1 170 5
 256 0150 63080504 		beqz	a0,.L20
 171:src/MemoryAllocator.cpp ****     if (curr->next && ((size_t)curr + curr->size * MEM_BLOCK_SIZE == (size_t)(curr->next)))
 257              		.loc 1 171 5
 258              		.loc 1 171 15 is_stmt 0
 259 0154 83370500 		ld	a5,0(a0)
 260              		.loc 1 171 5
 261 0158 63880704 		beqz	a5,.L21
 262              		.loc 1 171 45 discriminator 1
 263 015c 83360501 		ld	a3,16(a0)
 264              		.loc 1 171 50 discriminator 1
 265 0160 13976600 		slli	a4,a3,6
 266              		.loc 1 171 37 discriminator 1
 267 0164 3307E500 		add	a4,a0,a4
 268              		.loc 1 171 20 discriminator 1
 269 0168 630AF700 		beq	a4,a5,.L24
 172:src/MemoryAllocator.cpp ****     {
 173:src/MemoryAllocator.cpp ****         curr->size += curr->next->size;
 174:src/MemoryAllocator.cpp ****         curr->next = curr->next->next;
 175:src/MemoryAllocator.cpp ****         if (curr->next) curr->next->prev = curr;
 176:src/MemoryAllocator.cpp ****         return 1;
 177:src/MemoryAllocator.cpp ****     }
 178:src/MemoryAllocator.cpp ****     else
 179:src/MemoryAllocator.cpp ****     {
 180:src/MemoryAllocator.cpp ****         return 0;
 270              		.loc 1 180 16
 271 016c 13050000 		li	a0,0
 272              	.LVL19:
 273              	.L18:
 181:src/MemoryAllocator.cpp ****     }
 182:src/MemoryAllocator.cpp **** }
 274              		.loc 1 182 1
 275 0170 03348100 		ld	s0,8(sp)
 276              		.cfi_remember_state
 277              		.cfi_restore 8
 278              		.cfi_def_cfa 2, 16
 279 0174 13010101 		addi	sp,sp,16
 280              		.cfi_def_cfa_offset 0
 281 0178 67800000 		jr	ra
 282              	.LVL20:
 283              	.L24:
 284              		.cfi_restore_state
 173:src/MemoryAllocator.cpp ****         curr->next = curr->next->next;
 285              		.loc 1 173 9 is_stmt 1
 173:src/MemoryAllocator.cpp ****         curr->next = curr->next->next;
 286              		.loc 1 173 35 is_stmt 0
 287 017c 03B70701 		ld	a4,16(a5)
 173:src/MemoryAllocator.cpp ****         curr->next = curr->next->next;
 288              		.loc 1 173 20
 289 0180 B386E600 		add	a3,a3,a4
 290 0184 2338D500 		sd	a3,16(a0)
 174:src/MemoryAllocator.cpp ****         if (curr->next) curr->next->prev = curr;
GAS LISTING /tmp/cctUUFKI.s 			page 10


 291              		.loc 1 174 9 is_stmt 1
 174:src/MemoryAllocator.cpp ****         if (curr->next) curr->next->prev = curr;
 292              		.loc 1 174 34 is_stmt 0
 293 0188 83B70700 		ld	a5,0(a5)
 174:src/MemoryAllocator.cpp ****         if (curr->next) curr->next->prev = curr;
 294              		.loc 1 174 20
 295 018c 2330F500 		sd	a5,0(a0)
 175:src/MemoryAllocator.cpp ****         return 1;
 296              		.loc 1 175 9 is_stmt 1
 297 0190 63840700 		beqz	a5,.L19
 175:src/MemoryAllocator.cpp ****         return 1;
 298              		.loc 1 175 25 discriminator 1
 175:src/MemoryAllocator.cpp ****         return 1;
 299              		.loc 1 175 42 is_stmt 0 discriminator 1
 300 0194 23B4A700 		sd	a0,8(a5)
 301              	.L19:
 176:src/MemoryAllocator.cpp ****     }
 302              		.loc 1 176 9 is_stmt 1
 176:src/MemoryAllocator.cpp ****     }
 303              		.loc 1 176 16 is_stmt 0
 304 0198 13051000 		li	a0,1
 305              	.LVL21:
 306 019c 6FF05FFD 		j	.L18
 307              	.LVL22:
 308              	.L20:
 170:src/MemoryAllocator.cpp ****     if (curr->next && ((size_t)curr + curr->size * MEM_BLOCK_SIZE == (size_t)(curr->next)))
 309              		.loc 1 170 23
 310 01a0 13050000 		li	a0,0
 311              	.LVL23:
 312 01a4 6FF0DFFC 		j	.L18
 313              	.LVL24:
 314              	.L21:
 180:src/MemoryAllocator.cpp ****     }
 315              		.loc 1 180 16
 316 01a8 13050000 		li	a0,0
 317              	.LVL25:
 318 01ac 6FF05FFC 		j	.L18
 319              		.cfi_endproc
 320              	.LFE3:
 322              		.align	2
 323              		.globl	_ZN15MemoryAllocator8mem_freeEPv
 325              	_ZN15MemoryAllocator8mem_freeEPv:
 326              	.LFB2:
 123:src/MemoryAllocator.cpp ****     AllocatedMem* allocatedMem = (AllocatedMem*)((size_t)ptr - sizeof(AllocatedMem));
 327              		.loc 1 123 1 is_stmt 1
 328              		.cfi_startproc
 329              	.LVL26:
 330 01b0 130101FE 		addi	sp,sp,-32
 331              		.cfi_def_cfa_offset 32
 332 01b4 233C1100 		sd	ra,24(sp)
 333 01b8 23388100 		sd	s0,16(sp)
 334 01bc 23349100 		sd	s1,8(sp)
 335              		.cfi_offset 1, -8
 336              		.cfi_offset 8, -16
 337              		.cfi_offset 9, -24
 338 01c0 13040102 		addi	s0,sp,32
 339              		.cfi_def_cfa 8, 0
GAS LISTING /tmp/cctUUFKI.s 			page 11


 340 01c4 13070500 		mv	a4,a0
 124:src/MemoryAllocator.cpp **** 
 341              		.loc 1 124 5
 124:src/MemoryAllocator.cpp **** 
 342              		.loc 1 124 62 is_stmt 0
 343 01c8 130585FF 		addi	a0,a0,-8
 344              	.LVL27:
 126:src/MemoryAllocator.cpp **** 
 345              		.loc 1 126 5 is_stmt 1
 126:src/MemoryAllocator.cpp **** 
 346              		.loc 1 126 12 is_stmt 0
 347 01cc 033687FF 		ld	a2,-8(a4)
 348              	.LVL28:
 129:src/MemoryAllocator.cpp ****     FreeMem* curr = 0;
 349              		.loc 1 129 5 is_stmt 1
 130:src/MemoryAllocator.cpp ****     if (!MemoryAllocator::head || addr < (size_t)MemoryAllocator::head)
 350              		.loc 1 130 5
 131:src/MemoryAllocator.cpp ****     {
 351              		.loc 1 131 5
 131:src/MemoryAllocator.cpp ****     {
 352              		.loc 1 131 9 is_stmt 0
 353 01d0 97060000 		ld	a3,.LANCHOR0+16
 353      83B60600 
 131:src/MemoryAllocator.cpp ****     {
 354              		.loc 1 131 5
 355 01d8 63800602 		beqz	a3,.L33
 131:src/MemoryAllocator.cpp ****     {
 356              		.loc 1 131 32 discriminator 1
 357 01dc 6362D502 		bltu	a0,a3,.L34
 137:src/MemoryAllocator.cpp ****     }
 358              		.loc 1 137 19
 359 01e0 93870600 		mv	a5,a3
 360              	.LVL29:
 361              	.L27:
 137:src/MemoryAllocator.cpp ****     }
 362              		.loc 1 137 66 is_stmt 1 discriminator 4
 363 01e4 93840700 		mv	s1,a5
 137:src/MemoryAllocator.cpp ****     }
 364              		.loc 1 137 50 is_stmt 0 discriminator 4
 365 01e8 83B70700 		ld	a5,0(a5)
 366              	.LVL30:
 137:src/MemoryAllocator.cpp ****     }
 367              		.loc 1 137 66 discriminator 4
 368 01ec 638C0700 		beqz	a5,.L26
 137:src/MemoryAllocator.cpp ****     }
 369              		.loc 1 137 66 discriminator 2
 370 01f0 E3EAA7FE 		bgtu	a0,a5,.L27
 371 01f4 6F000001 		j	.L26
 372              	.LVL31:
 373              	.L33:
 133:src/MemoryAllocator.cpp ****     }
 374              		.loc 1 133 14
 375 01f8 93840600 		mv	s1,a3
 376 01fc 6F008000 		j	.L26
 377              	.L34:
 378 0200 93040000 		li	s1,0
 379              	.LVL32:
GAS LISTING /tmp/cctUUFKI.s 			page 12


 380              	.L26:
 140:src/MemoryAllocator.cpp ****     newSeg->size = blockNum;
 381              		.loc 1 140 5 is_stmt 1
 141:src/MemoryAllocator.cpp ****     newSeg->prev = curr;
 382              		.loc 1 141 5
 141:src/MemoryAllocator.cpp ****     newSeg->prev = curr;
 383              		.loc 1 141 18 is_stmt 0
 384 0204 2338C500 		sd	a2,16(a0)
 142:src/MemoryAllocator.cpp ****     if (curr) newSeg->next = curr->next;
 385              		.loc 1 142 5 is_stmt 1
 142:src/MemoryAllocator.cpp ****     if (curr) newSeg->next = curr->next;
 386              		.loc 1 142 18 is_stmt 0
 387 0208 23349500 		sd	s1,8(a0)
 143:src/MemoryAllocator.cpp ****     else newSeg->next = MemoryAllocator::head;
 388              		.loc 1 143 5 is_stmt 1
 389 020c 63860404 		beqz	s1,.L28
 143:src/MemoryAllocator.cpp ****     else newSeg->next = MemoryAllocator::head;
 390              		.loc 1 143 15 discriminator 1
 143:src/MemoryAllocator.cpp ****     else newSeg->next = MemoryAllocator::head;
 391              		.loc 1 143 36 is_stmt 0 discriminator 1
 392 0210 83B70400 		ld	a5,0(s1)
 143:src/MemoryAllocator.cpp ****     else newSeg->next = MemoryAllocator::head;
 393              		.loc 1 143 28 discriminator 1
 394 0214 233CF7FE 		sd	a5,-8(a4)
 395              	.L29:
 145:src/MemoryAllocator.cpp ****     if (curr) curr->next = newSeg;
 396              		.loc 1 145 5 is_stmt 1
 145:src/MemoryAllocator.cpp ****     if (curr) curr->next = newSeg;
 397              		.loc 1 145 17 is_stmt 0
 398 0218 833787FF 		ld	a5,-8(a4)
 145:src/MemoryAllocator.cpp ****     if (curr) curr->next = newSeg;
 399              		.loc 1 145 5
 400 021c 63840700 		beqz	a5,.L30
 145:src/MemoryAllocator.cpp ****     if (curr) curr->next = newSeg;
 401              		.loc 1 145 23 is_stmt 1 discriminator 1
 145:src/MemoryAllocator.cpp ****     if (curr) curr->next = newSeg;
 402              		.loc 1 145 42 is_stmt 0 discriminator 1
 403 0220 23B4A700 		sd	a0,8(a5)
 404              	.L30:
 146:src/MemoryAllocator.cpp ****     else MemoryAllocator::head = newSeg;
 405              		.loc 1 146 5 is_stmt 1
 406 0224 638E0402 		beqz	s1,.L31
 146:src/MemoryAllocator.cpp ****     else MemoryAllocator::head = newSeg;
 407              		.loc 1 146 15 discriminator 1
 146:src/MemoryAllocator.cpp ****     else MemoryAllocator::head = newSeg;
 408              		.loc 1 146 26 is_stmt 0 discriminator 1
 409 0228 23B0A400 		sd	a0,0(s1)
 410              	.L32:
 162:src/MemoryAllocator.cpp ****     MemoryAllocator::tryToJoin(curr);
 411              		.loc 1 162 5 is_stmt 1
 162:src/MemoryAllocator.cpp ****     MemoryAllocator::tryToJoin(curr);
 412              		.loc 1 162 31 is_stmt 0
 413 022c 97000000 		call	_ZN15MemoryAllocator9tryToJoinEP7FreeMem
 413      E7800000 
 414              	.LVL33:
 163:src/MemoryAllocator.cpp **** 
 415              		.loc 1 163 5 is_stmt 1
GAS LISTING /tmp/cctUUFKI.s 			page 13


 163:src/MemoryAllocator.cpp **** 
 416              		.loc 1 163 31 is_stmt 0
 417 0234 13850400 		mv	a0,s1
 418 0238 97000000 		call	_ZN15MemoryAllocator9tryToJoinEP7FreeMem
 418      E7800000 
 419              	.LVL34:
 165:src/MemoryAllocator.cpp **** }
 420              		.loc 1 165 5 is_stmt 1
 166:src/MemoryAllocator.cpp **** 
 421              		.loc 1 166 1 is_stmt 0
 422 0240 13050000 		li	a0,0
 423 0244 83308101 		ld	ra,24(sp)
 424              		.cfi_remember_state
 425              		.cfi_restore 1
 426 0248 03340101 		ld	s0,16(sp)
 427              		.cfi_restore 8
 428              		.cfi_def_cfa 2, 32
 429 024c 83348100 		ld	s1,8(sp)
 430              		.cfi_restore 9
 431              	.LVL35:
 432 0250 13010102 		addi	sp,sp,32
 433              		.cfi_def_cfa_offset 0
 434 0254 67800000 		jr	ra
 435              	.LVL36:
 436              	.L28:
 437              		.cfi_restore_state
 144:src/MemoryAllocator.cpp ****     if (newSeg->next) newSeg->next->prev = newSeg;
 438              		.loc 1 144 10 is_stmt 1
 144:src/MemoryAllocator.cpp ****     if (newSeg->next) newSeg->next->prev = newSeg;
 439              		.loc 1 144 23 is_stmt 0
 440 0258 233CD7FE 		sd	a3,-8(a4)
 441 025c 6FF0DFFB 		j	.L29
 442              	.L31:
 147:src/MemoryAllocator.cpp **** 
 443              		.loc 1 147 10 is_stmt 1
 147:src/MemoryAllocator.cpp **** 
 444              		.loc 1 147 32 is_stmt 0
 445 0260 97070000 		sd	a0,.LANCHOR0+16,a5
 445      23B0A700 
 446 0268 6FF05FFC 		j	.L32
 447              		.cfi_endproc
 448              	.LFE2:
 450              		.globl	_ZN15MemoryAllocator4headE
 451              		.globl	_ZN15MemoryAllocator6memEndE
 452              		.globl	_ZN15MemoryAllocator8memStartE
 453              		.bss
 454              		.align	3
 455              		.set	.LANCHOR0,. + 0
 458              	_ZN15MemoryAllocator8memStartE:
 459 0000 00000000 		.zero	8
 459      00000000 
 462              	_ZN15MemoryAllocator6memEndE:
 463 0008 00000000 		.zero	8
 463      00000000 
 466              	_ZN15MemoryAllocator4headE:
 467 0010 00000000 		.zero	8
 467      00000000 
GAS LISTING /tmp/cctUUFKI.s 			page 14


 468              		.text
 469              	.Letext0:
 470              		.file 2 "src/../h/../lib/hw.h"
 471              		.file 3 "src/../h/MemoryAllocator.hpp"
GAS LISTING /tmp/cctUUFKI.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MemoryAllocator.cpp
     /tmp/cctUUFKI.s:9      .text:0000000000000000 _ZN15MemoryAllocator10initialiseEv
     /tmp/cctUUFKI.s:13     .text:0000000000000000 .L0 
     /tmp/cctUUFKI.s:14     .text:0000000000000000 .L0 
     /tmp/cctUUFKI.s:15     .text:0000000000000004 .L0 
     /tmp/cctUUFKI.s:17     .text:0000000000000008 .L0 
     /tmp/cctUUFKI.s:19     .text:000000000000000c .L0 
     /tmp/cctUUFKI.s:21     .text:000000000000000c .L0 
     /tmp/cctUUFKI.s:22     .text:000000000000000c .L0 
     /tmp/cctUUFKI.s:27     .text:0000000000000020 .L0 
     /tmp/cctUUFKI.s:30     .text:000000000000002c .L0 
     /tmp/cctUUFKI.s:31     .text:000000000000002c .L0 
     /tmp/cctUUFKI.s:35     .text:0000000000000038 .L0 
     /tmp/cctUUFKI.s:36     .text:0000000000000038 .L0 
     /tmp/cctUUFKI.s:39     .text:000000000000003c .L0 
     /tmp/cctUUFKI.s:41     .text:0000000000000040 .L0 
     /tmp/cctUUFKI.s:42     .text:0000000000000040 .L0 
     /tmp/cctUUFKI.s:44     .text:0000000000000044 .L0 
     /tmp/cctUUFKI.s:45     .text:0000000000000044 .L0 
     /tmp/cctUUFKI.s:48     .text:0000000000000048 .L0 
     /tmp/cctUUFKI.s:49     .text:0000000000000048 .L0 
     /tmp/cctUUFKI.s:51     .text:000000000000004c .L0 
     /tmp/cctUUFKI.s:53     .text:0000000000000050 .L0 
     /tmp/cctUUFKI.s:54     .text:0000000000000050 .L0 
     /tmp/cctUUFKI.s:58     .text:000000000000005c .L0 
     /tmp/cctUUFKI.s:60     .text:0000000000000060 .L0 
     /tmp/cctUUFKI.s:62     .text:0000000000000064 .L0 
     /tmp/cctUUFKI.s:63     .text:0000000000000068 .L0 
     /tmp/cctUUFKI.s:64     .text:0000000000000068 .L0 
     /tmp/cctUUFKI.s:66     .text:000000000000006c .L0 
     /tmp/cctUUFKI.s:68     .text:0000000000000070 .L0 
     /tmp/cctUUFKI.s:74     .text:0000000000000070 _ZN15MemoryAllocator9mem_allocEm
     /tmp/cctUUFKI.s:77     .text:0000000000000070 .L0 
     /tmp/cctUUFKI.s:79     .text:0000000000000070 .L0 
     /tmp/cctUUFKI.s:80     .text:0000000000000074 .L0 
     /tmp/cctUUFKI.s:82     .text:0000000000000078 .L0 
     /tmp/cctUUFKI.s:84     .text:000000000000007c .L0 
     /tmp/cctUUFKI.s:86     .text:000000000000007c .L0 
     /tmp/cctUUFKI.s:88     .text:0000000000000080 .L0 
     /tmp/cctUUFKI.s:89     .text:0000000000000080 .L0 
     /tmp/cctUUFKI.s:92     .text:0000000000000084 .L0 
     /tmp/cctUUFKI.s:93     .text:0000000000000084 .L0 
     /tmp/cctUUFKI.s:94     .text:0000000000000084 .L0 
     /tmp/cctUUFKI.s:96     .text:0000000000000088 .L0 
     /tmp/cctUUFKI.s:98     .text:000000000000008c .L0 
     /tmp/cctUUFKI.s:99     .text:000000000000008c .L0 
     /tmp/cctUUFKI.s:101    .text:0000000000000090 .L0 
     /tmp/cctUUFKI.s:105    .text:0000000000000094 .L0 
     /tmp/cctUUFKI.s:106    .text:0000000000000094 .L0 
     /tmp/cctUUFKI.s:112    .text:00000000000000a0 .L0 
     /tmp/cctUUFKI.s:113    .text:00000000000000a0 .L0 
     /tmp/cctUUFKI.s:117    .text:00000000000000a4 .L0 
     /tmp/cctUUFKI.s:118    .text:00000000000000a4 .L0 
     /tmp/cctUUFKI.s:120    .text:00000000000000a8 .L0 
     /tmp/cctUUFKI.s:123    .text:00000000000000ac .L0 
     /tmp/cctUUFKI.s:124    .text:00000000000000ac .L0 
GAS LISTING /tmp/cctUUFKI.s 			page 16


     /tmp/cctUUFKI.s:127    .text:00000000000000b0 .L0 
     /tmp/cctUUFKI.s:130    .text:00000000000000b4 .L0 
     /tmp/cctUUFKI.s:136    .text:00000000000000bc .L0 
     /tmp/cctUUFKI.s:137    .text:00000000000000bc .L0 
     /tmp/cctUUFKI.s:146    .text:00000000000000c4 .L0 
     /tmp/cctUUFKI.s:147    .text:00000000000000c4 .L0 
     /tmp/cctUUFKI.s:150    .text:00000000000000cc .L0 
     /tmp/cctUUFKI.s:152    .text:00000000000000d0 .L0 
     /tmp/cctUUFKI.s:155    .text:00000000000000d4 .L0 
     /tmp/cctUUFKI.s:156    .text:00000000000000d4 .L0 
     /tmp/cctUUFKI.s:158    .text:00000000000000d8 .L0 
     /tmp/cctUUFKI.s:160    .text:00000000000000dc .L0 
     /tmp/cctUUFKI.s:162    .text:00000000000000e0 .L0 
     /tmp/cctUUFKI.s:164    .text:00000000000000e4 .L0 
     /tmp/cctUUFKI.s:165    .text:00000000000000e4 .L0 
     /tmp/cctUUFKI.s:167    .text:00000000000000e8 .L0 
     /tmp/cctUUFKI.s:168    .text:00000000000000e8 .L0 
     /tmp/cctUUFKI.s:170    .text:00000000000000ec .L0 
     /tmp/cctUUFKI.s:173    .text:00000000000000f0 .L0 
     /tmp/cctUUFKI.s:174    .text:00000000000000f0 .L0 
     /tmp/cctUUFKI.s:176    .text:00000000000000f4 .L0 
     /tmp/cctUUFKI.s:178    .text:00000000000000f8 .L0 
     /tmp/cctUUFKI.s:181    .text:00000000000000fc .L0 
     /tmp/cctUUFKI.s:182    .text:00000000000000fc .L0 
     /tmp/cctUUFKI.s:184    .text:0000000000000100 .L0 
     /tmp/cctUUFKI.s:185    .text:0000000000000100 .L0 
     /tmp/cctUUFKI.s:192    .text:0000000000000104 .L0 
     /tmp/cctUUFKI.s:193    .text:0000000000000104 .L0 
     /tmp/cctUUFKI.s:194    .text:0000000000000108 .L0 
     /tmp/cctUUFKI.s:195    .text:0000000000000108 .L0 
     /tmp/cctUUFKI.s:196    .text:0000000000000108 .L0 
     /tmp/cctUUFKI.s:198    .text:000000000000010c .L0 
     /tmp/cctUUFKI.s:202    .text:0000000000000110 .L0 
     /tmp/cctUUFKI.s:207    .text:0000000000000110 .L0 
     /tmp/cctUUFKI.s:208    .text:0000000000000110 .L0 
     /tmp/cctUUFKI.s:210    .text:0000000000000114 .L0 
     /tmp/cctUUFKI.s:214    .text:0000000000000120 .L0 
     /tmp/cctUUFKI.s:215    .text:0000000000000120 .L0 
     /tmp/cctUUFKI.s:217    .text:0000000000000124 .L0 
     /tmp/cctUUFKI.s:219    .text:0000000000000128 .L0 
     /tmp/cctUUFKI.s:220    .text:0000000000000128 .L0 
     /tmp/cctUUFKI.s:224    .text:0000000000000130 .L0 
     /tmp/cctUUFKI.s:226    .text:0000000000000134 .L0 
     /tmp/cctUUFKI.s:227    .text:0000000000000134 .L0 
     /tmp/cctUUFKI.s:235    .text:000000000000013c .L0 
     /tmp/cctUUFKI.s:238    .text:0000000000000144 .L0 
     /tmp/cctUUFKI.s:244    .text:0000000000000144 _ZN15MemoryAllocator9tryToJoinEP7FreeMem
     /tmp/cctUUFKI.s:247    .text:0000000000000144 .L0 
     /tmp/cctUUFKI.s:249    .text:0000000000000144 .L0 
     /tmp/cctUUFKI.s:250    .text:0000000000000148 .L0 
     /tmp/cctUUFKI.s:252    .text:000000000000014c .L0 
     /tmp/cctUUFKI.s:254    .text:0000000000000150 .L0 
     /tmp/cctUUFKI.s:256    .text:0000000000000150 .L0 
     /tmp/cctUUFKI.s:258    .text:0000000000000154 .L0 
     /tmp/cctUUFKI.s:259    .text:0000000000000154 .L0 
     /tmp/cctUUFKI.s:261    .text:0000000000000158 .L0 
     /tmp/cctUUFKI.s:263    .text:000000000000015c .L0 
GAS LISTING /tmp/cctUUFKI.s 			page 17


     /tmp/cctUUFKI.s:265    .text:0000000000000160 .L0 
     /tmp/cctUUFKI.s:267    .text:0000000000000164 .L0 
     /tmp/cctUUFKI.s:269    .text:0000000000000168 .L0 
     /tmp/cctUUFKI.s:271    .text:000000000000016c .L0 
     /tmp/cctUUFKI.s:275    .text:0000000000000170 .L0 
     /tmp/cctUUFKI.s:276    .text:0000000000000174 .L0 
     /tmp/cctUUFKI.s:277    .text:0000000000000174 .L0 
     /tmp/cctUUFKI.s:278    .text:0000000000000174 .L0 
     /tmp/cctUUFKI.s:280    .text:0000000000000178 .L0 
     /tmp/cctUUFKI.s:284    .text:000000000000017c .L0 
     /tmp/cctUUFKI.s:286    .text:000000000000017c .L0 
     /tmp/cctUUFKI.s:287    .text:000000000000017c .L0 
     /tmp/cctUUFKI.s:289    .text:0000000000000180 .L0 
     /tmp/cctUUFKI.s:292    .text:0000000000000188 .L0 
     /tmp/cctUUFKI.s:293    .text:0000000000000188 .L0 
     /tmp/cctUUFKI.s:295    .text:000000000000018c .L0 
     /tmp/cctUUFKI.s:297    .text:0000000000000190 .L0 
     /tmp/cctUUFKI.s:299    .text:0000000000000194 .L0 
     /tmp/cctUUFKI.s:300    .text:0000000000000194 .L0 
     /tmp/cctUUFKI.s:303    .text:0000000000000198 .L0 
     /tmp/cctUUFKI.s:304    .text:0000000000000198 .L0 
     /tmp/cctUUFKI.s:310    .text:00000000000001a0 .L0 
     /tmp/cctUUFKI.s:316    .text:00000000000001a8 .L0 
     /tmp/cctUUFKI.s:319    .text:00000000000001b0 .L0 
     /tmp/cctUUFKI.s:325    .text:00000000000001b0 _ZN15MemoryAllocator8mem_freeEPv
     /tmp/cctUUFKI.s:328    .text:00000000000001b0 .L0 
     /tmp/cctUUFKI.s:330    .text:00000000000001b0 .L0 
     /tmp/cctUUFKI.s:331    .text:00000000000001b4 .L0 
     /tmp/cctUUFKI.s:335    .text:00000000000001c0 .L0 
     /tmp/cctUUFKI.s:336    .text:00000000000001c0 .L0 
     /tmp/cctUUFKI.s:337    .text:00000000000001c0 .L0 
     /tmp/cctUUFKI.s:339    .text:00000000000001c4 .L0 
     /tmp/cctUUFKI.s:342    .text:00000000000001c8 .L0 
     /tmp/cctUUFKI.s:343    .text:00000000000001c8 .L0 
     /tmp/cctUUFKI.s:346    .text:00000000000001cc .L0 
     /tmp/cctUUFKI.s:347    .text:00000000000001cc .L0 
     /tmp/cctUUFKI.s:350    .text:00000000000001d0 .L0 
     /tmp/cctUUFKI.s:351    .text:00000000000001d0 .L0 
     /tmp/cctUUFKI.s:352    .text:00000000000001d0 .L0 
     /tmp/cctUUFKI.s:353    .text:00000000000001d0 .L0 
     /tmp/cctUUFKI.s:355    .text:00000000000001d8 .L0 
     /tmp/cctUUFKI.s:357    .text:00000000000001dc .L0 
     /tmp/cctUUFKI.s:359    .text:00000000000001e0 .L0 
     /tmp/cctUUFKI.s:363    .text:00000000000001e4 .L0 
     /tmp/cctUUFKI.s:365    .text:00000000000001e8 .L0 
     /tmp/cctUUFKI.s:368    .text:00000000000001ec .L0 
     /tmp/cctUUFKI.s:370    .text:00000000000001f0 .L0 
     /tmp/cctUUFKI.s:375    .text:00000000000001f8 .L0 
     /tmp/cctUUFKI.s:382    .text:0000000000000204 .L0 
     /tmp/cctUUFKI.s:383    .text:0000000000000204 .L0 
     /tmp/cctUUFKI.s:384    .text:0000000000000204 .L0 
     /tmp/cctUUFKI.s:386    .text:0000000000000208 .L0 
     /tmp/cctUUFKI.s:387    .text:0000000000000208 .L0 
     /tmp/cctUUFKI.s:389    .text:000000000000020c .L0 
     /tmp/cctUUFKI.s:391    .text:0000000000000210 .L0 
     /tmp/cctUUFKI.s:392    .text:0000000000000210 .L0 
     /tmp/cctUUFKI.s:394    .text:0000000000000214 .L0 
GAS LISTING /tmp/cctUUFKI.s 			page 18


     /tmp/cctUUFKI.s:397    .text:0000000000000218 .L0 
     /tmp/cctUUFKI.s:398    .text:0000000000000218 .L0 
     /tmp/cctUUFKI.s:400    .text:000000000000021c .L0 
     /tmp/cctUUFKI.s:402    .text:0000000000000220 .L0 
     /tmp/cctUUFKI.s:403    .text:0000000000000220 .L0 
     /tmp/cctUUFKI.s:406    .text:0000000000000224 .L0 
     /tmp/cctUUFKI.s:408    .text:0000000000000228 .L0 
     /tmp/cctUUFKI.s:409    .text:0000000000000228 .L0 
     /tmp/cctUUFKI.s:412    .text:000000000000022c .L0 
     /tmp/cctUUFKI.s:413    .text:000000000000022c .L0 
     /tmp/cctUUFKI.s:416    .text:0000000000000234 .L0 
     /tmp/cctUUFKI.s:417    .text:0000000000000234 .L0 
     /tmp/cctUUFKI.s:421    .text:0000000000000240 .L0 
     /tmp/cctUUFKI.s:422    .text:0000000000000240 .L0 
     /tmp/cctUUFKI.s:424    .text:0000000000000248 .L0 
     /tmp/cctUUFKI.s:425    .text:0000000000000248 .L0 
     /tmp/cctUUFKI.s:427    .text:000000000000024c .L0 
     /tmp/cctUUFKI.s:428    .text:000000000000024c .L0 
     /tmp/cctUUFKI.s:430    .text:0000000000000250 .L0 
     /tmp/cctUUFKI.s:433    .text:0000000000000254 .L0 
     /tmp/cctUUFKI.s:437    .text:0000000000000258 .L0 
     /tmp/cctUUFKI.s:439    .text:0000000000000258 .L0 
     /tmp/cctUUFKI.s:440    .text:0000000000000258 .L0 
     /tmp/cctUUFKI.s:444    .text:0000000000000260 .L0 
     /tmp/cctUUFKI.s:445    .text:0000000000000260 .L0 
     /tmp/cctUUFKI.s:447    .text:000000000000026c .L0 
     /tmp/cctUUFKI.s:466    .bss:0000000000000010 _ZN15MemoryAllocator4headE
     /tmp/cctUUFKI.s:462    .bss:0000000000000008 _ZN15MemoryAllocator6memEndE
     /tmp/cctUUFKI.s:458    .bss:0000000000000000 _ZN15MemoryAllocator8memStartE
     /tmp/cctUUFKI.s:455    .bss:0000000000000000 .LANCHOR0
     /tmp/cctUUFKI.s:472    .text:000000000000026c .L0 
     /tmp/cctUUFKI.s:22     .text:000000000000000c .L0 
     /tmp/cctUUFKI.s:27     .text:0000000000000020 .L0 
     /tmp/cctUUFKI.s:31     .text:000000000000002c .L0 
     /tmp/cctUUFKI.s:106    .text:0000000000000094 .L0 
     /tmp/cctUUFKI.s:210    .text:0000000000000114 .L0 
     /tmp/cctUUFKI.s:353    .text:00000000000001d0 .L0 
     /tmp/cctUUFKI.s:445    .text:0000000000000260 .L0 
     /tmp/cctUUFKI.s:230    .text:000000000000013c .L13
     /tmp/cctUUFKI.s:134    .text:00000000000000bc .L5
     /tmp/cctUUFKI.s:188    .text:0000000000000104 .L3
     /tmp/cctUUFKI.s:141    .text:00000000000000c4 .L15
     /tmp/cctUUFKI.s:110    .text:00000000000000a0 .L12
     /tmp/cctUUFKI.s:103    .text:0000000000000094 .L6
     /tmp/cctUUFKI.s:171    .text:00000000000000f0 .L8
     /tmp/cctUUFKI.s:201    .text:0000000000000110 .L16
     /tmp/cctUUFKI.s:212    .text:0000000000000120 .L10
     /tmp/cctUUFKI.s:153    .text:00000000000000d4 .L9
     /tmp/cctUUFKI.s:222    .text:0000000000000130 .L11
     /tmp/cctUUFKI.s:308    .text:00000000000001a0 .L20
     /tmp/cctUUFKI.s:314    .text:00000000000001a8 .L21
     /tmp/cctUUFKI.s:283    .text:000000000000017c .L24
     /tmp/cctUUFKI.s:301    .text:0000000000000198 .L19
     /tmp/cctUUFKI.s:273    .text:0000000000000170 .L18
     /tmp/cctUUFKI.s:373    .text:00000000000001f8 .L33
     /tmp/cctUUFKI.s:377    .text:0000000000000200 .L34
     /tmp/cctUUFKI.s:380    .text:0000000000000204 .L26
GAS LISTING /tmp/cctUUFKI.s 			page 19


     /tmp/cctUUFKI.s:361    .text:00000000000001e4 .L27
     /tmp/cctUUFKI.s:436    .text:0000000000000258 .L28
     /tmp/cctUUFKI.s:404    .text:0000000000000224 .L30
     /tmp/cctUUFKI.s:442    .text:0000000000000260 .L31
     /tmp/cctUUFKI.s:395    .text:0000000000000218 .L29
     /tmp/cctUUFKI.s:410    .text:000000000000022c .L32
     /tmp/cctUUFKI.s:918    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cctUUFKI.s:1786   .debug_str:0000000000000158 .LASF39
     /tmp/cctUUFKI.s:1808   .debug_str:00000000000002df .LASF40
     /tmp/cctUUFKI.s:1810   .debug_str:00000000000002f7 .LASF41
     /tmp/cctUUFKI.s:5      .text:0000000000000000 .Ltext0
     /tmp/cctUUFKI.s:469    .text:000000000000026c .Letext0
     /tmp/cctUUFKI.s:1736   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cctUUFKI.s:1792   .debug_str:0000000000000240 .LASF0
     /tmp/cctUUFKI.s:1780   .debug_str:000000000000012e .LASF1
     /tmp/cctUUFKI.s:1774   .debug_str:0000000000000106 .LASF2
     /tmp/cctUUFKI.s:1756   .debug_str:000000000000005f .LASF4
     /tmp/cctUUFKI.s:1778   .debug_str:000000000000011c .LASF3
     /tmp/cctUUFKI.s:1742   .debug_str:0000000000000023 .LASF5
     /tmp/cctUUFKI.s:1738   .debug_str:0000000000000000 .LASF6
     /tmp/cctUUFKI.s:1768   .debug_str:00000000000000c3 .LASF7
     /tmp/cctUUFKI.s:1804   .debug_str:00000000000002b9 .LASF8
     /tmp/cctUUFKI.s:1752   .debug_str:000000000000004a .LASF9
     /tmp/cctUUFKI.s:1830   .debug_str:0000000000000383 .LASF10
     /tmp/cctUUFKI.s:1770   .debug_str:00000000000000d6 .LASF11
     /tmp/cctUUFKI.s:1820   .debug_str:0000000000000352 .LASF12
     /tmp/cctUUFKI.s:1800   .debug_str:00000000000002a0 .LASF13
     /tmp/cctUUFKI.s:1782   .debug_str:0000000000000141 .LASF14
     /tmp/cctUUFKI.s:1764   .debug_str:00000000000000a8 .LASF15
     /tmp/cctUUFKI.s:1806   .debug_str:00000000000002c9 .LASF16
     /tmp/cctUUFKI.s:1776   .debug_str:0000000000000114 .LASF20
     /tmp/cctUUFKI.s:1744   .debug_str:000000000000002a .LASF17
     /tmp/cctUUFKI.s:1826   .debug_str:0000000000000371 .LASF18
     /tmp/cctUUFKI.s:1824   .debug_str:000000000000036c .LASF19
     /tmp/cctUUFKI.s:1828   .debug_str:0000000000000376 .LASF21
     /tmp/cctUUFKI.s:1746   .debug_str:000000000000002f .LASF22
     /tmp/cctUUFKI.s:1740   .debug_str:0000000000000013 .LASF42
     /tmp/cctUUFKI.s:1814   .debug_str:000000000000031e .LASF23
     /tmp/cctUUFKI.s:1754   .debug_str:0000000000000058 .LASF24
     /tmp/cctUUFKI.s:1788   .debug_str:000000000000021c .LASF25
     /tmp/cctUUFKI.s:1818   .debug_str:0000000000000348 .LASF26
     /tmp/cctUUFKI.s:1796   .debug_str:0000000000000270 .LASF28
     /tmp/cctUUFKI.s:1784   .debug_str:000000000000014d .LASF43
     /tmp/cctUUFKI.s:1794   .debug_str:000000000000024d .LASF44
     /tmp/cctUUFKI.s:1822   .debug_str:0000000000000362 .LASF45
     /tmp/cctUUFKI.s:1816   .debug_str:0000000000000327 .LASF46
     /tmp/cctUUFKI.s:1812   .debug_str:0000000000000315 .LASF27
     /tmp/cctUUFKI.s:1772   .debug_str:00000000000000e5 .LASF29
     /tmp/cctUUFKI.s:1790   .debug_str:0000000000000221 .LASF30
     /tmp/cctUUFKI.s:1762   .debug_str:000000000000008b .LASF31
     /tmp/cctUUFKI.s:1760   .debug_str:0000000000000070 .LASF32
     /tmp/cctUUFKI.s:245    .text:0000000000000144 .LFB3
     /tmp/cctUUFKI.s:320    .text:00000000000001b0 .LFE3
     /tmp/cctUUFKI.s:1748   .debug_str:0000000000000038 .LASF33
     /tmp/cctUUFKI.s:1414   .debug_loc:0000000000000000 .LLST6
     /tmp/cctUUFKI.s:326    .text:00000000000001b0 .LFB2
     /tmp/cctUUFKI.s:448    .text:000000000000026c .LFE2
GAS LISTING /tmp/cctUUFKI.s 			page 20


     /tmp/cctUUFKI.s:1461   .debug_loc:00000000000000b4 .LLST7
     /tmp/cctUUFKI.s:1750   .debug_str:000000000000003d .LASF34
     /tmp/cctUUFKI.s:1483   .debug_loc:0000000000000113 .LLST8
     /tmp/cctUUFKI.s:1503   .debug_loc:0000000000000161 .LLST9
     /tmp/cctUUFKI.s:1766   .debug_str:00000000000000be .LASF35
     /tmp/cctUUFKI.s:1514   .debug_loc:0000000000000197 .LLST10
     /tmp/cctUUFKI.s:1534   .debug_loc:00000000000001e5 .LLST11
     /tmp/cctUUFKI.s:1798   .debug_str:0000000000000299 .LASF36
     /tmp/cctUUFKI.s:1563   .debug_loc:0000000000000269 .LLST12
     /tmp/cctUUFKI.s:414    .text:0000000000000234 .LVL33
     /tmp/cctUUFKI.s:419    .text:0000000000000240 .LVL34
     /tmp/cctUUFKI.s:75     .text:0000000000000070 .LFB1
     /tmp/cctUUFKI.s:239    .text:0000000000000144 .LFE1
     /tmp/cctUUFKI.s:1583   .debug_loc:00000000000002b7 .LLST1
     /tmp/cctUUFKI.s:1758   .debug_str:0000000000000066 .LASF37
     /tmp/cctUUFKI.s:1614   .debug_loc:000000000000032e .LLST2
     /tmp/cctUUFKI.s:1652   .debug_loc:00000000000003ac .LLST3
     /tmp/cctUUFKI.s:1677   .debug_loc:000000000000041d .LLST4
     /tmp/cctUUFKI.s:1728   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cctUUFKI.s:1696   .debug_loc:0000000000000479 .LLST5
     /tmp/cctUUFKI.s:10     .text:0000000000000000 .LFB0
     /tmp/cctUUFKI.s:69     .text:0000000000000070 .LFE0
     /tmp/cctUUFKI.s:1802   .debug_str:00000000000002b0 .LASF38
     /tmp/cctUUFKI.s:1703   .debug_loc:000000000000049c .LLST0
     /tmp/cctUUFKI.s:248    .text:0000000000000144 .LVL18
     /tmp/cctUUFKI.s:272    .text:0000000000000170 .LVL19
     /tmp/cctUUFKI.s:282    .text:000000000000017c .LVL20
     /tmp/cctUUFKI.s:305    .text:000000000000019c .LVL21
     /tmp/cctUUFKI.s:307    .text:00000000000001a0 .LVL22
     /tmp/cctUUFKI.s:311    .text:00000000000001a4 .LVL23
     /tmp/cctUUFKI.s:313    .text:00000000000001a8 .LVL24
     /tmp/cctUUFKI.s:317    .text:00000000000001ac .LVL25
     /tmp/cctUUFKI.s:329    .text:00000000000001b0 .LVL26
     /tmp/cctUUFKI.s:344    .text:00000000000001cc .LVL27
     /tmp/cctUUFKI.s:435    .text:0000000000000258 .LVL36
     /tmp/cctUUFKI.s:348    .text:00000000000001d0 .LVL28
     /tmp/cctUUFKI.s:360    .text:00000000000001e4 .LVL29
     /tmp/cctUUFKI.s:366    .text:00000000000001ec .LVL30
     /tmp/cctUUFKI.s:372    .text:00000000000001f8 .LVL31
     /tmp/cctUUFKI.s:379    .text:0000000000000204 .LVL32
     /tmp/cctUUFKI.s:431    .text:0000000000000250 .LVL35
     /tmp/cctUUFKI.s:78     .text:0000000000000070 .LVL3
     /tmp/cctUUFKI.s:90     .text:0000000000000084 .LVL4
     /tmp/cctUUFKI.s:109    .text:00000000000000a0 .LVL7
     /tmp/cctUUFKI.s:229    .text:000000000000013c .LVL16
     /tmp/cctUUFKI.s:236    .text:0000000000000140 .LVL17
     /tmp/cctUUFKI.s:133    .text:00000000000000bc .LVL10
     /tmp/cctUUFKI.s:140    .text:00000000000000c4 .LVL12
     /tmp/cctUUFKI.s:186    .text:0000000000000104 .LVL14
     /tmp/cctUUFKI.s:200    .text:0000000000000110 .LVL15
     /tmp/cctUUFKI.s:102    .text:0000000000000094 .LVL5
     /tmp/cctUUFKI.s:138    .text:00000000000000c0 .LVL11
     /tmp/cctUUFKI.s:107    .text:000000000000009c .LVL6
     /tmp/cctUUFKI.s:131    .text:00000000000000b8 .LVL9
     /tmp/cctUUFKI.s:179    .text:00000000000000fc .LVL13
     /tmp/cctUUFKI.s:33     .text:0000000000000038 .LVL0
     /tmp/cctUUFKI.s:37     .text:000000000000003c .LVL1
GAS LISTING /tmp/cctUUFKI.s 			page 21


     /tmp/cctUUFKI.s:473    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cctUUFKI.s:144    .text:00000000000000c4 .LBB4
     /tmp/cctUUFKI.s:189    .text:0000000000000104 .LBE4
     /tmp/cctUUFKI.s:205    .text:0000000000000110 .LBB5
     /tmp/cctUUFKI.s:231    .text:000000000000013c .LBE5

UNDEFINED SYMBOLS
HEAP_START_ADDR
HEAP_END_ADDR
