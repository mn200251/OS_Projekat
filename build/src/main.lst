GAS LISTING /tmp/cc9JJ5PT.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata.str1.8,"aMS",@progbits,1
   7              		.align	3
   8              	.LC0:
   9 0000 46696E69 		.string	"Finished\n"
   9      73686564 
   9      0A00
  10              		.text
  11              		.align	2
  12              		.globl	_Z8userMainv
  14              	_Z8userMainv:
  15              	.LFB16:
  16              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** #include "../lib/console.h"
   2:src/main.cpp  **** #include "../h/MemoryAllocator.hpp"
   3:src/main.cpp  **** #include "../h/print.hpp"
   4:src/main.cpp  **** #include "../h/riscv.hpp"
   5:src/main.cpp  **** #include "../h/syscall_c.hpp"
   6:src/main.cpp  **** 
   7:src/main.cpp  **** void userMain()
   8:src/main.cpp  **** {
  17              		.loc 1 8 1
  18              		.cfi_startproc
  19 0000 130101FF 		addi	sp,sp,-16
  20              		.cfi_def_cfa_offset 16
  21 0004 23341100 		sd	ra,8(sp)
  22 0008 23308100 		sd	s0,0(sp)
  23              		.cfi_offset 1, -8
  24              		.cfi_offset 8, -16
  25 000c 13040101 		addi	s0,sp,16
  26              		.cfi_def_cfa 8, 0
   9:src/main.cpp  ****     __putc('1');
  27              		.loc 1 9 5
  28              		.loc 1 9 11 is_stmt 0
  29 0010 13051003 		li	a0,49
  30 0014 97000000 		call	__putc@plt
  30      E7800000 
  31              	.LVL0:
  10:src/main.cpp  ****     __putc('\n');
  32              		.loc 1 10 5 is_stmt 1
  33              		.loc 1 10 11 is_stmt 0
  34 001c 1305A000 		li	a0,10
  35 0020 97000000 		call	__putc@plt
  35      E7800000 
  36              	.LVL1:
  11:src/main.cpp  **** 
  12:src/main.cpp  ****     printString("Finished\n");
  37              		.loc 1 12 5 is_stmt 1
  38              		.loc 1 12 16 is_stmt 0
  39 0028 17050000 		lla	a0,.LC0
  39      13050500 
  40 0030 97000000 		call	_Z11printStringPKc@plt
  40      E7800000 
GAS LISTING /tmp/cc9JJ5PT.s 			page 2


  41              	.LVL2:
  13:src/main.cpp  **** }
  42              		.loc 1 13 1
  43 0038 83308100 		ld	ra,8(sp)
  44              		.cfi_restore 1
  45 003c 03340100 		ld	s0,0(sp)
  46              		.cfi_restore 8
  47              		.cfi_def_cfa 2, 16
  48 0040 13010101 		addi	sp,sp,16
  49              		.cfi_def_cfa_offset 0
  50 0044 67800000 		jr	ra
  51              		.cfi_endproc
  52              	.LFE16:
  54              		.align	2
  55              		.globl	main
  57              	main:
  58              	.LFB17:
  14:src/main.cpp  **** 
  15:src/main.cpp  **** void main()
  16:src/main.cpp  **** {
  59              		.loc 1 16 1 is_stmt 1
  60              		.cfi_startproc
  61 0048 130101FF 		addi	sp,sp,-16
  62              		.cfi_def_cfa_offset 16
  63 004c 23341100 		sd	ra,8(sp)
  64 0050 23308100 		sd	s0,0(sp)
  65              		.cfi_offset 1, -8
  66              		.cfi_offset 8, -16
  67 0054 13040101 		addi	s0,sp,16
  68              		.cfi_def_cfa 8, 0
  17:src/main.cpp  ****     MemoryAllocator::initialise();
  69              		.loc 1 17 5
  70              		.loc 1 17 32 is_stmt 0
  71 0058 97000000 		call	_ZN15MemoryAllocator10initialiseEv@plt
  71      E7800000 
  72              	.LVL3:
  18:src/main.cpp  **** 
  19:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap);
  73              		.loc 1 19 5 is_stmt 1
  74              		.loc 1 19 19 is_stmt 0
  75 0060 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
  75      83B70700 
  76              	.LVL4:
  77              	.LBB6:
  78              	.LBB7:
  79              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** 
   2:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   3:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #include "../lib/hw.h"
   6:src/../h/riscv.hpp **** 
   7:src/../h/riscv.hpp **** class Riscv
   8:src/../h/riscv.hpp **** {
   9:src/../h/riscv.hpp **** public:
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
GAS LISTING /tmp/cc9JJ5PT.s 			page 3


  12:src/../h/riscv.hpp ****     static void popSppSpie();
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // read register scause
  15:src/../h/riscv.hpp ****     static uint64 r_scause();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // write register scause
  18:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // read register sepc
  21:src/../h/riscv.hpp ****     static uint64 r_sepc();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // write register sepc
  24:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // read register stvec
  27:src/../h/riscv.hpp ****     static uint64 r_stvec();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // write register stvec
  30:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // read register stval
  33:src/../h/riscv.hpp ****     static uint64 r_stval();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // write register stval
  36:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     enum BitMaskSip
  39:src/../h/riscv.hpp ****     {
  40:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  41:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  42:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  43:src/../h/riscv.hpp ****     };
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // mask set register sip
  46:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask clear register sip
  49:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // read register sip
  52:src/../h/riscv.hpp ****     static uint64 r_sip();
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // write register sip
  55:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     enum BitMaskSstatus
  58:src/../h/riscv.hpp ****     {
  59:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  60:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  61:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  62:src/../h/riscv.hpp ****     };
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // mask set register sstatus
  65:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask clear register sstatus
  68:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
GAS LISTING /tmp/cc9JJ5PT.s 			page 4


  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // read register sstatus
  71:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // write register sstatus
  74:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // supervisor trap
  77:src/../h/riscv.hpp ****     static void supervisorTrap();
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp **** private:
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // supervisor trap handler
  82:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp **** };
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  87:src/../h/riscv.hpp **** {
  88:src/../h/riscv.hpp ****     uint64 volatile scause;
  89:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  90:src/../h/riscv.hpp ****     return scause;
  91:src/../h/riscv.hpp **** }
  92:src/../h/riscv.hpp **** 
  93:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  94:src/../h/riscv.hpp **** {
  95:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  96:src/../h/riscv.hpp **** }
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
  99:src/../h/riscv.hpp **** {
 100:src/../h/riscv.hpp ****     uint64 volatile sepc;
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 102:src/../h/riscv.hpp ****     return sepc;
 103:src/../h/riscv.hpp **** }
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 106:src/../h/riscv.hpp **** {
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 108:src/../h/riscv.hpp **** }
 109:src/../h/riscv.hpp **** 
 110:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 111:src/../h/riscv.hpp **** {
 112:src/../h/riscv.hpp ****     uint64 volatile stvec;
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 114:src/../h/riscv.hpp ****     return stvec;
 115:src/../h/riscv.hpp **** }
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 118:src/../h/riscv.hpp **** {
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  80              		.loc 2 119 5 is_stmt 1
  81              		.loc 2 119 69 is_stmt 0
  82              	#APP
  83              	# 119 "src/../h/riscv.hpp" 1
 120              	}
  84              		csrw stvec, a5
GAS LISTING /tmp/cc9JJ5PT.s 			page 5


  85              	# 0 "" 2
  86              	.LVL5:
  87              	#NO_APP
  88              	.LBE7:
  89              	.LBE6:
  20:src/main.cpp  **** //    thread_t* handle = nullptr;
  21:src/main.cpp  **** //    int retVal = thread_create(handle, nullptr, nullptr);
  22:src/main.cpp  **** //    _thread::running = *handle;
  23:src/main.cpp  **** //
  24:src/main.cpp  **** //    printString("Main Thread return value: ");
  25:src/main.cpp  **** //    printInteger(retVal);
  26:src/main.cpp  **** //    printString("\n");
  27:src/main.cpp  **** 
  28:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  90              		.loc 1 28 5 is_stmt 1
  91              	.LBB8:
  92              	.LBB9:
 121:src/../h/riscv.hpp **** 
 122:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 123:src/../h/riscv.hpp **** {
 124:src/../h/riscv.hpp ****     uint64 volatile stval;
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 126:src/../h/riscv.hpp ****     return stval;
 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 130:src/../h/riscv.hpp **** {
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 132:src/../h/riscv.hpp **** }
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 135:src/../h/riscv.hpp **** {
 136:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 137:src/../h/riscv.hpp **** }
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 140:src/../h/riscv.hpp **** {
 141:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 142:src/../h/riscv.hpp **** }
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 145:src/../h/riscv.hpp **** {
 146:src/../h/riscv.hpp ****     uint64 volatile sip;
 147:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 148:src/../h/riscv.hpp ****     return sip;
 149:src/../h/riscv.hpp **** }
 150:src/../h/riscv.hpp **** 
 151:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 152:src/../h/riscv.hpp **** {
 153:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 154:src/../h/riscv.hpp **** }
 155:src/../h/riscv.hpp **** 
 156:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 157:src/../h/riscv.hpp **** {
 158:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
  93              		.loc 2 158 5
  94              		.loc 2 158 68 is_stmt 0
GAS LISTING /tmp/cc9JJ5PT.s 			page 6


  95 006c 93072000 		li	a5,2
  96              	#APP
  97              	# 158 "src/../h/riscv.hpp" 1
 159              	}
  98              		csrs sstatus, a5
  99              	# 0 "" 2
 100              	.LVL6:
 101              	#NO_APP
 102              	.LBE9:
 103              	.LBE8:
  29:src/main.cpp  **** 
  30:src/main.cpp  ****     userMain();
 104              		.loc 1 30 5 is_stmt 1
 105              		.loc 1 30 13 is_stmt 0
 106 0074 97000000 		call	_Z8userMainv
 106      E7800000 
 107              	.LVL7:
  31:src/main.cpp  **** 
  32:src/main.cpp  ****     thread_exit();
 108              		.loc 1 32 5 is_stmt 1
 109              		.loc 1 32 16 is_stmt 0
 110 007c 97000000 		call	_Z11thread_exitv@plt
 110      E7800000 
 111              	.LVL8:
  33:src/main.cpp  **** }
 112              		.loc 1 33 1
 113 0084 83308100 		ld	ra,8(sp)
 114              		.cfi_restore 1
 115 0088 03340100 		ld	s0,0(sp)
 116              		.cfi_restore 8
 117              		.cfi_def_cfa 2, 16
 118 008c 13010101 		addi	sp,sp,16
 119              		.cfi_def_cfa_offset 0
 120 0090 67800000 		jr	ra
 121              		.cfi_endproc
 122              	.LFE17:
 124              	.Letext0:
 125              		.file 3 "src/../h/../lib/hw.h"
 126              		.file 4 "src/../h/MemoryAllocator.hpp"
 127              		.file 5 "src/../h/syscall_c.hpp"
 128              		.file 6 "src/../lib/console.h"
 129              		.file 7 "src/../h/print.hpp"
GAS LISTING /tmp/cc9JJ5PT.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/cc9JJ5PT.s:14     .text:0000000000000000 _Z8userMainv
     /tmp/cc9JJ5PT.s:18     .text:0000000000000000 .L0 
     /tmp/cc9JJ5PT.s:19     .text:0000000000000000 .L0 
     /tmp/cc9JJ5PT.s:20     .text:0000000000000004 .L0 
     /tmp/cc9JJ5PT.s:23     .text:000000000000000c .L0 
     /tmp/cc9JJ5PT.s:24     .text:000000000000000c .L0 
     /tmp/cc9JJ5PT.s:26     .text:0000000000000010 .L0 
     /tmp/cc9JJ5PT.s:28     .text:0000000000000010 .L0 
     /tmp/cc9JJ5PT.s:29     .text:0000000000000010 .L0 
     /tmp/cc9JJ5PT.s:33     .text:000000000000001c .L0 
     /tmp/cc9JJ5PT.s:34     .text:000000000000001c .L0 
     /tmp/cc9JJ5PT.s:38     .text:0000000000000028 .L0 
     /tmp/cc9JJ5PT.s:39     .text:0000000000000028 .L0 
     /tmp/cc9JJ5PT.s:43     .text:0000000000000038 .L0 
     /tmp/cc9JJ5PT.s:44     .text:000000000000003c .L0 
     /tmp/cc9JJ5PT.s:46     .text:0000000000000040 .L0 
     /tmp/cc9JJ5PT.s:47     .text:0000000000000040 .L0 
     /tmp/cc9JJ5PT.s:49     .text:0000000000000044 .L0 
     /tmp/cc9JJ5PT.s:51     .text:0000000000000048 .L0 
     /tmp/cc9JJ5PT.s:57     .text:0000000000000048 main
     /tmp/cc9JJ5PT.s:60     .text:0000000000000048 .L0 
     /tmp/cc9JJ5PT.s:61     .text:0000000000000048 .L0 
     /tmp/cc9JJ5PT.s:62     .text:000000000000004c .L0 
     /tmp/cc9JJ5PT.s:65     .text:0000000000000054 .L0 
     /tmp/cc9JJ5PT.s:66     .text:0000000000000054 .L0 
     /tmp/cc9JJ5PT.s:68     .text:0000000000000058 .L0 
     /tmp/cc9JJ5PT.s:70     .text:0000000000000058 .L0 
     /tmp/cc9JJ5PT.s:71     .text:0000000000000058 .L0 
     /tmp/cc9JJ5PT.s:74     .text:0000000000000060 .L0 
     /tmp/cc9JJ5PT.s:75     .text:0000000000000060 .L0 
     /tmp/cc9JJ5PT.s:81     .text:0000000000000068 .L0 
  src/../h/riscv.hpp:119    .text:0000000000000068 .L0 
     /tmp/cc9JJ5PT.s:93     .text:000000000000006c .L0 
     /tmp/cc9JJ5PT.s:94     .text:000000000000006c .L0 
     /tmp/cc9JJ5PT.s:95     .text:000000000000006c .L0 
     /tmp/cc9JJ5PT.s:105    .text:0000000000000074 .L0 
     /tmp/cc9JJ5PT.s:106    .text:0000000000000074 .L0 
     /tmp/cc9JJ5PT.s:109    .text:000000000000007c .L0 
     /tmp/cc9JJ5PT.s:110    .text:000000000000007c .L0 
     /tmp/cc9JJ5PT.s:113    .text:0000000000000084 .L0 
     /tmp/cc9JJ5PT.s:114    .text:0000000000000088 .L0 
     /tmp/cc9JJ5PT.s:116    .text:000000000000008c .L0 
     /tmp/cc9JJ5PT.s:117    .text:000000000000008c .L0 
     /tmp/cc9JJ5PT.s:119    .text:0000000000000090 .L0 
     /tmp/cc9JJ5PT.s:121    .text:0000000000000094 .L0 
     /tmp/cc9JJ5PT.s:130    .text:0000000000000094 .L0 
     /tmp/cc9JJ5PT.s:8      .rodata.str1.8:0000000000000000 .LC0
     /tmp/cc9JJ5PT.s:39     .text:0000000000000028 .L0 
     /tmp/cc9JJ5PT.s:75     .text:0000000000000060 .L0 
     /tmp/cc9JJ5PT.s:720    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc9JJ5PT.s:1491   .debug_str:0000000000000498 .LASF84
     /tmp/cc9JJ5PT.s:1423   .debug_str:000000000000027e .LASF85
     /tmp/cc9JJ5PT.s:1393   .debug_str:000000000000017b .LASF86
     /tmp/cc9JJ5PT.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc9JJ5PT.s:124    .text:0000000000000094 .Letext0
GAS LISTING /tmp/cc9JJ5PT.s 			page 8


     /tmp/cc9JJ5PT.s:1331   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc9JJ5PT.s:1439   .debug_str:000000000000030f .LASF0
     /tmp/cc9JJ5PT.s:1447   .debug_str:0000000000000338 .LASF1
     /tmp/cc9JJ5PT.s:1431   .debug_str:00000000000002c0 .LASF2
     /tmp/cc9JJ5PT.s:1413   .debug_str:0000000000000231 .LASF4
     /tmp/cc9JJ5PT.s:1475   .debug_str:0000000000000419 .LASF3
     /tmp/cc9JJ5PT.s:1351   .debug_str:000000000000004f .LASF5
     /tmp/cc9JJ5PT.s:1453   .debug_str:0000000000000367 .LASF6
     /tmp/cc9JJ5PT.s:1437   .debug_str:00000000000002fc .LASF7
     /tmp/cc9JJ5PT.s:1497   .debug_str:000000000000057e .LASF8
     /tmp/cc9JJ5PT.s:1403   .debug_str:00000000000001db .LASF9
     /tmp/cc9JJ5PT.s:1461   .debug_str:00000000000003ae .LASF10
     /tmp/cc9JJ5PT.s:1493   .debug_str:000000000000055c .LASF11
     /tmp/cc9JJ5PT.s:1355   .debug_str:0000000000000062 .LASF12
     /tmp/cc9JJ5PT.s:1339   .debug_str:0000000000000018 .LASF13
     /tmp/cc9JJ5PT.s:1363   .debug_str:00000000000000b3 .LASF14
     /tmp/cc9JJ5PT.s:1471   .debug_str:00000000000003eb .LASF15
     /tmp/cc9JJ5PT.s:1367   .debug_str:00000000000000cb .LASF16
     /tmp/cc9JJ5PT.s:1391   .debug_str:0000000000000173 .LASF20
     /tmp/cc9JJ5PT.s:1511   .debug_str:00000000000005fa .LASF17
     /tmp/cc9JJ5PT.s:1503   .debug_str:00000000000005bf .LASF18
     /tmp/cc9JJ5PT.s:1485   .debug_str:000000000000047a .LASF19
     /tmp/cc9JJ5PT.s:1429   .debug_str:00000000000002b0 .LASF32
     /tmp/cc9JJ5PT.s:1337   .debug_str:000000000000000f .LASF21
     /tmp/cc9JJ5PT.s:1333   .debug_str:0000000000000000 .LASF22
     /tmp/cc9JJ5PT.s:1373   .debug_str:0000000000000104 .LASF23
     /tmp/cc9JJ5PT.s:1383   .debug_str:0000000000000143 .LASF28
     /tmp/cc9JJ5PT.s:1457   .debug_str:0000000000000380 .LASF30
     /tmp/cc9JJ5PT.s:1449   .debug_str:000000000000034b .LASF37
     /tmp/cc9JJ5PT.s:1359   .debug_str:0000000000000086 .LASF39
     /tmp/cc9JJ5PT.s:1477   .debug_str:000000000000042b .LASF24
     /tmp/cc9JJ5PT.s:1483   .debug_str:0000000000000459 .LASF26
     /tmp/cc9JJ5PT.s:1463   .debug_str:00000000000003bd .LASF25
     /tmp/cc9JJ5PT.s:1401   .debug_str:00000000000001ba .LASF27
     /tmp/cc9JJ5PT.s:1443   .debug_str:0000000000000323 .LASF29
     /tmp/cc9JJ5PT.s:1435   .debug_str:00000000000002d5 .LASF31
     /tmp/cc9JJ5PT.s:1445   .debug_str:0000000000000332 .LASF33
     /tmp/cc9JJ5PT.s:1371   .debug_str:00000000000000f5 .LASF87
     /tmp/cc9JJ5PT.s:1365   .debug_str:00000000000000bf .LASF34
     /tmp/cc9JJ5PT.s:1425   .debug_str:000000000000028b .LASF35
     /tmp/cc9JJ5PT.s:1353   .debug_str:0000000000000056 .LASF36
     /tmp/cc9JJ5PT.s:1467   .debug_str:00000000000003d9 .LASF38
     /tmp/cc9JJ5PT.s:1507   .debug_str:00000000000005d7 .LASF40
     /tmp/cc9JJ5PT.s:1341   .debug_str:0000000000000028 .LASF43
     /tmp/cc9JJ5PT.s:1481   .debug_str:0000000000000444 .LASF45
     /tmp/cc9JJ5PT.s:1379   .debug_str:0000000000000131 .LASF41
     /tmp/cc9JJ5PT.s:1377   .debug_str:000000000000011c .LASF42
     /tmp/cc9JJ5PT.s:1433   .debug_str:00000000000002ce .LASF44
     /tmp/cc9JJ5PT.s:1465   .debug_str:00000000000003c6 .LASF46
     /tmp/cc9JJ5PT.s:1489   .debug_str:0000000000000491 .LASF47
     /tmp/cc9JJ5PT.s:1495   .debug_str:000000000000056b .LASF48
     /tmp/cc9JJ5PT.s:1397   .debug_str:00000000000001ac .LASF49
     /tmp/cc9JJ5PT.s:1369   .debug_str:00000000000000e1 .LASF50
     /tmp/cc9JJ5PT.s:1335   .debug_str:0000000000000007 .LASF51
     /tmp/cc9JJ5PT.s:1407   .debug_str:00000000000001ff .LASF52
     /tmp/cc9JJ5PT.s:1385   .debug_str:000000000000014d .LASF53
     /tmp/cc9JJ5PT.s:1357   .debug_str:0000000000000072 .LASF54
GAS LISTING /tmp/cc9JJ5PT.s 			page 9


     /tmp/cc9JJ5PT.s:1409   .debug_str:0000000000000213 .LASF55
     /tmp/cc9JJ5PT.s:1387   .debug_str:0000000000000155 .LASF56
     /tmp/cc9JJ5PT.s:1441   .debug_str:000000000000031c .LASF57
     /tmp/cc9JJ5PT.s:1505   .debug_str:00000000000005c4 .LASF58
     /tmp/cc9JJ5PT.s:1349   .debug_str:0000000000000048 .LASF59
     /tmp/cc9JJ5PT.s:1395   .debug_str:0000000000000199 .LASF60
     /tmp/cc9JJ5PT.s:1399   .debug_str:00000000000001b4 .LASF61
     /tmp/cc9JJ5PT.s:1487   .debug_str:000000000000047f .LASF62
     /tmp/cc9JJ5PT.s:1347   .debug_str:0000000000000042 .LASF63
     /tmp/cc9JJ5PT.s:1515   .debug_str:0000000000000604 .LASF64
     /tmp/cc9JJ5PT.s:1509   .debug_str:00000000000005ef .LASF65
     /tmp/cc9JJ5PT.s:1473   .debug_str:0000000000000401 .LASF66
     /tmp/cc9JJ5PT.s:1415   .debug_str:0000000000000238 .LASF67
     /tmp/cc9JJ5PT.s:1427   .debug_str:0000000000000298 .LASF68
     /tmp/cc9JJ5PT.s:1361   .debug_str:00000000000000a9 .LASF69
     /tmp/cc9JJ5PT.s:1411   .debug_str:000000000000021b .LASF70
     /tmp/cc9JJ5PT.s:1389   .debug_str:0000000000000169 .LASF71
     /tmp/cc9JJ5PT.s:1405   .debug_str:00000000000001e9 .LASF72
     /tmp/cc9JJ5PT.s:1479   .debug_str:0000000000000435 .LASF73
     /tmp/cc9JJ5PT.s:1501   .debug_str:00000000000005a3 .LASF74
     /tmp/cc9JJ5PT.s:1499   .debug_str:000000000000058e .LASF88
     /tmp/cc9JJ5PT.s:1421   .debug_str:000000000000025c .LASF89
     /tmp/cc9JJ5PT.s:1343   .debug_str:0000000000000031 .LASF75
     /tmp/cc9JJ5PT.s:1459   .debug_str:00000000000003a9 .LASF76
     /tmp/cc9JJ5PT.s:58     .text:0000000000000048 .LFB17
     /tmp/cc9JJ5PT.s:122    .text:0000000000000094 .LFE17
     /tmp/cc9JJ5PT.s:77     .text:0000000000000068 .LBB6
     /tmp/cc9JJ5PT.s:89     .text:000000000000006c .LBE6
     /tmp/cc9JJ5PT.s:91     .text:000000000000006c .LBB8
     /tmp/cc9JJ5PT.s:103    .text:0000000000000074 .LBE8
     /tmp/cc9JJ5PT.s:1310   .debug_loc:0000000000000000 .LLST0
     /tmp/cc9JJ5PT.s:72     .text:0000000000000060 .LVL3
     /tmp/cc9JJ5PT.s:107    .text:000000000000007c .LVL7
     /tmp/cc9JJ5PT.s:111    .text:0000000000000084 .LVL8
     /tmp/cc9JJ5PT.s:1381   .debug_str:000000000000013a .LASF90
     /tmp/cc9JJ5PT.s:1419   .debug_str:000000000000024f .LASF91
     /tmp/cc9JJ5PT.s:15     .text:0000000000000000 .LFB16
     /tmp/cc9JJ5PT.s:52     .text:0000000000000048 .LFE16
     /tmp/cc9JJ5PT.s:31     .text:000000000000001c .LVL0
     /tmp/cc9JJ5PT.s:36     .text:0000000000000028 .LVL1
     /tmp/cc9JJ5PT.s:41     .text:0000000000000038 .LVL2
     /tmp/cc9JJ5PT.s:1513   .debug_str:00000000000005ff .LASF77
     /tmp/cc9JJ5PT.s:1455   .debug_str:000000000000037a .LASF78
     /tmp/cc9JJ5PT.s:1451   .debug_str:0000000000000356 .LASF79
     /tmp/cc9JJ5PT.s:1345   .debug_str:0000000000000036 .LASF81
     /tmp/cc9JJ5PT.s:1469   .debug_str:00000000000003e4 .LASF80
     /tmp/cc9JJ5PT.s:1375   .debug_str:0000000000000109 .LASF82
     /tmp/cc9JJ5PT.s:1417   .debug_str:0000000000000243 .LASF83
     /tmp/cc9JJ5PT.s:86     .text:000000000000006c .LVL5
     /tmp/cc9JJ5PT.s:100    .text:0000000000000074 .LVL6
     /tmp/cc9JJ5PT.s:131    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
__putc
_Z11printStringPKc
_ZN15MemoryAllocator10initialiseEv
_ZN5Riscv14supervisorTrapEv
GAS LISTING /tmp/cc9JJ5PT.s 			page 10


_Z11thread_exitv
