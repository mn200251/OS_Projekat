GAS LISTING /tmp/ccsf89uM.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB16:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** 
   2:src/riscv.cpp **** #include "../h/riscv.hpp"
   3:src/riscv.cpp **** #include "../lib/console.h"
   4:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   5:src/riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   6:src/riscv.cpp **** 
   7:src/riscv.cpp **** #include "../h/print.hpp"
   8:src/riscv.cpp **** 
   9:src/riscv.cpp **** void Riscv::popSppSpie()
  10:src/riscv.cpp **** {
  12              		.loc 1 10 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  11:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 11 5
  21              		.loc 1 11 38 is_stmt 0
  22              	#APP
  23              	# 11 "src/riscv.cpp" 1
  12              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 12 5 is_stmt 1
  27              		.loc 1 12 29 is_stmt 0
  28              	# 12 "src/riscv.cpp" 1
  13              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 13 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE16:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
  44              	.LC0:
  45 0000 44697370 		.string	"Dispatched!\n"
  45      61746368 
GAS LISTING /tmp/ccsf89uM.s 			page 2


  45      6564210A 
  45      00
  46 000d 000000   		.align	3
  47              	.LC1:
  48 0010 0A00     		.string	"\n"
  49 0012 00000000 		.align	3
  49      0000
  50              	.LC2:
  51 0018 73657063 		.string	"sepc = "
  51      203D2000 
  52              		.align	3
  53              	.LC3:
  54 0020 0A556E65 		.string	"\nUnexpected trap cause!\n"
  54      78706563 
  54      74656420 
  54      74726170 
  54      20636175 
  55              		.text
  56              		.align	2
  57              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  59              	_ZN5Riscv20handleSupervisorTrapEv:
  60              	.LFB17:
  14:src/riscv.cpp **** 
  15:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  16:src/riscv.cpp **** {
  61              		.loc 1 16 1 is_stmt 1
  62              		.cfi_startproc
  63 0020 130101F7 		addi	sp,sp,-144
  64              		.cfi_def_cfa_offset 144
  65 0024 23341108 		sd	ra,136(sp)
  66 0028 23308108 		sd	s0,128(sp)
  67              		.cfi_offset 1, -8
  68              		.cfi_offset 8, -16
  69 002c 13040109 		addi	s0,sp,144
  70              		.cfi_def_cfa 8, 0
  17:src/riscv.cpp ****     uint64 a[8];
  71              		.loc 1 17 5
  18:src/riscv.cpp ****     asm volatile("sd a0, %0" : "=m" (a[0]));
  72              		.loc 1 18 5
  73              		.loc 1 18 44 is_stmt 0
  74              	#APP
  75              	# 18 "src/riscv.cpp" 1
  19              	    asm volatile("sd a1, %0" : "=m" (a[1]));
  76              		sd a0, -80(s0)
  77              	# 0 "" 2
  78              		.loc 1 19 5 is_stmt 1
  79              		.loc 1 19 44 is_stmt 0
  80              	# 19 "src/riscv.cpp" 1
  20              	    asm volatile("sd a2, %0" : "=m" (a[2]));
  81              		sd a1, -72(s0)
  82              	# 0 "" 2
  83              		.loc 1 20 5 is_stmt 1
  84              		.loc 1 20 44 is_stmt 0
  85              	# 20 "src/riscv.cpp" 1
  21              	    asm volatile("sd a3, %0" : "=m" (a[3]));
  86              		sd a2, -64(s0)
  87              	# 0 "" 2
GAS LISTING /tmp/ccsf89uM.s 			page 3


  88              		.loc 1 21 5 is_stmt 1
  89              		.loc 1 21 44 is_stmt 0
  90              	# 21 "src/riscv.cpp" 1
  22              	    asm volatile("sd a4, %0" : "=m" (a[4]));
  91              		sd a3, -56(s0)
  92              	# 0 "" 2
  93              		.loc 1 22 5 is_stmt 1
  94              		.loc 1 22 44 is_stmt 0
  95              	# 22 "src/riscv.cpp" 1
  23              	    asm volatile("sd a5, %0" : "=m" (a[5]));
  96              		sd a4, -48(s0)
  97              	# 0 "" 2
  98              		.loc 1 23 5 is_stmt 1
  99              		.loc 1 23 44 is_stmt 0
 100              	# 23 "src/riscv.cpp" 1
  24              	    asm volatile("sd a6, %0" : "=m" (a[6]));
 101              		sd a5, -40(s0)
 102              	# 0 "" 2
 103              		.loc 1 24 5 is_stmt 1
 104              		.loc 1 24 44 is_stmt 0
 105              	# 24 "src/riscv.cpp" 1
  25              	    asm volatile("sd a7, %0" : "=m" (a[7]));
 106              		sd a6, -32(s0)
 107              	# 0 "" 2
 108              		.loc 1 25 5 is_stmt 1
 109              		.loc 1 25 44 is_stmt 0
 110              	# 25 "src/riscv.cpp" 1
  26              	
  27:src/riscv.cpp ****     uint64 volatile sepc = r_sepc();
 111              		sd a7, -24(s0)
 112              	# 0 "" 2
 113              		.loc 1 27 5 is_stmt 1
 114              	#NO_APP
 115              	.LBB26:
 116              	.LBB27:
 117              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** 
   2:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   3:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #include "../lib/hw.h"
   6:src/../h/riscv.hpp **** 
   7:src/../h/riscv.hpp **** class Riscv
   8:src/../h/riscv.hpp **** {
   9:src/../h/riscv.hpp **** public:
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  12:src/../h/riscv.hpp ****     static void popSppSpie();
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // read register scause
  15:src/../h/riscv.hpp ****     static uint64 r_scause();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // write register scause
  18:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // read register sepc
  21:src/../h/riscv.hpp ****     static uint64 r_sepc();
GAS LISTING /tmp/ccsf89uM.s 			page 4


  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // write register sepc
  24:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // read register stvec
  27:src/../h/riscv.hpp ****     static uint64 r_stvec();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // write register stvec
  30:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // read register stval
  33:src/../h/riscv.hpp ****     static uint64 r_stval();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // write register stval
  36:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     enum BitMaskSip
  39:src/../h/riscv.hpp ****     {
  40:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  41:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  42:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  43:src/../h/riscv.hpp ****     };
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // mask set register sip
  46:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask clear register sip
  49:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // read register sip
  52:src/../h/riscv.hpp ****     static uint64 r_sip();
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // write register sip
  55:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     enum BitMaskSstatus
  58:src/../h/riscv.hpp ****     {
  59:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  60:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  61:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  62:src/../h/riscv.hpp ****     };
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // mask set register sstatus
  65:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask clear register sstatus
  68:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // read register sstatus
  71:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // write register sstatus
  74:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // supervisor trap
  77:src/../h/riscv.hpp ****     static void supervisorTrap();
  78:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccsf89uM.s 			page 5


  79:src/../h/riscv.hpp **** private:
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // supervisor trap handler
  82:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp **** };
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  87:src/../h/riscv.hpp **** {
  88:src/../h/riscv.hpp ****     uint64 volatile scause;
  89:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  90:src/../h/riscv.hpp ****     return scause;
  91:src/../h/riscv.hpp **** }
  92:src/../h/riscv.hpp **** 
  93:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  94:src/../h/riscv.hpp **** {
  95:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  96:src/../h/riscv.hpp **** }
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
  99:src/../h/riscv.hpp **** {
 100:src/../h/riscv.hpp ****     uint64 volatile sepc;
 118              		.loc 2 100 5
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 119              		.loc 2 101 5
 120              		.loc 2 101 64 is_stmt 0
 121              	#APP
 122              	# 101 "src/../h/riscv.hpp" 1
 102              	    return sepc;
 123              		csrr a5, sepc
 124              	# 0 "" 2
 125              	#NO_APP
 126 0054 2334F4F8 		sd	a5,-120(s0)
 127              		.loc 2 102 5 is_stmt 1
 128              		.loc 2 102 12 is_stmt 0
 129 0058 833784F8 		ld	a5,-120(s0)
 130              	.LBE27:
 131              	.LBE26:
 132              		.loc 1 27 35
 133 005c 2334F4FA 		sd	a5,-88(s0)
  28:src/riscv.cpp ****     uint64 volatile sstatus = r_sstatus();
 134              		.loc 1 28 5 is_stmt 1
 135              	.LBB28:
 136              	.LBB29:
 103:src/../h/riscv.hpp **** }
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 106:src/../h/riscv.hpp **** {
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 108:src/../h/riscv.hpp **** }
 109:src/../h/riscv.hpp **** 
 110:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 111:src/../h/riscv.hpp **** {
 112:src/../h/riscv.hpp ****     uint64 volatile stvec;
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 114:src/../h/riscv.hpp ****     return stvec;
 115:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccsf89uM.s 			page 6


 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 118:src/../h/riscv.hpp **** {
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 120:src/../h/riscv.hpp **** }
 121:src/../h/riscv.hpp **** 
 122:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 123:src/../h/riscv.hpp **** {
 124:src/../h/riscv.hpp ****     uint64 volatile stval;
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 126:src/../h/riscv.hpp ****     return stval;
 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 130:src/../h/riscv.hpp **** {
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 132:src/../h/riscv.hpp **** }
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 135:src/../h/riscv.hpp **** {
 136:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 137:src/../h/riscv.hpp **** }
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 140:src/../h/riscv.hpp **** {
 141:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 142:src/../h/riscv.hpp **** }
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 145:src/../h/riscv.hpp **** {
 146:src/../h/riscv.hpp ****     uint64 volatile sip;
 147:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 148:src/../h/riscv.hpp ****     return sip;
 149:src/../h/riscv.hpp **** }
 150:src/../h/riscv.hpp **** 
 151:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 152:src/../h/riscv.hpp **** {
 153:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 154:src/../h/riscv.hpp **** }
 155:src/../h/riscv.hpp **** 
 156:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 157:src/../h/riscv.hpp **** {
 158:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 159:src/../h/riscv.hpp **** }
 160:src/../h/riscv.hpp **** 
 161:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 162:src/../h/riscv.hpp **** {
 163:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 164:src/../h/riscv.hpp **** }
 165:src/../h/riscv.hpp **** 
 166:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 167:src/../h/riscv.hpp **** {
 168:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 137              		.loc 2 168 5
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 138              		.loc 2 169 5
 139              		.loc 2 169 76 is_stmt 0
GAS LISTING /tmp/ccsf89uM.s 			page 7


 140              	#APP
 141              	# 169 "src/../h/riscv.hpp" 1
 170              	    return sstatus;
 142              		csrr a5, sstatus
 143              	# 0 "" 2
 144              	#NO_APP
 145 0064 2330F4F8 		sd	a5,-128(s0)
 146              		.loc 2 170 5 is_stmt 1
 147              		.loc 2 170 12 is_stmt 0
 148 0068 833704F8 		ld	a5,-128(s0)
 149              	.LBE29:
 150              	.LBE28:
 151              		.loc 1 28 41
 152 006c 2330F4FA 		sd	a5,-96(s0)
  29:src/riscv.cpp **** 
  30:src/riscv.cpp ****     // retrieve stack pointer relative to saved registers
  31:src/riscv.cpp ****     void* volatile SP;
 153              		.loc 1 31 5 is_stmt 1
  32:src/riscv.cpp ****     asm volatile("csrr %0, sscratch" : "=r" (SP));
 154              		.loc 1 32 5
 155              		.loc 1 32 50 is_stmt 0
 156              	#APP
 157              	# 32 "src/riscv.cpp" 1
  33              	
 158              		csrr a5, sscratch
 159              	# 0 "" 2
 160              	#NO_APP
 161 0074 233CF4F8 		sd	a5,-104(s0)
  34:src/riscv.cpp ****     uint64 volatile scause = r_scause();
 162              		.loc 1 34 5 is_stmt 1
 163              	.LBB30:
 164              	.LBB31:
  88:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 165              		.loc 2 88 5
  89:src/../h/riscv.hpp ****     return scause;
 166              		.loc 2 89 5
  89:src/../h/riscv.hpp ****     return scause;
 167              		.loc 2 89 72 is_stmt 0
 168              	#APP
 169              	# 89 "src/../h/riscv.hpp" 1
 170              		csrr a5, scause
 171              	# 0 "" 2
 172              	#NO_APP
 173 007c 233CF4F6 		sd	a5,-136(s0)
  90:src/../h/riscv.hpp **** }
 174              		.loc 2 90 5 is_stmt 1
  90:src/../h/riscv.hpp **** }
 175              		.loc 2 90 12 is_stmt 0
 176 0080 833784F7 		ld	a5,-136(s0)
 177              	.LBE31:
 178              	.LBE30:
 179              		.loc 1 34 39
 180 0084 2338F4F8 		sd	a5,-112(s0)
  35:src/riscv.cpp **** 
  36:src/riscv.cpp **** //    printString("scause: ");
  37:src/riscv.cpp **** //    printInteger(scause);
  38:src/riscv.cpp **** //    printString("\n");
GAS LISTING /tmp/ccsf89uM.s 			page 8


  39:src/riscv.cpp **** 
  40:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 181              		.loc 1 40 5 is_stmt 1
 182              	.LBB32:
 183              		.loc 1 40 16 is_stmt 0
 184 0088 033704F9 		ld	a4,-112(s0)
 185              		.loc 1 40 40
 186 008c 93078000 		li	a5,8
 187 0090 6308F708 		beq	a4,a5,.L4
 188              		.loc 1 40 50 discriminator 2
 189 0094 033704F9 		ld	a4,-112(s0)
 190              		.loc 1 40 40 discriminator 2
 191 0098 93079000 		li	a5,9
 192 009c 6302F708 		beq	a4,a5,.L4
  41:src/riscv.cpp ****     {
  42:src/riscv.cpp ****         sepc = sepc + 4;
  43:src/riscv.cpp ****         w_sepc(sepc);
  44:src/riscv.cpp **** 
  45:src/riscv.cpp ****         // mem_alloc
  46:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
  47:src/riscv.cpp ****         {
  48:src/riscv.cpp ****             // get the size argument
  49:src/riscv.cpp ****             size_t size = reinterpret_cast<size_t>(a[1]);
  50:src/riscv.cpp **** 
  51:src/riscv.cpp ****             size_t blockNum = MemoryAllocator::convert2Blocks(size);
  52:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(blockNum);
  53:src/riscv.cpp **** 
  54:src/riscv.cpp ****             // retVal should already be in a0 but just in case
  55:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  56:src/riscv.cpp **** 
  57:src/riscv.cpp ****             // put the return value on the stack
  58:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
  59:src/riscv.cpp ****             // asm volatile("sd a0, 0x50(%0)" : : "r" (SP));
  60:src/riscv.cpp ****         }
  61:src/riscv.cpp ****         // mem_free
  62:src/riscv.cpp ****         else if (a[0] == 0x0000000000000002UL)
  63:src/riscv.cpp ****         {
  64:src/riscv.cpp ****             // get the ptr argument
  65:src/riscv.cpp ****             void* ptr = reinterpret_cast<void *>(a[1]);
  66:src/riscv.cpp **** 
  67:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
  68:src/riscv.cpp **** 
  69:src/riscv.cpp ****             // retVal should already be in a0 but just in case
  70:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  71:src/riscv.cpp **** 
  72:src/riscv.cpp ****             // put the return value on the stack
  73:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
  74:src/riscv.cpp ****             // asm volatile("sd a0, 0x50(%0)" : : "r" (SP));
  75:src/riscv.cpp ****         }
  76:src/riscv.cpp ****         // thread_create
  77:src/riscv.cpp ****         else if (a[0] == 0x0000000000000011UL)
  78:src/riscv.cpp ****         {
  79:src/riscv.cpp ****             thread_t* handle = reinterpret_cast<thread_t *>(a[1]);
  80:src/riscv.cpp ****             void(*start_routine)(void*) = reinterpret_cast<void (*)(void *)>(a[2]);
  81:src/riscv.cpp ****             void* arg = reinterpret_cast<void *>(a[3]);
  82:src/riscv.cpp ****             void* stack_space = reinterpret_cast<void *>(a[4]);
  83:src/riscv.cpp **** 
GAS LISTING /tmp/ccsf89uM.s 			page 9


  84:src/riscv.cpp ****             int retVal = _thread::threadCreate(handle, start_routine, arg, stack_space);
  85:src/riscv.cpp **** 
  86:src/riscv.cpp ****             // retVal should already be in a0 but just in case
  87:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  88:src/riscv.cpp **** 
  89:src/riscv.cpp ****             // put the return value on the stack
  90:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
  91:src/riscv.cpp ****         }
  92:src/riscv.cpp ****         // thread_exit
  93:src/riscv.cpp ****         else if (a[0] == 0x0000000000000012UL)
  94:src/riscv.cpp ****         {
  95:src/riscv.cpp ****             _thread::running->finished = true;
  96:src/riscv.cpp **** 
  97:src/riscv.cpp ****             _thread::threadDispatch();
  98:src/riscv.cpp **** 
  99:src/riscv.cpp ****             int retVal;
 100:src/riscv.cpp **** 
 101:src/riscv.cpp ****             // return error code if thread didn't exit
 102:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 103:src/riscv.cpp ****         }
 104:src/riscv.cpp ****         // thread_dispatch
 105:src/riscv.cpp ****         else if (a[0] == 0x0000000000000013UL)
 106:src/riscv.cpp ****         {
 107:src/riscv.cpp ****             // sepc and sstatus already saved
 108:src/riscv.cpp ****             // seps already added +4
 109:src/riscv.cpp **** 
 110:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 111:src/riscv.cpp **** 
 112:src/riscv.cpp ****             _thread::threadDispatch();
 113:src/riscv.cpp **** 
 114:src/riscv.cpp ****             printString("Dispatched!\n");
 115:src/riscv.cpp **** 
 116:src/riscv.cpp ****             w_sstatus(sstatus);
 117:src/riscv.cpp ****             w_sepc(sepc);
 118:src/riscv.cpp **** 
 119:src/riscv.cpp ****             // nothing to return
 120:src/riscv.cpp ****         }
 121:src/riscv.cpp ****         else
 122:src/riscv.cpp ****         {
 123:src/riscv.cpp **** 
 124:src/riscv.cpp ****         }
 125:src/riscv.cpp ****     }
 126:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 193              		.loc 1 126 10 is_stmt 1
 194              		.loc 1 126 21 is_stmt 0
 195 00a0 033704F9 		ld	a4,-112(s0)
 196              		.loc 1 126 10
 197 00a4 9307F0FF 		li	a5,-1
 198 00a8 9397F703 		slli	a5,a5,63
 199 00ac 93871700 		addi	a5,a5,1
 200 00b0 630CF716 		beq	a4,a5,.L15
 127:src/riscv.cpp ****     {
 128:src/riscv.cpp **** //        // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interr
 129:src/riscv.cpp ****           mc_sip(SIP_SSIP);
 130:src/riscv.cpp **** //        _thread::running->timeSlice++;
 131:src/riscv.cpp **** //        if (_thread::running->timeSlice >= DEFAULT_TIME_SLICE)
 132:src/riscv.cpp **** //        {
GAS LISTING /tmp/ccsf89uM.s 			page 10


 133:src/riscv.cpp **** //            // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
 134:src/riscv.cpp **** //            sepc = sepc + 4;
 135:src/riscv.cpp **** //
 136:src/riscv.cpp **** //            _thread::running->timeSlice = 0;
 137:src/riscv.cpp **** //            _thread::threadDispatch();
 138:src/riscv.cpp **** //            w_sstatus(sstatus);
 139:src/riscv.cpp **** //            w_sepc(sepc);
 140:src/riscv.cpp **** //        }
 141:src/riscv.cpp ****     }
 142:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 201              		.loc 1 142 10 is_stmt 1
 202              		.loc 1 142 21 is_stmt 0
 203 00b4 033704F9 		ld	a4,-112(s0)
 204              		.loc 1 142 10
 205 00b8 9307F0FF 		li	a5,-1
 206 00bc 9397F703 		slli	a5,a5,63
 207 00c0 93879700 		addi	a5,a5,9
 208 00c4 6308F716 		beq	a4,a5,.L16
 143:src/riscv.cpp ****     {
 144:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 145:src/riscv.cpp ****         // printString("Keyboard interrupt!\n");
 146:src/riscv.cpp ****         console_handler();
 147:src/riscv.cpp **** 
 148:src/riscv.cpp ****     }
 149:src/riscv.cpp ****     else
 150:src/riscv.cpp ****     {
 151:src/riscv.cpp ****         printInteger(scause);
 209              		.loc 1 151 9 is_stmt 1
 210              		.loc 1 151 21 is_stmt 0
 211 00c8 033504F9 		ld	a0,-112(s0)
 212 00cc 97000000 		call	_Z12printIntegerm@plt
 212      E7800000 
 213              	.LVL0:
 152:src/riscv.cpp ****         printString("\n");
 214              		.loc 1 152 9 is_stmt 1
 215              		.loc 1 152 20 is_stmt 0
 216 00d4 17050000 		lla	a0,.LC1
 216      13050500 
 217 00dc 97000000 		call	_Z11printStringPKc@plt
 217      E7800000 
 218              	.LVL1:
 153:src/riscv.cpp ****         printString("sepc = ");
 219              		.loc 1 153 9 is_stmt 1
 220              		.loc 1 153 20 is_stmt 0
 221 00e4 17050000 		lla	a0,.LC2
 221      13050500 
 222 00ec 97000000 		call	_Z11printStringPKc@plt
 222      E7800000 
 223              	.LVL2:
 154:src/riscv.cpp ****         printInteger(sepc);
 224              		.loc 1 154 9 is_stmt 1
 225              		.loc 1 154 21 is_stmt 0
 226 00f4 033584FA 		ld	a0,-88(s0)
 227 00f8 97000000 		call	_Z12printIntegerm@plt
 227      E7800000 
 228              	.LVL3:
 155:src/riscv.cpp ****         printString("\nUnexpected trap cause!\n");
GAS LISTING /tmp/ccsf89uM.s 			page 11


 229              		.loc 1 155 9 is_stmt 1
 230              		.loc 1 155 20 is_stmt 0
 231 0100 17050000 		lla	a0,.LC3
 231      13050500 
 232 0108 97000000 		call	_Z11printStringPKc@plt
 232      E7800000 
 233              	.LVL4:
 234              	.L3:
 235              	.LBE32:
 156:src/riscv.cpp ****         // unexpected trap cause
 157:src/riscv.cpp ****     }
 158:src/riscv.cpp **** }...
 236              		.loc 1 158 1
 237 0110 83308108 		ld	ra,136(sp)
 238              		.cfi_remember_state
 239              		.cfi_restore 1
 240 0114 03340108 		ld	s0,128(sp)
 241              		.cfi_restore 8
 242              		.cfi_def_cfa 2, 144
 243 0118 13010109 		addi	sp,sp,144
 244              		.cfi_def_cfa_offset 0
 245 011c 67800000 		jr	ra
 246              	.L4:
 247              		.cfi_restore_state
 248              	.LBB62:
 249              	.LBB33:
  42:src/riscv.cpp ****         sepc = sepc + 4;
 250              		.loc 1 42 9 is_stmt 1
  42:src/riscv.cpp ****         sepc = sepc + 4;
 251              		.loc 1 42 16 is_stmt 0
 252 0120 833784FA 		ld	a5,-88(s0)
  42:src/riscv.cpp ****         sepc = sepc + 4;
 253              		.loc 1 42 21
 254 0124 93874700 		addi	a5,a5,4
  42:src/riscv.cpp ****         sepc = sepc + 4;
 255              		.loc 1 42 14
 256 0128 2334F4FA 		sd	a5,-88(s0)
  43:src/riscv.cpp ****         w_sepc(sepc);
 257              		.loc 1 43 9 is_stmt 1
  43:src/riscv.cpp ****         w_sepc(sepc);
 258              		.loc 1 43 15 is_stmt 0
 259 012c 833784FA 		ld	a5,-88(s0)
 260              	.LVL5:
 261              	.LBB34:
 262              	.LBB35:
 107:src/../h/riscv.hpp **** }
 263              		.loc 2 107 5 is_stmt 1
 107:src/../h/riscv.hpp **** }
 264              		.loc 2 107 65 is_stmt 0
 265              	#APP
 266              	# 107 "src/../h/riscv.hpp" 1
 267              		csrw sepc, a5
 268              	# 0 "" 2
 269              	.LVL6:
 270              	#NO_APP
 271              	.LBE35:
 272              	.LBE34:
GAS LISTING /tmp/ccsf89uM.s 			page 12


  46:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 273              		.loc 1 46 9 is_stmt 1
 274              	.LBB36:
  46:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 275              		.loc 1 46 16 is_stmt 0
 276 0134 833704FB 		ld	a5,-80(s0)
  46:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 277              		.loc 1 46 9
 278 0138 13071000 		li	a4,1
 279 013c 6380E706 		beq	a5,a4,.L17
 280              	.LBE36:
 281              	.LBE33:
 282              	.LBE62:
  62:src/riscv.cpp ****         else if (a[0] == 0x0000000000000002UL)
 283              		.loc 1 62 14 is_stmt 1
 284              	.LBB63:
 285              	.LBB57:
 286              	.LBB54:
 287              	.LBB37:
 288 0140 13072000 		li	a4,2
 289 0144 638EE706 		beq	a5,a4,.L18
 290              	.LBE37:
 291              	.LBE54:
 292              	.LBE57:
 293              	.LBE63:
  77:src/riscv.cpp ****         else if (a[0] == 0x0000000000000011UL)
 294              		.loc 1 77 14
 295              	.LBB64:
 296              	.LBB58:
 297              	.LBB55:
 298              	.LBB50:
 299              	.LBB38:
 300 0148 13071001 		li	a4,17
 301 014c 6388E708 		beq	a5,a4,.L19
 302              	.LBE38:
 303              	.LBE50:
 304              	.LBE55:
 305              	.LBE58:
 306              	.LBE64:
  93:src/riscv.cpp ****         else if (a[0] == 0x0000000000000012UL)
 307              		.loc 1 93 14
 308              	.LBB65:
 309              	.LBB59:
 310              	.LBB56:
 311              	.LBB51:
 312              	.LBB47:
 313              	.LBB39:
 314 0150 13072001 		li	a4,18
 315 0154 6388E70A 		beq	a5,a4,.L20
 105:src/riscv.cpp ****         else if (a[0] == 0x0000000000000013UL)
 316              		.loc 1 105 14
 317 0158 13073001 		li	a4,19
 318 015c E39AE7FA 		bne	a5,a4,.L3
 110:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 319              		.loc 1 110 13
 110:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 320              		.loc 1 110 31 is_stmt 0
GAS LISTING /tmp/ccsf89uM.s 			page 13


 321 0160 97070000 		la	a5,_ZN7_thread7runningE
 321      83B70700 
 322 0168 83B70700 		ld	a5,0(a5)
 110:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 323              		.loc 1 110 41
 324 016c 23B80702 		sd	zero,48(a5)
 112:src/riscv.cpp ****             _thread::threadDispatch();
 325              		.loc 1 112 13 is_stmt 1
 112:src/riscv.cpp ****             _thread::threadDispatch();
 326              		.loc 1 112 36 is_stmt 0
 327 0170 97000000 		call	_ZN7_thread14threadDispatchEv@plt
 327      E7800000 
 328              	.LVL7:
 114:src/riscv.cpp ****             printString("Dispatched!\n");
 329              		.loc 1 114 13 is_stmt 1
 114:src/riscv.cpp ****             printString("Dispatched!\n");
 330              		.loc 1 114 24 is_stmt 0
 331 0178 17050000 		lla	a0,.LC0
 331      13050500 
 332 0180 97000000 		call	_Z11printStringPKc@plt
 332      E7800000 
 333              	.LVL8:
 116:src/riscv.cpp ****             w_sstatus(sstatus);
 334              		.loc 1 116 13 is_stmt 1
 116:src/riscv.cpp ****             w_sstatus(sstatus);
 335              		.loc 1 116 22 is_stmt 0
 336 0188 833704FA 		ld	a5,-96(s0)
 337              	.LVL9:
 338              	.LBB40:
 339              	.LBB41:
 171:src/../h/riscv.hpp **** }
 172:src/../h/riscv.hpp **** 
 173:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 174:src/../h/riscv.hpp **** {
 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 340              		.loc 2 175 5 is_stmt 1
 341              		.loc 2 175 77 is_stmt 0
 342              	#APP
 343              	# 175 "src/../h/riscv.hpp" 1
 176              	}
 344              		csrw sstatus, a5
 345              	# 0 "" 2
 346              	.LVL10:
 347              	#NO_APP
 348              	.LBE41:
 349              	.LBE40:
 117:src/riscv.cpp ****             w_sepc(sepc);
 350              		.loc 1 117 13 is_stmt 1
 117:src/riscv.cpp ****             w_sepc(sepc);
 351              		.loc 1 117 19 is_stmt 0
 352 0190 833784FA 		ld	a5,-88(s0)
 353              	.LVL11:
 354              	.LBB42:
 355              	.LBB43:
 107:src/../h/riscv.hpp **** }
 356              		.loc 2 107 5 is_stmt 1
 107:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccsf89uM.s 			page 14


 357              		.loc 2 107 65 is_stmt 0
 358              	#APP
 359              	# 107 "src/../h/riscv.hpp" 1
 108:src/../h/riscv.hpp **** 
 360              		csrw sepc, a5
 361              	# 0 "" 2
 362              		.loc 2 108 1
 363              	#NO_APP
 364 0198 6FF09FF7 		j	.L3
 365              	.LVL12:
 366              	.L17:
 367              	.LBE43:
 368              	.LBE42:
 369              	.LBE39:
 370              	.LBE47:
 371              	.LBE51:
 372              	.LBB52:
  49:src/riscv.cpp ****             size_t size = reinterpret_cast<size_t>(a[1]);
 373              		.loc 1 49 13 is_stmt 1
  51:src/riscv.cpp ****             size_t blockNum = MemoryAllocator::convert2Blocks(size);
 374              		.loc 1 51 13
  51:src/riscv.cpp ****             size_t blockNum = MemoryAllocator::convert2Blocks(size);
 375              		.loc 1 51 62 is_stmt 0
 376 019c 033584FB 		ld	a0,-72(s0)
 377 01a0 97000000 		call	_ZN15MemoryAllocator14convert2BlocksEm@plt
 377      E7800000 
 378              	.LVL13:
  52:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(blockNum);
 379              		.loc 1 52 13 is_stmt 1
  52:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(blockNum);
 380              		.loc 1 52 54 is_stmt 0
 381 01a8 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 381      E7800000 
 382              	.LVL14:
  55:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 383              		.loc 1 55 13 is_stmt 1
  55:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 384              		.loc 1 55 54 is_stmt 0
 385              	#APP
 386              	# 55 "src/riscv.cpp" 1
 387              		mv a5, a0
 388              	# 0 "" 2
 389              	.LVL15:
  58:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 390              		.loc 1 58 13 is_stmt 1
  58:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 391              		.loc 1 58 55 is_stmt 0
 392              	#NO_APP
 393 01b4 833784F9 		ld	a5,-104(s0)
  58:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 394              		.loc 1 58 59
 395              	#APP
 396              	# 58 "src/riscv.cpp" 1
 397              		sd a0, 10 * 8(a5)
 398              	# 0 "" 2
 399              	#NO_APP
 400              	.LBE52:
GAS LISTING /tmp/ccsf89uM.s 			page 15


 401 01bc 6FF05FF5 		j	.L3
 402              	.L18:
 403              	.LBB53:
 404              	.LBB48:
  65:src/riscv.cpp ****             void* ptr = reinterpret_cast<void *>(a[1]);
 405              		.loc 1 65 13 is_stmt 1
 406              	.LVL16:
  67:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
 407              		.loc 1 67 13
  67:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
 408              		.loc 1 67 51 is_stmt 0
 409 01c0 033584FB 		ld	a0,-72(s0)
 410 01c4 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 410      E7800000 
 411              	.LVL17:
  70:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 412              		.loc 1 70 13 is_stmt 1
  70:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 413              		.loc 1 70 54 is_stmt 0
 414              	#APP
 415              	# 70 "src/riscv.cpp" 1
 416              		mv a5, a0
 417              	# 0 "" 2
 418              	.LVL18:
  73:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 419              		.loc 1 73 13 is_stmt 1
  73:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 420              		.loc 1 73 55 is_stmt 0
 421              	#NO_APP
 422 01d0 833784F9 		ld	a5,-104(s0)
  73:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 423              		.loc 1 73 59
 424              	#APP
 425              	# 73 "src/riscv.cpp" 1
 426              		sd a0, 10 * 8(a5)
 427              	# 0 "" 2
 428              	#NO_APP
 429              	.LBE48:
 430 01d8 6FF09FF3 		j	.L3
 431              	.L19:
 432              	.LBB49:
 433              	.LBB45:
  79:src/riscv.cpp ****             thread_t* handle = reinterpret_cast<thread_t *>(a[1]);
 434              		.loc 1 79 13 is_stmt 1
 435              	.LVL19:
  80:src/riscv.cpp ****             void(*start_routine)(void*) = reinterpret_cast<void (*)(void *)>(a[2]);
 436              		.loc 1 80 13
  81:src/riscv.cpp ****             void* arg = reinterpret_cast<void *>(a[3]);
 437              		.loc 1 81 13
  82:src/riscv.cpp ****             void* stack_space = reinterpret_cast<void *>(a[4]);
 438              		.loc 1 82 13
  84:src/riscv.cpp ****             int retVal = _thread::threadCreate(handle, start_routine, arg, stack_space);
 439              		.loc 1 84 13
  84:src/riscv.cpp ****             int retVal = _thread::threadCreate(handle, start_routine, arg, stack_space);
 440              		.loc 1 84 47 is_stmt 0
 441 01dc 833604FD 		ld	a3,-48(s0)
 442 01e0 033684FC 		ld	a2,-56(s0)
GAS LISTING /tmp/ccsf89uM.s 			page 16


 443 01e4 833504FC 		ld	a1,-64(s0)
 444 01e8 033584FB 		ld	a0,-72(s0)
 445 01ec 97000000 		call	_ZN7_thread12threadCreateEPPS_PFvPvES2_S2_@plt
 445      E7800000 
 446              	.LVL20:
  87:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 447              		.loc 1 87 13 is_stmt 1
  87:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 448              		.loc 1 87 54 is_stmt 0
 449              	#APP
 450              	# 87 "src/riscv.cpp" 1
 451              		mv a5, a0
 452              	# 0 "" 2
 453              	.LVL21:
  90:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 454              		.loc 1 90 13 is_stmt 1
  90:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 455              		.loc 1 90 55 is_stmt 0
 456              	#NO_APP
 457 01f8 833784F9 		ld	a5,-104(s0)
  90:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 458              		.loc 1 90 59
 459              	#APP
 460              	# 90 "src/riscv.cpp" 1
 461              		sd a0, 10 * 8(a5)
 462              	# 0 "" 2
 463              	#NO_APP
 464              	.LBE45:
 465 0200 6FF01FF1 		j	.L3
 466              	.L20:
 467              	.LBB46:
 468              	.LBB44:
  95:src/riscv.cpp ****             _thread::running->finished = true;
 469              		.loc 1 95 13 is_stmt 1
  95:src/riscv.cpp ****             _thread::running->finished = true;
 470              		.loc 1 95 31 is_stmt 0
 471 0204 97070000 		la	a5,_ZN7_thread7runningE
 471      83B70700 
 472 020c 83B70700 		ld	a5,0(a5)
  95:src/riscv.cpp ****             _thread::running->finished = true;
 473              		.loc 1 95 40
 474 0210 13071000 		li	a4,1
 475 0214 2384E700 		sb	a4,8(a5)
  97:src/riscv.cpp ****             _thread::threadDispatch();
 476              		.loc 1 97 13 is_stmt 1
  97:src/riscv.cpp ****             _thread::threadDispatch();
 477              		.loc 1 97 36 is_stmt 0
 478 0218 97000000 		call	_ZN7_thread14threadDispatchEv@plt
 478      E7800000 
 479              	.LVL22:
  99:src/riscv.cpp ****             int retVal;
 480              		.loc 1 99 13 is_stmt 1
 102:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 481              		.loc 1 102 13
 102:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 482              		.loc 1 102 54 is_stmt 0
 483              	#APP
GAS LISTING /tmp/ccsf89uM.s 			page 17


 484              	# 102 "src/riscv.cpp" 1
 485              		mv a5, a0
 486              	# 0 "" 2
 487              	.LVL23:
 488              	#NO_APP
 489              	.LBE44:
 490 0224 6FF0DFEE 		j	.L3
 491              	.L15:
 492              	.LBE46:
 493              	.LBE49:
 494              	.LBE53:
 495              	.LBE56:
 496              	.LBE59:
 129:src/riscv.cpp ****           mc_sip(SIP_SSIP);
 497              		.loc 1 129 11 is_stmt 1
 498              	.LVL24:
 499              	.LBB60:
 500              	.LBB61:
 141:src/../h/riscv.hpp **** }
 501              		.loc 2 141 5
 141:src/../h/riscv.hpp **** }
 502              		.loc 2 141 64 is_stmt 0
 503 0228 93072000 		li	a5,2
 504              	#APP
 505              	# 141 "src/../h/riscv.hpp" 1
 142:src/../h/riscv.hpp **** 
 506              		csrc sip, a5
 507              	# 0 "" 2
 508              		.loc 2 142 1
 509              	#NO_APP
 510 0230 6FF01FEE 		j	.L3
 511              	.LVL25:
 512              	.L16:
 513              	.LBE61:
 514              	.LBE60:
 146:src/riscv.cpp ****         console_handler();
 515              		.loc 1 146 9 is_stmt 1
 146:src/riscv.cpp ****         console_handler();
 516              		.loc 1 146 24 is_stmt 0
 517 0234 97000000 		call	console_handler@plt
 517      E7800000 
 518              	.LVL26:
 519 023c 6FF05FED 		j	.L3
 520              	.LBE65:
 521              		.cfi_endproc
 522              	.LFE17:
 524              	.Letext0:
 525              		.file 3 "src/../h/../lib/hw.h"
 526              		.file 4 "src/../h/../h/thread.hpp"
 527              		.file 5 "src/../h/MemoryAllocator.hpp"
 528              		.file 6 "src/../h/print.hpp"
 529              		.file 7 "src/../lib/console.h"
GAS LISTING /tmp/ccsf89uM.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccsf89uM.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccsf89uM.s:13     .text:0000000000000000 .L0 
     /tmp/ccsf89uM.s:14     .text:0000000000000000 .L0 
     /tmp/ccsf89uM.s:15     .text:0000000000000004 .L0 
     /tmp/ccsf89uM.s:17     .text:0000000000000008 .L0 
     /tmp/ccsf89uM.s:19     .text:000000000000000c .L0 
     /tmp/ccsf89uM.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:11     .text:000000000000000c .L0 
     /tmp/ccsf89uM.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:12     .text:0000000000000010 .L0 
     /tmp/ccsf89uM.s:33     .text:0000000000000014 .L0 
     /tmp/ccsf89uM.s:34     .text:0000000000000018 .L0 
     /tmp/ccsf89uM.s:35     .text:0000000000000018 .L0 
     /tmp/ccsf89uM.s:37     .text:000000000000001c .L0 
     /tmp/ccsf89uM.s:39     .text:0000000000000020 .L0 
     /tmp/ccsf89uM.s:59     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccsf89uM.s:62     .text:0000000000000020 .L0 
     /tmp/ccsf89uM.s:63     .text:0000000000000020 .L0 
     /tmp/ccsf89uM.s:64     .text:0000000000000024 .L0 
     /tmp/ccsf89uM.s:67     .text:000000000000002c .L0 
     /tmp/ccsf89uM.s:68     .text:000000000000002c .L0 
     /tmp/ccsf89uM.s:70     .text:0000000000000030 .L0 
     /tmp/ccsf89uM.s:72     .text:0000000000000030 .L0 
     /tmp/ccsf89uM.s:73     .text:0000000000000030 .L0 
       src/riscv.cpp:18     .text:0000000000000030 .L0 
     /tmp/ccsf89uM.s:79     .text:0000000000000034 .L0 
       src/riscv.cpp:19     .text:0000000000000034 .L0 
     /tmp/ccsf89uM.s:84     .text:0000000000000038 .L0 
       src/riscv.cpp:20     .text:0000000000000038 .L0 
     /tmp/ccsf89uM.s:89     .text:000000000000003c .L0 
       src/riscv.cpp:21     .text:000000000000003c .L0 
     /tmp/ccsf89uM.s:94     .text:0000000000000040 .L0 
       src/riscv.cpp:22     .text:0000000000000040 .L0 
     /tmp/ccsf89uM.s:99     .text:0000000000000044 .L0 
       src/riscv.cpp:23     .text:0000000000000044 .L0 
     /tmp/ccsf89uM.s:104    .text:0000000000000048 .L0 
       src/riscv.cpp:24     .text:0000000000000048 .L0 
     /tmp/ccsf89uM.s:109    .text:000000000000004c .L0 
       src/riscv.cpp:25     .text:000000000000004c .L0 
     /tmp/ccsf89uM.s:118    .text:0000000000000050 .L0 
     /tmp/ccsf89uM.s:119    .text:0000000000000050 .L0 
     /tmp/ccsf89uM.s:120    .text:0000000000000050 .L0 
  src/../h/riscv.hpp:101    .text:0000000000000050 .L0 
     /tmp/ccsf89uM.s:128    .text:0000000000000058 .L0 
     /tmp/ccsf89uM.s:129    .text:0000000000000058 .L0 
     /tmp/ccsf89uM.s:133    .text:000000000000005c .L0 
     /tmp/ccsf89uM.s:137    .text:0000000000000060 .L0 
     /tmp/ccsf89uM.s:138    .text:0000000000000060 .L0 
     /tmp/ccsf89uM.s:139    .text:0000000000000060 .L0 
  src/../h/riscv.hpp:169    .text:0000000000000060 .L0 
     /tmp/ccsf89uM.s:147    .text:0000000000000068 .L0 
     /tmp/ccsf89uM.s:148    .text:0000000000000068 .L0 
     /tmp/ccsf89uM.s:152    .text:000000000000006c .L0 
     /tmp/ccsf89uM.s:154    .text:0000000000000070 .L0 
     /tmp/ccsf89uM.s:155    .text:0000000000000070 .L0 
GAS LISTING /tmp/ccsf89uM.s 			page 19


       src/riscv.cpp:32     .text:0000000000000070 .L0 
     /tmp/ccsf89uM.s:165    .text:0000000000000078 .L0 
     /tmp/ccsf89uM.s:166    .text:0000000000000078 .L0 
     /tmp/ccsf89uM.s:167    .text:0000000000000078 .L0 
  src/../h/riscv.hpp:89     .text:0000000000000078 .L0 
     /tmp/ccsf89uM.s:175    .text:0000000000000080 .L0 
     /tmp/ccsf89uM.s:176    .text:0000000000000080 .L0 
     /tmp/ccsf89uM.s:180    .text:0000000000000084 .L0 
     /tmp/ccsf89uM.s:183    .text:0000000000000088 .L0 
     /tmp/ccsf89uM.s:184    .text:0000000000000088 .L0 
     /tmp/ccsf89uM.s:186    .text:000000000000008c .L0 
     /tmp/ccsf89uM.s:189    .text:0000000000000094 .L0 
     /tmp/ccsf89uM.s:191    .text:0000000000000098 .L0 
     /tmp/ccsf89uM.s:194    .text:00000000000000a0 .L0 
     /tmp/ccsf89uM.s:195    .text:00000000000000a0 .L0 
     /tmp/ccsf89uM.s:197    .text:00000000000000a4 .L0 
     /tmp/ccsf89uM.s:202    .text:00000000000000b4 .L0 
     /tmp/ccsf89uM.s:203    .text:00000000000000b4 .L0 
     /tmp/ccsf89uM.s:205    .text:00000000000000b8 .L0 
     /tmp/ccsf89uM.s:210    .text:00000000000000c8 .L0 
     /tmp/ccsf89uM.s:211    .text:00000000000000c8 .L0 
     /tmp/ccsf89uM.s:215    .text:00000000000000d4 .L0 
     /tmp/ccsf89uM.s:216    .text:00000000000000d4 .L0 
     /tmp/ccsf89uM.s:220    .text:00000000000000e4 .L0 
     /tmp/ccsf89uM.s:221    .text:00000000000000e4 .L0 
     /tmp/ccsf89uM.s:225    .text:00000000000000f4 .L0 
     /tmp/ccsf89uM.s:226    .text:00000000000000f4 .L0 
     /tmp/ccsf89uM.s:230    .text:0000000000000100 .L0 
     /tmp/ccsf89uM.s:231    .text:0000000000000100 .L0 
     /tmp/ccsf89uM.s:237    .text:0000000000000110 .L0 
     /tmp/ccsf89uM.s:238    .text:0000000000000114 .L0 
     /tmp/ccsf89uM.s:239    .text:0000000000000114 .L0 
     /tmp/ccsf89uM.s:241    .text:0000000000000118 .L0 
     /tmp/ccsf89uM.s:242    .text:0000000000000118 .L0 
     /tmp/ccsf89uM.s:244    .text:000000000000011c .L0 
     /tmp/ccsf89uM.s:247    .text:0000000000000120 .L0 
     /tmp/ccsf89uM.s:251    .text:0000000000000120 .L0 
     /tmp/ccsf89uM.s:252    .text:0000000000000120 .L0 
     /tmp/ccsf89uM.s:254    .text:0000000000000124 .L0 
     /tmp/ccsf89uM.s:256    .text:0000000000000128 .L0 
     /tmp/ccsf89uM.s:258    .text:000000000000012c .L0 
     /tmp/ccsf89uM.s:259    .text:000000000000012c .L0 
     /tmp/ccsf89uM.s:264    .text:0000000000000130 .L0 
  src/../h/riscv.hpp:107    .text:0000000000000130 .L0 
     /tmp/ccsf89uM.s:275    .text:0000000000000134 .L0 
     /tmp/ccsf89uM.s:276    .text:0000000000000134 .L0 
     /tmp/ccsf89uM.s:278    .text:0000000000000138 .L0 
     /tmp/ccsf89uM.s:288    .text:0000000000000140 .L0 
     /tmp/ccsf89uM.s:300    .text:0000000000000148 .L0 
     /tmp/ccsf89uM.s:314    .text:0000000000000150 .L0 
     /tmp/ccsf89uM.s:317    .text:0000000000000158 .L0 
     /tmp/ccsf89uM.s:320    .text:0000000000000160 .L0 
     /tmp/ccsf89uM.s:321    .text:0000000000000160 .L0 
     /tmp/ccsf89uM.s:324    .text:000000000000016c .L0 
     /tmp/ccsf89uM.s:326    .text:0000000000000170 .L0 
     /tmp/ccsf89uM.s:327    .text:0000000000000170 .L0 
     /tmp/ccsf89uM.s:330    .text:0000000000000178 .L0 
GAS LISTING /tmp/ccsf89uM.s 			page 20


     /tmp/ccsf89uM.s:331    .text:0000000000000178 .L0 
     /tmp/ccsf89uM.s:335    .text:0000000000000188 .L0 
     /tmp/ccsf89uM.s:336    .text:0000000000000188 .L0 
     /tmp/ccsf89uM.s:341    .text:000000000000018c .L0 
  src/../h/riscv.hpp:175    .text:000000000000018c .L0 
     /tmp/ccsf89uM.s:351    .text:0000000000000190 .L0 
     /tmp/ccsf89uM.s:352    .text:0000000000000190 .L0 
     /tmp/ccsf89uM.s:357    .text:0000000000000194 .L0 
  src/../h/riscv.hpp:107    .text:0000000000000194 .L0 
     /tmp/ccsf89uM.s:364    .text:0000000000000198 .L0 
     /tmp/ccsf89uM.s:374    .text:000000000000019c .L0 
     /tmp/ccsf89uM.s:375    .text:000000000000019c .L0 
     /tmp/ccsf89uM.s:376    .text:000000000000019c .L0 
     /tmp/ccsf89uM.s:380    .text:00000000000001a8 .L0 
     /tmp/ccsf89uM.s:381    .text:00000000000001a8 .L0 
     /tmp/ccsf89uM.s:384    .text:00000000000001b0 .L0 
       src/riscv.cpp:55     .text:00000000000001b0 .L0 
     /tmp/ccsf89uM.s:391    .text:00000000000001b4 .L0 
     /tmp/ccsf89uM.s:393    .text:00000000000001b4 .L0 
       src/riscv.cpp:58     .text:00000000000001b8 .L0 
     /tmp/ccsf89uM.s:407    .text:00000000000001c0 .L0 
     /tmp/ccsf89uM.s:408    .text:00000000000001c0 .L0 
     /tmp/ccsf89uM.s:409    .text:00000000000001c0 .L0 
     /tmp/ccsf89uM.s:413    .text:00000000000001cc .L0 
       src/riscv.cpp:70     .text:00000000000001cc .L0 
     /tmp/ccsf89uM.s:420    .text:00000000000001d0 .L0 
     /tmp/ccsf89uM.s:422    .text:00000000000001d0 .L0 
       src/riscv.cpp:73     .text:00000000000001d4 .L0 
     /tmp/ccsf89uM.s:436    .text:00000000000001dc .L0 
     /tmp/ccsf89uM.s:437    .text:00000000000001dc .L0 
     /tmp/ccsf89uM.s:438    .text:00000000000001dc .L0 
     /tmp/ccsf89uM.s:439    .text:00000000000001dc .L0 
     /tmp/ccsf89uM.s:440    .text:00000000000001dc .L0 
     /tmp/ccsf89uM.s:441    .text:00000000000001dc .L0 
     /tmp/ccsf89uM.s:448    .text:00000000000001f4 .L0 
       src/riscv.cpp:87     .text:00000000000001f4 .L0 
     /tmp/ccsf89uM.s:455    .text:00000000000001f8 .L0 
     /tmp/ccsf89uM.s:457    .text:00000000000001f8 .L0 
       src/riscv.cpp:90     .text:00000000000001fc .L0 
     /tmp/ccsf89uM.s:470    .text:0000000000000204 .L0 
     /tmp/ccsf89uM.s:471    .text:0000000000000204 .L0 
     /tmp/ccsf89uM.s:474    .text:0000000000000210 .L0 
     /tmp/ccsf89uM.s:477    .text:0000000000000218 .L0 
     /tmp/ccsf89uM.s:478    .text:0000000000000218 .L0 
     /tmp/ccsf89uM.s:481    .text:0000000000000220 .L0 
     /tmp/ccsf89uM.s:482    .text:0000000000000220 .L0 
       src/riscv.cpp:102    .text:0000000000000220 .L0 
     /tmp/ccsf89uM.s:501    .text:0000000000000228 .L0 
     /tmp/ccsf89uM.s:502    .text:0000000000000228 .L0 
     /tmp/ccsf89uM.s:503    .text:0000000000000228 .L0 
     /tmp/ccsf89uM.s:510    .text:0000000000000230 .L0 
     /tmp/ccsf89uM.s:516    .text:0000000000000234 .L0 
     /tmp/ccsf89uM.s:517    .text:0000000000000234 .L0 
     /tmp/ccsf89uM.s:521    .text:0000000000000240 .L0 
     /tmp/ccsf89uM.s:530    .text:0000000000000240 .L0 
     /tmp/ccsf89uM.s:47     .rodata.str1.8:0000000000000010 .LC1
     /tmp/ccsf89uM.s:216    .text:00000000000000d4 .L0 
GAS LISTING /tmp/ccsf89uM.s 			page 21


     /tmp/ccsf89uM.s:50     .rodata.str1.8:0000000000000018 .LC2
     /tmp/ccsf89uM.s:221    .text:00000000000000e4 .L0 
     /tmp/ccsf89uM.s:53     .rodata.str1.8:0000000000000020 .LC3
     /tmp/ccsf89uM.s:231    .text:0000000000000100 .L0 
     /tmp/ccsf89uM.s:321    .text:0000000000000160 .L0 
     /tmp/ccsf89uM.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccsf89uM.s:331    .text:0000000000000178 .L0 
     /tmp/ccsf89uM.s:471    .text:0000000000000204 .L0 
     /tmp/ccsf89uM.s:246    .text:0000000000000120 .L4
     /tmp/ccsf89uM.s:491    .text:0000000000000228 .L15
     /tmp/ccsf89uM.s:512    .text:0000000000000234 .L16
     /tmp/ccsf89uM.s:366    .text:000000000000019c .L17
     /tmp/ccsf89uM.s:402    .text:00000000000001c0 .L18
     /tmp/ccsf89uM.s:431    .text:00000000000001dc .L19
     /tmp/ccsf89uM.s:466    .text:0000000000000204 .L20
     /tmp/ccsf89uM.s:234    .text:0000000000000110 .L3
     /tmp/ccsf89uM.s:1549   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccsf89uM.s:2546   .debug_str:00000000000004fd .LASF107
     /tmp/ccsf89uM.s:2506   .debug_str:00000000000003d4 .LASF108
     /tmp/ccsf89uM.s:2426   .debug_str:000000000000016e .LASF109
     /tmp/ccsf89uM.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccsf89uM.s:524    .text:0000000000000240 .Letext0
     /tmp/ccsf89uM.s:2364   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccsf89uM.s:2482   .debug_str:0000000000000351 .LASF0
     /tmp/ccsf89uM.s:2500   .debug_str:00000000000003a3 .LASF1
     /tmp/ccsf89uM.s:2470   .debug_str:00000000000002dc .LASF2
     /tmp/ccsf89uM.s:2452   .debug_str:0000000000000272 .LASF4
     /tmp/ccsf89uM.s:2528   .debug_str:0000000000000481 .LASF3
     /tmp/ccsf89uM.s:2390   .debug_str:0000000000000071 .LASF5
     /tmp/ccsf89uM.s:2504   .debug_str:00000000000003c1 .LASF6
     /tmp/ccsf89uM.s:2480   .debug_str:000000000000033e .LASF7
     /tmp/ccsf89uM.s:2558   .debug_str:0000000000000634 .LASF8
     /tmp/ccsf89uM.s:2440   .debug_str:00000000000001ff .LASF9
     /tmp/ccsf89uM.s:2512   .debug_str:0000000000000410 .LASF10
     /tmp/ccsf89uM.s:2548   .debug_str:00000000000005c1 .LASF11
     /tmp/ccsf89uM.s:2392   .debug_str:0000000000000078 .LASF12
     /tmp/ccsf89uM.s:2374   .debug_str:0000000000000027 .LASF13
     /tmp/ccsf89uM.s:2400   .debug_str:00000000000000c2 .LASF14
     /tmp/ccsf89uM.s:2524   .debug_str:0000000000000453 .LASF15
     /tmp/ccsf89uM.s:2404   .debug_str:00000000000000d3 .LASF16
     /tmp/ccsf89uM.s:2496   .debug_str:0000000000000392 .LASF77
     /tmp/ccsf89uM.s:2466   .debug_str:00000000000002c3 .LASF110
     /tmp/ccsf89uM.s:2534   .debug_str:00000000000004a9 .LASF17
     /tmp/ccsf89uM.s:2494   .debug_str:0000000000000389 .LASF18
     /tmp/ccsf89uM.s:2460   .debug_str:0000000000000290 .LASF19
     /tmp/ccsf89uM.s:2522   .debug_str:0000000000000448 .LASF52
     /tmp/ccsf89uM.s:2576   .debug_str:00000000000006ba .LASF54
     /tmp/ccsf89uM.s:2376   .debug_str:0000000000000037 .LASF20
     /tmp/ccsf89uM.s:2418   .debug_str:0000000000000138 .LASF22
     /tmp/ccsf89uM.s:2414   .debug_str:0000000000000127 .LASF24
     /tmp/ccsf89uM.s:2412   .debug_str:0000000000000112 .LASF26
     /tmp/ccsf89uM.s:2530   .debug_str:0000000000000493 .LASF21
     /tmp/ccsf89uM.s:2516   .debug_str:0000000000000428 .LASF23
     /tmp/ccsf89uM.s:2544   .debug_str:00000000000004f6 .LASF25
     /tmp/ccsf89uM.s:2540   .debug_str:00000000000004d1 .LASF27
     /tmp/ccsf89uM.s:2430   .debug_str:000000000000019f .LASF28
     /tmp/ccsf89uM.s:2406   .debug_str:00000000000000e9 .LASF29
GAS LISTING /tmp/ccsf89uM.s 			page 22


     /tmp/ccsf89uM.s:2370   .debug_str:0000000000000010 .LASF30
     /tmp/ccsf89uM.s:2446   .debug_str:0000000000000240 .LASF31
     /tmp/ccsf89uM.s:2388   .debug_str:0000000000000069 .LASF32
     /tmp/ccsf89uM.s:2394   .debug_str:0000000000000088 .LASF33
     /tmp/ccsf89uM.s:2582   .debug_str:00000000000006e9 .LASF34
     /tmp/ccsf89uM.s:2420   .debug_str:000000000000014d .LASF35
     /tmp/ccsf89uM.s:2484   .debug_str:000000000000035e .LASF36
     /tmp/ccsf89uM.s:2574   .debug_str:00000000000006a7 .LASF37
     /tmp/ccsf89uM.s:2386   .debug_str:0000000000000062 .LASF38
     /tmp/ccsf89uM.s:2428   .debug_str:000000000000018c .LASF39
     /tmp/ccsf89uM.s:2434   .debug_str:00000000000001b5 .LASF40
     /tmp/ccsf89uM.s:2542   .debug_str:00000000000004e4 .LASF41
     /tmp/ccsf89uM.s:2384   .debug_str:000000000000005c .LASF42
     /tmp/ccsf89uM.s:2586   .debug_str:00000000000006fd .LASF43
     /tmp/ccsf89uM.s:2580   .debug_str:00000000000006de .LASF44
     /tmp/ccsf89uM.s:2526   .debug_str:0000000000000469 .LASF45
     /tmp/ccsf89uM.s:2498   .debug_str:0000000000000398 .LASF46
     /tmp/ccsf89uM.s:2536   .debug_str:00000000000004b2 .LASF47
     /tmp/ccsf89uM.s:2398   .debug_str:00000000000000b8 .LASF48
     /tmp/ccsf89uM.s:2448   .debug_str:0000000000000254 .LASF49
     /tmp/ccsf89uM.s:2474   .debug_str:00000000000002fd .LASF50
     /tmp/ccsf89uM.s:2442   .debug_str:000000000000020d .LASF51
     /tmp/ccsf89uM.s:2532   .debug_str:000000000000049a .LASF53
     /tmp/ccsf89uM.s:2396   .debug_str:000000000000009c .LASF55
     /tmp/ccsf89uM.s:2564   .debug_str:0000000000000655 .LASF65
     /tmp/ccsf89uM.s:2464   .debug_str:00000000000002a1 .LASF67
     /tmp/ccsf89uM.s:2450   .debug_str:000000000000026a .LASF56
     /tmp/ccsf89uM.s:2382   .debug_str:0000000000000054 .LASF57
     /tmp/ccsf89uM.s:2458   .debug_str:000000000000028b .LASF58
     /tmp/ccsf89uM.s:2456   .debug_str:0000000000000282 .LASF59
     /tmp/ccsf89uM.s:2488   .debug_str:0000000000000374 .LASF60
     /tmp/ccsf89uM.s:2462   .debug_str:0000000000000299 .LASF61
     /tmp/ccsf89uM.s:2492   .debug_str:000000000000037f .LASF62
     /tmp/ccsf89uM.s:2416   .debug_str:0000000000000130 .LASF79
     /tmp/ccsf89uM.s:2380   .debug_str:0000000000000047 .LASF63
     /tmp/ccsf89uM.s:2554   .debug_str:00000000000005eb .LASF64
     /tmp/ccsf89uM.s:2468   .debug_str:00000000000002ce .LASF66
     /tmp/ccsf89uM.s:2444   .debug_str:0000000000000223 .LASF68
     /tmp/ccsf89uM.s:2372   .debug_str:0000000000000018 .LASF69
     /tmp/ccsf89uM.s:2556   .debug_str:0000000000000616 .LASF70
     /tmp/ccsf89uM.s:2422   .debug_str:0000000000000161 .LASF71
     /tmp/ccsf89uM.s:2366   .debug_str:0000000000000000 .LASF72
     /tmp/ccsf89uM.s:2424   .debug_str:0000000000000166 .LASF73
     /tmp/ccsf89uM.s:2508   .debug_str:00000000000003e2 .LASF74
     /tmp/ccsf89uM.s:2572   .debug_str:00000000000006a2 .LASF75
     /tmp/ccsf89uM.s:2520   .debug_str:0000000000000443 .LASF76
     /tmp/ccsf89uM.s:2476   .debug_str:0000000000000307 .LASF78
     /tmp/ccsf89uM.s:2514   .debug_str:000000000000041f .LASF80
     /tmp/ccsf89uM.s:2368   .debug_str:0000000000000009 .LASF81
     /tmp/ccsf89uM.s:2408   .debug_str:00000000000000fd .LASF82
     /tmp/ccsf89uM.s:2570   .debug_str:0000000000000698 .LASF83
     /tmp/ccsf89uM.s:2510   .debug_str:00000000000003e7 .LASF84
     /tmp/ccsf89uM.s:2502   .debug_str:00000000000003b6 .LASF85
     /tmp/ccsf89uM.s:2436   .debug_str:00000000000001bb .LASF86
     /tmp/ccsf89uM.s:2560   .debug_str:0000000000000644 .LASF87
     /tmp/ccsf89uM.s:2566   .debug_str:000000000000066a .LASF89
     /tmp/ccsf89uM.s:2454   .debug_str:0000000000000279 .LASF88
GAS LISTING /tmp/ccsf89uM.s 			page 23


     /tmp/ccsf89uM.s:2438   .debug_str:00000000000001de .LASF90
     /tmp/ccsf89uM.s:2486   .debug_str:0000000000000365 .LASF91
     /tmp/ccsf89uM.s:2478   .debug_str:0000000000000317 .LASF92
     /tmp/ccsf89uM.s:60     .text:0000000000000020 .LFB17
     /tmp/ccsf89uM.s:522    .text:0000000000000240 .LFE17
     /tmp/ccsf89uM.s:2490   .debug_str:000000000000037a .LASF93
     /tmp/ccsf89uM.s:2518   .debug_str:000000000000043b .LASF94
     /tmp/ccsf89uM.s:2378   .debug_str:0000000000000040 .LASF95
     /tmp/ccsf89uM.s:372    .text:000000000000019c .LBB52
     /tmp/ccsf89uM.s:400    .text:00000000000001bc .LBE52
     /tmp/ccsf89uM.s:2267   .debug_loc:0000000000000000 .LLST8
     /tmp/ccsf89uM.s:2550   .debug_str:00000000000005d0 .LASF96
     /tmp/ccsf89uM.s:2275   .debug_loc:0000000000000025 .LLST9
     /tmp/ccsf89uM.s:2562   .debug_str:000000000000064e .LASF97
     /tmp/ccsf89uM.s:378    .text:00000000000001a8 .LVL13
     /tmp/ccsf89uM.s:382    .text:00000000000001b0 .LVL14
     /tmp/ccsf89uM.s:404    .text:00000000000001c0 .LBB48
     /tmp/ccsf89uM.s:429    .text:00000000000001d8 .LBE48
     /tmp/ccsf89uM.s:2282   .debug_loc:0000000000000048 .LLST7
     /tmp/ccsf89uM.s:411    .text:00000000000001cc .LVL17
     /tmp/ccsf89uM.s:433    .text:00000000000001dc .LBB45
     /tmp/ccsf89uM.s:464    .text:0000000000000200 .LBE45
     /tmp/ccsf89uM.s:2538   .debug_str:00000000000004ca .LASF98
     /tmp/ccsf89uM.s:2290   .debug_loc:000000000000006d .LLST3
     /tmp/ccsf89uM.s:2432   .debug_str:00000000000001a7 .LASF99
     /tmp/ccsf89uM.s:2298   .debug_loc:0000000000000092 .LLST4
     /tmp/ccsf89uM.s:2306   .debug_loc:00000000000000b6 .LLST5
     /tmp/ccsf89uM.s:2584   .debug_str:00000000000006f1 .LASF100
     /tmp/ccsf89uM.s:2314   .debug_loc:00000000000000da .LLST6
     /tmp/ccsf89uM.s:446    .text:00000000000001f4 .LVL20
     /tmp/ccsf89uM.s:468    .text:0000000000000204 .LBB44
     /tmp/ccsf89uM.s:489    .text:0000000000000224 .LBE44
     /tmp/ccsf89uM.s:479    .text:0000000000000220 .LVL22
     /tmp/ccsf89uM.s:115    .text:0000000000000050 .LBB26
     /tmp/ccsf89uM.s:131    .text:000000000000005c .LBE26
     /tmp/ccsf89uM.s:135    .text:0000000000000060 .LBB28
     /tmp/ccsf89uM.s:150    .text:000000000000006c .LBE28
     /tmp/ccsf89uM.s:163    .text:0000000000000078 .LBB30
     /tmp/ccsf89uM.s:178    .text:0000000000000084 .LBE30
     /tmp/ccsf89uM.s:261    .text:0000000000000130 .LBB34
     /tmp/ccsf89uM.s:272    .text:0000000000000134 .LBE34
     /tmp/ccsf89uM.s:2322   .debug_loc:00000000000000fe .LLST0
     /tmp/ccsf89uM.s:338    .text:000000000000018c .LBB40
     /tmp/ccsf89uM.s:349    .text:0000000000000190 .LBE40
     /tmp/ccsf89uM.s:2329   .debug_loc:0000000000000121 .LLST1
     /tmp/ccsf89uM.s:354    .text:0000000000000194 .LBB42
     /tmp/ccsf89uM.s:368    .text:000000000000019c .LBE42
     /tmp/ccsf89uM.s:2336   .debug_loc:0000000000000144 .LLST2
     /tmp/ccsf89uM.s:499    .text:0000000000000228 .LBB60
     /tmp/ccsf89uM.s:514    .text:0000000000000234 .LBE60
     /tmp/ccsf89uM.s:2343   .debug_loc:0000000000000167 .LLST10
     /tmp/ccsf89uM.s:213    .text:00000000000000d4 .LVL0
     /tmp/ccsf89uM.s:218    .text:00000000000000e4 .LVL1
     /tmp/ccsf89uM.s:223    .text:00000000000000f4 .LVL2
     /tmp/ccsf89uM.s:228    .text:0000000000000100 .LVL3
     /tmp/ccsf89uM.s:233    .text:0000000000000110 .LVL4
     /tmp/ccsf89uM.s:328    .text:0000000000000178 .LVL7
GAS LISTING /tmp/ccsf89uM.s 			page 24


     /tmp/ccsf89uM.s:333    .text:0000000000000188 .LVL8
     /tmp/ccsf89uM.s:518    .text:000000000000023c .LVL26
     /tmp/ccsf89uM.s:10     .text:0000000000000000 .LFB16
     /tmp/ccsf89uM.s:40     .text:0000000000000020 .LFE16
     /tmp/ccsf89uM.s:2402   .debug_str:00000000000000ce .LASF101
     /tmp/ccsf89uM.s:2552   .debug_str:00000000000005d9 .LASF102
     /tmp/ccsf89uM.s:2568   .debug_str:000000000000068b .LASF104
     /tmp/ccsf89uM.s:2472   .debug_str:00000000000002ea .LASF103
     /tmp/ccsf89uM.s:2578   .debug_str:00000000000006d2 .LASF105
     /tmp/ccsf89uM.s:2410   .debug_str:0000000000000102 .LASF106
     /tmp/ccsf89uM.s:365    .text:000000000000019c .LVL12
     /tmp/ccsf89uM.s:406    .text:00000000000001c0 .LVL16
     /tmp/ccsf89uM.s:435    .text:00000000000001dc .LVL19
     /tmp/ccsf89uM.s:260    .text:0000000000000130 .LVL5
     /tmp/ccsf89uM.s:269    .text:0000000000000134 .LVL6
     /tmp/ccsf89uM.s:337    .text:000000000000018c .LVL9
     /tmp/ccsf89uM.s:346    .text:0000000000000190 .LVL10
     /tmp/ccsf89uM.s:353    .text:0000000000000194 .LVL11
     /tmp/ccsf89uM.s:498    .text:0000000000000228 .LVL24
     /tmp/ccsf89uM.s:511    .text:0000000000000234 .LVL25
     /tmp/ccsf89uM.s:531    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z12printIntegerm
_Z11printStringPKc
_ZN7_thread7runningE
_ZN7_thread14threadDispatchEv
_ZN15MemoryAllocator14convert2BlocksEm
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN7_thread12threadCreateEPPS_PFvPvES2_S2_
console_handler
