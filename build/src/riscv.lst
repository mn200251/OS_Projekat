GAS LISTING /tmp/ccTZgZex.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB33:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** 
   2:src/riscv.cpp **** #include "../h/riscv.hpp"
   3:src/riscv.cpp **** #include "../h/tcb.hpp"
   4:src/riscv.cpp **** #include "../lib/console.h"
   5:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   6:src/riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   7:src/riscv.cpp **** #include "../lib/hw.h"
   8:src/riscv.cpp **** #include "../lib/mem.h"
   9:src/riscv.cpp **** 
  10:src/riscv.cpp **** void Riscv::popSppSpie()
  11:src/riscv.cpp **** {
  12              		.loc 1 11 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  12:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 12 5
  21              		.loc 1 12 38 is_stmt 0
  22              	#APP
  23              	# 12 "src/riscv.cpp" 1
  13              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 13 5 is_stmt 1
  27              		.loc 1 13 29 is_stmt 0
  28              	# 13 "src/riscv.cpp" 1
  14              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 14 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE33:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB34:
GAS LISTING /tmp/ccTZgZex.s 			page 2


  15:src/riscv.cpp **** 
  16:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  17:src/riscv.cpp **** {
  47              		.loc 1 17 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101F7 		addi	sp,sp,-144
  50              		.cfi_def_cfa_offset 144
  51 0024 23341108 		sd	ra,136(sp)
  52 0028 23308108 		sd	s0,128(sp)
  53 002c 233C9106 		sd	s1,120(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56              		.cfi_offset 9, -24
  57 0030 13040109 		addi	s0,sp,144
  58              		.cfi_def_cfa 8, 0
  18:src/riscv.cpp ****     uint64 a[8];
  59              		.loc 1 18 5
  19:src/riscv.cpp ****     asm volatile("sd a0, %0" : "=m" (a[0]));
  60              		.loc 1 19 5
  61              		.loc 1 19 44 is_stmt 0
  62              	#APP
  63              	# 19 "src/riscv.cpp" 1
  20              	    asm volatile("sd a1, %0" : "=m" (a[1]));
  64              		sd a0, -96(s0)
  65              	# 0 "" 2
  66              		.loc 1 20 5 is_stmt 1
  67              		.loc 1 20 44 is_stmt 0
  68              	# 20 "src/riscv.cpp" 1
  21              	    asm volatile("sd a2, %0" : "=m" (a[2]));
  69              		sd a1, -88(s0)
  70              	# 0 "" 2
  71              		.loc 1 21 5 is_stmt 1
  72              		.loc 1 21 44 is_stmt 0
  73              	# 21 "src/riscv.cpp" 1
  22              	    asm volatile("sd a3, %0" : "=m" (a[3]));
  74              		sd a2, -80(s0)
  75              	# 0 "" 2
  76              		.loc 1 22 5 is_stmt 1
  77              		.loc 1 22 44 is_stmt 0
  78              	# 22 "src/riscv.cpp" 1
  23              	    asm volatile("sd a4, %0" : "=m" (a[4]));
  79              		sd a3, -72(s0)
  80              	# 0 "" 2
  81              		.loc 1 23 5 is_stmt 1
  82              		.loc 1 23 44 is_stmt 0
  83              	# 23 "src/riscv.cpp" 1
  24              	    asm volatile("sd a5, %0" : "=m" (a[5]));
  84              		sd a4, -64(s0)
  85              	# 0 "" 2
  86              		.loc 1 24 5 is_stmt 1
  87              		.loc 1 24 44 is_stmt 0
  88              	# 24 "src/riscv.cpp" 1
  25              	    asm volatile("sd a6, %0" : "=m" (a[6]));
  89              		sd a5, -56(s0)
  90              	# 0 "" 2
  91              		.loc 1 25 5 is_stmt 1
  92              		.loc 1 25 44 is_stmt 0
GAS LISTING /tmp/ccTZgZex.s 			page 3


  93              	# 25 "src/riscv.cpp" 1
  26              	    asm volatile("sd a7, %0" : "=m" (a[7]));
  94              		sd a6, -48(s0)
  95              	# 0 "" 2
  96              		.loc 1 26 5 is_stmt 1
  97              		.loc 1 26 44 is_stmt 0
  98              	# 26 "src/riscv.cpp" 1
  27              	
  28:src/riscv.cpp ****     uint64 volatile sepc = r_sepc() + 4;
  99              		sd a7, -40(s0)
 100              	# 0 "" 2
 101              		.loc 1 28 5 is_stmt 1
 102              	#NO_APP
 103              	.LBB26:
 104              	.LBB27:
 105              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
GAS LISTING /tmp/ccTZgZex.s 			page 4


  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp **** private:
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap handler
  85:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** };
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  90:src/../h/riscv.hpp **** {
  91:src/../h/riscv.hpp ****     uint64 volatile scause;
  92:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  93:src/../h/riscv.hpp ****     return scause;
  94:src/../h/riscv.hpp **** }
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
GAS LISTING /tmp/ccTZgZex.s 			page 5


  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile sepc;
 106              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 107              		.loc 2 104 5
 108              		.loc 2 104 64 is_stmt 0
 109              	#APP
 110              	# 104 "src/../h/riscv.hpp" 1
 105              	    return sepc;
 111              		csrr a5, sepc
 112              	# 0 "" 2
 113              	#NO_APP
 114 0058 2334F4F8 		sd	a5,-120(s0)
 115              		.loc 2 105 5 is_stmt 1
 116              		.loc 2 105 12 is_stmt 0
 117 005c 833784F8 		ld	a5,-120(s0)
 118              	.LBE27:
 119              	.LBE26:
 120              		.loc 1 28 37
 121 0060 93874700 		addi	a5,a5,4
 122              		.loc 1 28 39
 123 0064 233CF4F8 		sd	a5,-104(s0)
  29:src/riscv.cpp ****     uint64 volatile sstatus = r_sstatus();
 124              		.loc 1 29 5 is_stmt 1
 125              	.LBB28:
 126              	.LBB29:
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile stvec;
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 117:src/../h/riscv.hpp ****     return stvec;
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stval;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 129:src/../h/riscv.hpp ****     return stval;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 133:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccTZgZex.s 			page 6


 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     uint64 volatile sip;
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 151:src/../h/riscv.hpp ****     return sip;
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 127              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 128              		.loc 2 172 5
 129              		.loc 2 172 76 is_stmt 0
 130              	#APP
 131              	# 172 "src/../h/riscv.hpp" 1
 173              	    return sstatus;
 132              		csrr a5, sstatus
 133              	# 0 "" 2
 134              	#NO_APP
 135 006c 2330F4F8 		sd	a5,-128(s0)
 136              		.loc 2 173 5 is_stmt 1
 137              		.loc 2 173 12 is_stmt 0
 138 0070 833704F8 		ld	a5,-128(s0)
 139              	.LBE29:
 140              	.LBE28:
 141              		.loc 1 29 41
 142 0074 2338F4F8 		sd	a5,-112(s0)
  30:src/riscv.cpp **** 
GAS LISTING /tmp/ccTZgZex.s 			page 7


  31:src/riscv.cpp ****     // retrieve stack pointer relative to saved registers
  32:src/riscv.cpp ****     void* SP;
 143              		.loc 1 32 5 is_stmt 1
  33:src/riscv.cpp ****     asm volatile("csrr %0, sscratch" : "=r" (SP));
 144              		.loc 1 33 5
 145              		.loc 1 33 50 is_stmt 0
 146              	#APP
 147              	# 33 "src/riscv.cpp" 1
  34              	
 148              		csrr s1, sscratch
 149              	# 0 "" 2
 150              	.LVL0:
  35:src/riscv.cpp ****     uint64 scause = r_scause();
 151              		.loc 1 35 5 is_stmt 1
 152              	#NO_APP
 153              	.LBB30:
 154              	.LBB31:
  91:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 155              		.loc 2 91 5
  92:src/../h/riscv.hpp ****     return scause;
 156              		.loc 2 92 5
  92:src/../h/riscv.hpp ****     return scause;
 157              		.loc 2 92 72 is_stmt 0
 158              	#APP
 159              	# 92 "src/../h/riscv.hpp" 1
 160              		csrr a5, scause
 161              	# 0 "" 2
 162              	#NO_APP
 163 0080 233CF4F6 		sd	a5,-136(s0)
  93:src/../h/riscv.hpp **** }
 164              		.loc 2 93 5 is_stmt 1
  93:src/../h/riscv.hpp **** }
 165              		.loc 2 93 12 is_stmt 0
 166 0084 033784F7 		ld	a4,-136(s0)
 167              	.LVL1:
 168              	.LBE31:
 169              	.LBE30:
  36:src/riscv.cpp **** 
  37:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 170              		.loc 1 37 5 is_stmt 1
 171              	.LBB32:
 172              		.loc 1 37 40 is_stmt 0
 173 0088 930687FF 		addi	a3,a4,-8
 174              		.loc 1 37 5
 175 008c 93071000 		li	a5,1
 176 0090 63FCD702 		bleu	a3,a5,.L10
  38:src/riscv.cpp ****     {
  39:src/riscv.cpp ****         w_sepc(sepc);
  40:src/riscv.cpp **** 
  41:src/riscv.cpp ****         // mem_alloc
  42:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
  43:src/riscv.cpp ****         {
  44:src/riscv.cpp ****             // get the size argument
  45:src/riscv.cpp ****             size_t size = reinterpret_cast<size_t>(a[1]);
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(size);
  48:src/riscv.cpp **** 
GAS LISTING /tmp/ccTZgZex.s 			page 8


  49:src/riscv.cpp ****             // retVal should already be in a0 but just in case
  50:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  51:src/riscv.cpp **** 
  52:src/riscv.cpp ****             // put the return value on the stack
  53:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
  54:src/riscv.cpp ****             // asm volatile("sd a0, 0x50(%0)" : : "r" (SP));
  55:src/riscv.cpp ****         }
  56:src/riscv.cpp ****         // mem_free
  57:src/riscv.cpp ****         else if (a[0] == 0x0000000000000002UL)
  58:src/riscv.cpp ****         {
  59:src/riscv.cpp ****             // get the ptr argument
  60:src/riscv.cpp ****             void* ptr = reinterpret_cast<void *>(a[1]);
  61:src/riscv.cpp **** 
  62:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
  63:src/riscv.cpp **** 
  64:src/riscv.cpp ****             // retVal should already be in a0 but just in case
  65:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  66:src/riscv.cpp **** 
  67:src/riscv.cpp ****             // put the return value on the stack
  68:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
  69:src/riscv.cpp ****             // asm volatile("sd a0, 0x50(%0)" : : "r" (SP));
  70:src/riscv.cpp ****         }
  71:src/riscv.cpp ****         else
  72:src/riscv.cpp ****         {
  73:src/riscv.cpp ****             // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  74:src/riscv.cpp ****             // uint64 volatile sepc = r_sepc() + 4;
  75:src/riscv.cpp ****             // uint64 volatile sstatus = r_sstatus();
  76:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  77:src/riscv.cpp ****             TCB::dispatch();
  78:src/riscv.cpp ****             w_sstatus(sstatus);
  79:src/riscv.cpp ****             // w_sepc(sepc);
  80:src/riscv.cpp ****         }
  81:src/riscv.cpp ****         // w_sstatus(sstatus);
  82:src/riscv.cpp ****         // w_sepc(sepc);
  83:src/riscv.cpp ****     }
  84:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 177              		.loc 1 84 10 is_stmt 1
 178 0094 9307F0FF 		li	a5,-1
 179 0098 9397F703 		slli	a5,a5,63
 180 009c 93871700 		addi	a5,a5,1
 181 00a0 630AF708 		beq	a4,a5,.L11
  85:src/riscv.cpp ****     {
  86:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  87:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  88:src/riscv.cpp ****         TCB::timeSliceCounter++;
  89:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
  90:src/riscv.cpp ****         {
  91:src/riscv.cpp ****             // uint64 volatile sepc = r_sepc();
  92:src/riscv.cpp ****             // uint64 volatile sstatus = r_sstatus();
  93:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  94:src/riscv.cpp ****             TCB::dispatch();
  95:src/riscv.cpp ****             w_sstatus(sstatus);
  96:src/riscv.cpp ****             w_sepc(sepc);
  97:src/riscv.cpp ****         }
  98:src/riscv.cpp ****     }
  99:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 182              		.loc 1 99 10
GAS LISTING /tmp/ccTZgZex.s 			page 9


 183 00a4 9307F0FF 		li	a5,-1
 184 00a8 9397F703 		slli	a5,a5,63
 185 00ac 93879700 		addi	a5,a5,9
 186 00b0 630EF70C 		beq	a4,a5,.L12
 187              	.LVL2:
 188              	.L3:
 189              	.LBE32:
 100:src/riscv.cpp ****     {
 101:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 102:src/riscv.cpp ****         console_handler();
 103:src/riscv.cpp ****     }
 104:src/riscv.cpp ****     else
 105:src/riscv.cpp ****     {
 106:src/riscv.cpp ****         // unexpected trap cause
 107:src/riscv.cpp ****     }
 108:src/riscv.cpp **** }...
 190              		.loc 1 108 1 is_stmt 0
 191 00b4 83308108 		ld	ra,136(sp)
 192              		.cfi_remember_state
 193              		.cfi_restore 1
 194 00b8 03340108 		ld	s0,128(sp)
 195              		.cfi_restore 8
 196              		.cfi_def_cfa 2, 144
 197 00bc 83348107 		ld	s1,120(sp)
 198              		.cfi_restore 9
 199              	.LVL3:
 200 00c0 13010109 		addi	sp,sp,144
 201              		.cfi_def_cfa_offset 0
 202 00c4 67800000 		jr	ra
 203              	.LVL4:
 204              	.L10:
 205              		.cfi_restore_state
 206              	.LBB53:
 207              	.LBB33:
  39:src/riscv.cpp ****         w_sepc(sepc);
 208              		.loc 1 39 9 is_stmt 1
  39:src/riscv.cpp ****         w_sepc(sepc);
 209              		.loc 1 39 15 is_stmt 0
 210 00c8 833784F9 		ld	a5,-104(s0)
 211              	.LVL5:
 212              	.LBB34:
 213              	.LBB35:
 110:src/../h/riscv.hpp **** }
 214              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 215              		.loc 2 110 65 is_stmt 0
 216              	#APP
 217              	# 110 "src/../h/riscv.hpp" 1
 218              		csrw sepc, a5
 219              	# 0 "" 2
 220              	.LVL6:
 221              	#NO_APP
 222              	.LBE35:
 223              	.LBE34:
  42:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 224              		.loc 1 42 9 is_stmt 1
 225              	.LBB36:
GAS LISTING /tmp/ccTZgZex.s 			page 10


  42:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 226              		.loc 1 42 16 is_stmt 0
 227 00d0 833704FA 		ld	a5,-96(s0)
  42:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 228              		.loc 1 42 9
 229 00d4 13071000 		li	a4,1
 230              	.LVL7:
 231 00d8 6386E702 		beq	a5,a4,.L13
 232              	.LBE36:
 233              	.LBE33:
 234              	.LBE53:
  57:src/riscv.cpp ****         else if (a[0] == 0x0000000000000002UL)
 235              		.loc 1 57 14 is_stmt 1
 236              	.LBB54:
 237              	.LBB44:
 238              	.LBB43:
 239              	.LBB37:
 240 00dc 13072000 		li	a4,2
 241 00e0 638EE702 		beq	a5,a4,.L14
  76:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 242              		.loc 1 76 13
  76:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 243              		.loc 1 76 35 is_stmt 0
 244 00e4 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 244      83B70700 
 245 00ec 23B00700 		sd	zero,0(a5)
  77:src/riscv.cpp ****             TCB::dispatch();
 246              		.loc 1 77 13 is_stmt 1
  77:src/riscv.cpp ****             TCB::dispatch();
 247              		.loc 1 77 26 is_stmt 0
 248 00f0 97000000 		call	_ZN3TCB8dispatchEv@plt
 248      E7800000 
 249              	.LVL8:
  78:src/riscv.cpp ****             w_sstatus(sstatus);
 250              		.loc 1 78 13 is_stmt 1
  78:src/riscv.cpp ****             w_sstatus(sstatus);
 251              		.loc 1 78 22 is_stmt 0
 252 00f8 833704F9 		ld	a5,-112(s0)
 253              	.LVL9:
 254              	.LBB38:
 255              	.LBB39:
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 256              		.loc 2 178 5 is_stmt 1
 257              		.loc 2 178 77 is_stmt 0
 258              	#APP
 259              	# 178 "src/../h/riscv.hpp" 1
 179              	}
 260              		csrw sstatus, a5
 261              	# 0 "" 2
 262              		.loc 2 179 1
 263              	#NO_APP
 264 0100 6FF05FFB 		j	.L3
 265              	.LVL10:
GAS LISTING /tmp/ccTZgZex.s 			page 11


 266              	.L13:
 267              	.LBE39:
 268              	.LBE38:
 269              	.LBE37:
 270              	.LBB41:
  45:src/riscv.cpp ****             size_t size = reinterpret_cast<size_t>(a[1]);
 271              		.loc 1 45 13 is_stmt 1
  47:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(size);
 272              		.loc 1 47 13
  47:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(size);
 273              		.loc 1 47 54 is_stmt 0
 274 0104 033584FA 		ld	a0,-88(s0)
 275 0108 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 275      E7800000 
 276              	.LVL11:
  50:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 277              		.loc 1 50 13 is_stmt 1
  50:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 278              		.loc 1 50 54 is_stmt 0
 279              	#APP
 280              	# 50 "src/riscv.cpp" 1
 281              		mv a5, a0
 282              	# 0 "" 2
 283              	.LVL12:
  53:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 284              		.loc 1 53 13 is_stmt 1
  53:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 285              		.loc 1 53 59 is_stmt 0
 286              	# 53 "src/riscv.cpp" 1
 287              		sd a0, 10 * 8(s1)
 288              	# 0 "" 2
 289              	#NO_APP
 290              	.LBE41:
 291 0118 6FF0DFF9 		j	.L3
 292              	.LVL13:
 293              	.L14:
 294              	.LBB42:
 295              	.LBB40:
  60:src/riscv.cpp ****             void* ptr = reinterpret_cast<void *>(a[1]);
 296              		.loc 1 60 13 is_stmt 1
  62:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
 297              		.loc 1 62 13
  62:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
 298              		.loc 1 62 51 is_stmt 0
 299 011c 033584FA 		ld	a0,-88(s0)
 300 0120 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 300      E7800000 
 301              	.LVL14:
  65:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 302              		.loc 1 65 13 is_stmt 1
  65:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 303              		.loc 1 65 54 is_stmt 0
 304              	#APP
 305              	# 65 "src/riscv.cpp" 1
 306              		mv a5, a0
 307              	# 0 "" 2
 308              	.LVL15:
GAS LISTING /tmp/ccTZgZex.s 			page 12


  68:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 309              		.loc 1 68 13 is_stmt 1
  68:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 310              		.loc 1 68 59 is_stmt 0
 311              	# 68 "src/riscv.cpp" 1
 312              		sd a0, 10 * 8(s1)
 313              	# 0 "" 2
 314              	#NO_APP
 315              	.LBE40:
 316 0130 6FF05FF8 		j	.L3
 317              	.LVL16:
 318              	.L11:
 319              	.LBE42:
 320              	.LBE43:
 321              	.LBE44:
  87:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 322              		.loc 1 87 9 is_stmt 1
 323              	.LBB45:
 324              	.LBB46:
 144:src/../h/riscv.hpp **** }
 325              		.loc 2 144 5
 144:src/../h/riscv.hpp **** }
 326              		.loc 2 144 64 is_stmt 0
 327 0134 93072000 		li	a5,2
 328              	#APP
 329              	# 144 "src/../h/riscv.hpp" 1
 330              		csrc sip, a5
 331              	# 0 "" 2
 332              	.LVL17:
 333              	#NO_APP
 334              	.LBE46:
 335              	.LBE45:
  88:src/riscv.cpp ****         TCB::timeSliceCounter++;
 336              		.loc 1 88 9 is_stmt 1
  88:src/riscv.cpp ****         TCB::timeSliceCounter++;
 337              		.loc 1 88 30 is_stmt 0
 338 013c 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 338      03370700 
 339              	.LVL18:
 340 0144 83370700 		ld	a5,0(a4)
 341 0148 93871700 		addi	a5,a5,1
 342 014c 2330F700 		sd	a5,0(a4)
  89:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 343              		.loc 1 89 9 is_stmt 1
  89:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 344              		.loc 1 89 64 is_stmt 0
 345 0150 17070000 		la	a4,_ZN3TCB7runningE
 345      03370700 
 346 0158 03370700 		ld	a4,0(a4)
 347              	.LVL19:
 348              	.LBB47:
 349              	.LBB48:
 350              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
GAS LISTING /tmp/ccTZgZex.s 			page 13


   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 351              		.loc 3 21 35 is_stmt 1
 352              		.loc 3 21 42 is_stmt 0
 353 015c 03370702 		ld	a4,32(a4)
 354              	.LVL20:
 355              	.LBE48:
 356              	.LBE47:
  89:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 357              		.loc 1 89 9
 358 0160 E3EAE7F4 		bltu	a5,a4,.L3
  93:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 359              		.loc 1 93 13 is_stmt 1
  93:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 360              		.loc 1 93 35 is_stmt 0
 361 0164 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 361      83B70700 
 362 016c 23B00700 		sd	zero,0(a5)
  94:src/riscv.cpp ****             TCB::dispatch();
 363              		.loc 1 94 13 is_stmt 1
  94:src/riscv.cpp ****             TCB::dispatch();
 364              		.loc 1 94 26 is_stmt 0
 365 0170 97000000 		call	_ZN3TCB8dispatchEv@plt
 365      E7800000 
 366              	.LVL21:
  95:src/riscv.cpp ****             w_sstatus(sstatus);
 367              		.loc 1 95 13 is_stmt 1
  95:src/riscv.cpp ****             w_sstatus(sstatus);
 368              		.loc 1 95 22 is_stmt 0
 369 0178 833704F9 		ld	a5,-112(s0)
 370              	.LVL22:
 371              	.LBB49:
 372              	.LBB50:
 178:src/../h/riscv.hpp **** }
 373              		.loc 2 178 5 is_stmt 1
 178:src/../h/riscv.hpp **** }
 374              		.loc 2 178 77 is_stmt 0
 375              	#APP
 376              	# 178 "src/../h/riscv.hpp" 1
 377              		csrw sstatus, a5
 378              	# 0 "" 2
 379              	.LVL23:
GAS LISTING /tmp/ccTZgZex.s 			page 14


 380              	#NO_APP
 381              	.LBE50:
 382              	.LBE49:
  96:src/riscv.cpp ****             w_sepc(sepc);
 383              		.loc 1 96 13 is_stmt 1
  96:src/riscv.cpp ****             w_sepc(sepc);
 384              		.loc 1 96 19 is_stmt 0
 385 0180 833784F9 		ld	a5,-104(s0)
 386              	.LVL24:
 387              	.LBB51:
 388              	.LBB52:
 110:src/../h/riscv.hpp **** }
 389              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 390              		.loc 2 110 65 is_stmt 0
 391              	#APP
 392              	# 110 "src/../h/riscv.hpp" 1
 111:src/../h/riscv.hpp **** 
 393              		csrw sepc, a5
 394              	# 0 "" 2
 395              		.loc 2 111 1
 396              	#NO_APP
 397 0188 6FF0DFF2 		j	.L3
 398              	.LVL25:
 399              	.L12:
 400              	.LBE52:
 401              	.LBE51:
 102:src/riscv.cpp ****         console_handler();
 402              		.loc 1 102 9 is_stmt 1
 102:src/riscv.cpp ****         console_handler();
 403              		.loc 1 102 24 is_stmt 0
 404 018c 97000000 		call	console_handler@plt
 404      E7800000 
 405              	.LVL26:
 406              	.LBE54:
 407              		.loc 1 108 1
 408 0194 6FF01FF2 		j	.L3
 409              		.cfi_endproc
 410              	.LFE34:
 412              	.Letext0:
 413              		.file 4 "src/../h/../lib/hw.h"
 414              		.file 5 "src/../h/MemoryAllocator.hpp"
 415              		.file 6 "src/../lib/console.h"
GAS LISTING /tmp/ccTZgZex.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccTZgZex.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccTZgZex.s:13     .text:0000000000000000 .L0 
     /tmp/ccTZgZex.s:14     .text:0000000000000000 .L0 
     /tmp/ccTZgZex.s:15     .text:0000000000000004 .L0 
     /tmp/ccTZgZex.s:17     .text:0000000000000008 .L0 
     /tmp/ccTZgZex.s:19     .text:000000000000000c .L0 
     /tmp/ccTZgZex.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:12     .text:000000000000000c .L0 
     /tmp/ccTZgZex.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:13     .text:0000000000000010 .L0 
     /tmp/ccTZgZex.s:33     .text:0000000000000014 .L0 
     /tmp/ccTZgZex.s:34     .text:0000000000000018 .L0 
     /tmp/ccTZgZex.s:35     .text:0000000000000018 .L0 
     /tmp/ccTZgZex.s:37     .text:000000000000001c .L0 
     /tmp/ccTZgZex.s:39     .text:0000000000000020 .L0 
     /tmp/ccTZgZex.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccTZgZex.s:48     .text:0000000000000020 .L0 
     /tmp/ccTZgZex.s:49     .text:0000000000000020 .L0 
     /tmp/ccTZgZex.s:50     .text:0000000000000024 .L0 
     /tmp/ccTZgZex.s:54     .text:0000000000000030 .L0 
     /tmp/ccTZgZex.s:55     .text:0000000000000030 .L0 
     /tmp/ccTZgZex.s:56     .text:0000000000000030 .L0 
     /tmp/ccTZgZex.s:58     .text:0000000000000034 .L0 
     /tmp/ccTZgZex.s:60     .text:0000000000000034 .L0 
     /tmp/ccTZgZex.s:61     .text:0000000000000034 .L0 
       src/riscv.cpp:19     .text:0000000000000034 .L0 
     /tmp/ccTZgZex.s:67     .text:0000000000000038 .L0 
       src/riscv.cpp:20     .text:0000000000000038 .L0 
     /tmp/ccTZgZex.s:72     .text:000000000000003c .L0 
       src/riscv.cpp:21     .text:000000000000003c .L0 
     /tmp/ccTZgZex.s:77     .text:0000000000000040 .L0 
       src/riscv.cpp:22     .text:0000000000000040 .L0 
     /tmp/ccTZgZex.s:82     .text:0000000000000044 .L0 
       src/riscv.cpp:23     .text:0000000000000044 .L0 
     /tmp/ccTZgZex.s:87     .text:0000000000000048 .L0 
       src/riscv.cpp:24     .text:0000000000000048 .L0 
     /tmp/ccTZgZex.s:92     .text:000000000000004c .L0 
       src/riscv.cpp:25     .text:000000000000004c .L0 
     /tmp/ccTZgZex.s:97     .text:0000000000000050 .L0 
       src/riscv.cpp:26     .text:0000000000000050 .L0 
     /tmp/ccTZgZex.s:106    .text:0000000000000054 .L0 
     /tmp/ccTZgZex.s:107    .text:0000000000000054 .L0 
     /tmp/ccTZgZex.s:108    .text:0000000000000054 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000054 .L0 
     /tmp/ccTZgZex.s:116    .text:000000000000005c .L0 
     /tmp/ccTZgZex.s:117    .text:000000000000005c .L0 
     /tmp/ccTZgZex.s:121    .text:0000000000000060 .L0 
     /tmp/ccTZgZex.s:123    .text:0000000000000064 .L0 
     /tmp/ccTZgZex.s:127    .text:0000000000000068 .L0 
     /tmp/ccTZgZex.s:128    .text:0000000000000068 .L0 
     /tmp/ccTZgZex.s:129    .text:0000000000000068 .L0 
  src/../h/riscv.hpp:172    .text:0000000000000068 .L0 
     /tmp/ccTZgZex.s:137    .text:0000000000000070 .L0 
     /tmp/ccTZgZex.s:138    .text:0000000000000070 .L0 
     /tmp/ccTZgZex.s:142    .text:0000000000000074 .L0 
GAS LISTING /tmp/ccTZgZex.s 			page 16


     /tmp/ccTZgZex.s:144    .text:0000000000000078 .L0 
     /tmp/ccTZgZex.s:145    .text:0000000000000078 .L0 
       src/riscv.cpp:33     .text:0000000000000078 .L0 
     /tmp/ccTZgZex.s:155    .text:000000000000007c .L0 
     /tmp/ccTZgZex.s:156    .text:000000000000007c .L0 
     /tmp/ccTZgZex.s:157    .text:000000000000007c .L0 
  src/../h/riscv.hpp:92     .text:000000000000007c .L0 
     /tmp/ccTZgZex.s:165    .text:0000000000000084 .L0 
     /tmp/ccTZgZex.s:166    .text:0000000000000084 .L0 
     /tmp/ccTZgZex.s:172    .text:0000000000000088 .L0 
     /tmp/ccTZgZex.s:173    .text:0000000000000088 .L0 
     /tmp/ccTZgZex.s:175    .text:000000000000008c .L0 
     /tmp/ccTZgZex.s:178    .text:0000000000000094 .L0 
     /tmp/ccTZgZex.s:183    .text:00000000000000a4 .L0 
     /tmp/ccTZgZex.s:191    .text:00000000000000b4 .L0 
     /tmp/ccTZgZex.s:192    .text:00000000000000b8 .L0 
     /tmp/ccTZgZex.s:193    .text:00000000000000b8 .L0 
     /tmp/ccTZgZex.s:195    .text:00000000000000bc .L0 
     /tmp/ccTZgZex.s:196    .text:00000000000000bc .L0 
     /tmp/ccTZgZex.s:198    .text:00000000000000c0 .L0 
     /tmp/ccTZgZex.s:201    .text:00000000000000c4 .L0 
     /tmp/ccTZgZex.s:205    .text:00000000000000c8 .L0 
     /tmp/ccTZgZex.s:209    .text:00000000000000c8 .L0 
     /tmp/ccTZgZex.s:210    .text:00000000000000c8 .L0 
     /tmp/ccTZgZex.s:215    .text:00000000000000cc .L0 
  src/../h/riscv.hpp:110    .text:00000000000000cc .L0 
     /tmp/ccTZgZex.s:226    .text:00000000000000d0 .L0 
     /tmp/ccTZgZex.s:227    .text:00000000000000d0 .L0 
     /tmp/ccTZgZex.s:229    .text:00000000000000d4 .L0 
     /tmp/ccTZgZex.s:240    .text:00000000000000dc .L0 
     /tmp/ccTZgZex.s:243    .text:00000000000000e4 .L0 
     /tmp/ccTZgZex.s:244    .text:00000000000000e4 .L0 
     /tmp/ccTZgZex.s:247    .text:00000000000000f0 .L0 
     /tmp/ccTZgZex.s:248    .text:00000000000000f0 .L0 
     /tmp/ccTZgZex.s:251    .text:00000000000000f8 .L0 
     /tmp/ccTZgZex.s:252    .text:00000000000000f8 .L0 
     /tmp/ccTZgZex.s:257    .text:00000000000000fc .L0 
  src/../h/riscv.hpp:178    .text:00000000000000fc .L0 
     /tmp/ccTZgZex.s:264    .text:0000000000000100 .L0 
     /tmp/ccTZgZex.s:272    .text:0000000000000104 .L0 
     /tmp/ccTZgZex.s:273    .text:0000000000000104 .L0 
     /tmp/ccTZgZex.s:274    .text:0000000000000104 .L0 
     /tmp/ccTZgZex.s:278    .text:0000000000000110 .L0 
       src/riscv.cpp:50     .text:0000000000000110 .L0 
     /tmp/ccTZgZex.s:285    .text:0000000000000114 .L0 
       src/riscv.cpp:53     .text:0000000000000114 .L0 
     /tmp/ccTZgZex.s:297    .text:000000000000011c .L0 
     /tmp/ccTZgZex.s:298    .text:000000000000011c .L0 
     /tmp/ccTZgZex.s:299    .text:000000000000011c .L0 
     /tmp/ccTZgZex.s:303    .text:0000000000000128 .L0 
       src/riscv.cpp:65     .text:0000000000000128 .L0 
     /tmp/ccTZgZex.s:310    .text:000000000000012c .L0 
       src/riscv.cpp:68     .text:000000000000012c .L0 
     /tmp/ccTZgZex.s:325    .text:0000000000000134 .L0 
     /tmp/ccTZgZex.s:326    .text:0000000000000134 .L0 
     /tmp/ccTZgZex.s:327    .text:0000000000000134 .L0 
     /tmp/ccTZgZex.s:337    .text:000000000000013c .L0 
GAS LISTING /tmp/ccTZgZex.s 			page 17


     /tmp/ccTZgZex.s:338    .text:000000000000013c .L0 
     /tmp/ccTZgZex.s:344    .text:0000000000000150 .L0 
     /tmp/ccTZgZex.s:345    .text:0000000000000150 .L0 
     /tmp/ccTZgZex.s:352    .text:000000000000015c .L0 
     /tmp/ccTZgZex.s:353    .text:000000000000015c .L0 
     /tmp/ccTZgZex.s:358    .text:0000000000000160 .L0 
     /tmp/ccTZgZex.s:360    .text:0000000000000164 .L0 
     /tmp/ccTZgZex.s:361    .text:0000000000000164 .L0 
     /tmp/ccTZgZex.s:364    .text:0000000000000170 .L0 
     /tmp/ccTZgZex.s:365    .text:0000000000000170 .L0 
     /tmp/ccTZgZex.s:368    .text:0000000000000178 .L0 
     /tmp/ccTZgZex.s:369    .text:0000000000000178 .L0 
     /tmp/ccTZgZex.s:374    .text:000000000000017c .L0 
  src/../h/riscv.hpp:178    .text:000000000000017c .L0 
     /tmp/ccTZgZex.s:384    .text:0000000000000180 .L0 
     /tmp/ccTZgZex.s:385    .text:0000000000000180 .L0 
     /tmp/ccTZgZex.s:390    .text:0000000000000184 .L0 
  src/../h/riscv.hpp:110    .text:0000000000000184 .L0 
     /tmp/ccTZgZex.s:397    .text:0000000000000188 .L0 
     /tmp/ccTZgZex.s:403    .text:000000000000018c .L0 
     /tmp/ccTZgZex.s:404    .text:000000000000018c .L0 
     /tmp/ccTZgZex.s:408    .text:0000000000000194 .L0 
     /tmp/ccTZgZex.s:409    .text:0000000000000198 .L0 
     /tmp/ccTZgZex.s:416    .text:0000000000000198 .L0 
     /tmp/ccTZgZex.s:244    .text:00000000000000e4 .L0 
     /tmp/ccTZgZex.s:338    .text:000000000000013c .L0 
     /tmp/ccTZgZex.s:345    .text:0000000000000150 .L0 
     /tmp/ccTZgZex.s:361    .text:0000000000000164 .L0 
     /tmp/ccTZgZex.s:204    .text:00000000000000c8 .L10
     /tmp/ccTZgZex.s:318    .text:0000000000000134 .L11
     /tmp/ccTZgZex.s:399    .text:000000000000018c .L12
     /tmp/ccTZgZex.s:266    .text:0000000000000104 .L13
     /tmp/ccTZgZex.s:293    .text:000000000000011c .L14
     /tmp/ccTZgZex.s:188    .text:00000000000000b4 .L3
     /tmp/ccTZgZex.s:1423   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccTZgZex.s:2671   .debug_str:000000000000056a .LASF106
     /tmp/ccTZgZex.s:2623   .debug_str:0000000000000409 .LASF107
     /tmp/ccTZgZex.s:2539   .debug_str:000000000000018b .LASF108
     /tmp/ccTZgZex.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccTZgZex.s:412    .text:0000000000000198 .Letext0
     /tmp/ccTZgZex.s:2475   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccTZgZex.s:2599   .debug_str:000000000000038c .LASF0
     /tmp/ccTZgZex.s:2617   .debug_str:00000000000003d8 .LASF1
     /tmp/ccTZgZex.s:2587   .debug_str:0000000000000335 .LASF2
     /tmp/ccTZgZex.s:2563   .debug_str:000000000000027f .LASF4
     /tmp/ccTZgZex.s:2651   .debug_str:00000000000004d3 .LASF3
     /tmp/ccTZgZex.s:2499   .debug_str:000000000000006e .LASF5
     /tmp/ccTZgZex.s:2621   .debug_str:00000000000003f6 .LASF6
     /tmp/ccTZgZex.s:2597   .debug_str:0000000000000379 .LASF7
     /tmp/ccTZgZex.s:2675   .debug_str:000000000000063d .LASF8
     /tmp/ccTZgZex.s:2551   .debug_str:0000000000000204 .LASF9
     /tmp/ccTZgZex.s:2629   .debug_str:000000000000044b .LASF10
     /tmp/ccTZgZex.s:2673   .debug_str:000000000000062e .LASF11
     /tmp/ccTZgZex.s:2501   .debug_str:0000000000000075 .LASF12
     /tmp/ccTZgZex.s:2483   .debug_str:0000000000000018 .LASF13
     /tmp/ccTZgZex.s:2509   .debug_str:00000000000000bf .LASF14
     /tmp/ccTZgZex.s:2645   .debug_str:000000000000049f .LASF15
GAS LISTING /tmp/ccTZgZex.s 			page 18


     /tmp/ccTZgZex.s:2515   .debug_str:00000000000000dd .LASF16
     /tmp/ccTZgZex.s:2613   .debug_str:00000000000003c7 .LASF56
     /tmp/ccTZgZex.s:2577   .debug_str:00000000000002e8 .LASF109
     /tmp/ccTZgZex.s:2661   .debug_str:000000000000051d .LASF17
     /tmp/ccTZgZex.s:2611   .debug_str:00000000000003be .LASF18
     /tmp/ccTZgZex.s:2571   .debug_str:00000000000002b5 .LASF19
     /tmp/ccTZgZex.s:2643   .debug_str:0000000000000494 .LASF52
     /tmp/ccTZgZex.s:2699   .debug_str:00000000000006ed .LASF54
     /tmp/ccTZgZex.s:2485   .debug_str:0000000000000028 .LASF20
     /tmp/ccTZgZex.s:2529   .debug_str:0000000000000142 .LASF22
     /tmp/ccTZgZex.s:2525   .debug_str:0000000000000131 .LASF24
     /tmp/ccTZgZex.s:2523   .debug_str:000000000000011c .LASF26
     /tmp/ccTZgZex.s:2655   .debug_str:00000000000004f6 .LASF21
     /tmp/ccTZgZex.s:2633   .debug_str:0000000000000463 .LASF23
     /tmp/ccTZgZex.s:2669   .debug_str:0000000000000563 .LASF25
     /tmp/ccTZgZex.s:2665   .debug_str:000000000000053e .LASF27
     /tmp/ccTZgZex.s:2543   .debug_str:00000000000001bc .LASF28
     /tmp/ccTZgZex.s:2517   .debug_str:00000000000000f3 .LASF29
     /tmp/ccTZgZex.s:2479   .debug_str:0000000000000007 .LASF30
     /tmp/ccTZgZex.s:2555   .debug_str:0000000000000228 .LASF31
     /tmp/ccTZgZex.s:2497   .debug_str:0000000000000066 .LASF32
     /tmp/ccTZgZex.s:2503   .debug_str:0000000000000085 .LASF33
     /tmp/ccTZgZex.s:2703   .debug_str:0000000000000710 .LASF34
     /tmp/ccTZgZex.s:2531   .debug_str:0000000000000157 .LASF35
     /tmp/ccTZgZex.s:2601   .debug_str:0000000000000399 .LASF36
     /tmp/ccTZgZex.s:2695   .debug_str:00000000000006d5 .LASF37
     /tmp/ccTZgZex.s:2493   .debug_str:0000000000000046 .LASF38
     /tmp/ccTZgZex.s:2541   .debug_str:00000000000001a9 .LASF39
     /tmp/ccTZgZex.s:2545   .debug_str:00000000000001c4 .LASF40
     /tmp/ccTZgZex.s:2667   .debug_str:0000000000000551 .LASF41
     /tmp/ccTZgZex.s:2491   .debug_str:0000000000000040 .LASF42
     /tmp/ccTZgZex.s:2709   .debug_str:0000000000000734 .LASF43
     /tmp/ccTZgZex.s:2701   .debug_str:0000000000000705 .LASF44
     /tmp/ccTZgZex.s:2649   .debug_str:00000000000004bb .LASF45
     /tmp/ccTZgZex.s:2615   .debug_str:00000000000003cd .LASF46
     /tmp/ccTZgZex.s:2663   .debug_str:0000000000000526 .LASF47
     /tmp/ccTZgZex.s:2507   .debug_str:00000000000000b5 .LASF48
     /tmp/ccTZgZex.s:2559   .debug_str:0000000000000241 .LASF49
     /tmp/ccTZgZex.s:2591   .debug_str:000000000000034f .LASF50
     /tmp/ccTZgZex.s:2553   .debug_str:0000000000000212 .LASF51
     /tmp/ccTZgZex.s:2657   .debug_str:00000000000004fd .LASF53
     /tmp/ccTZgZex.s:2505   .debug_str:0000000000000099 .LASF55
     /tmp/ccTZgZex.s:2681   .debug_str:000000000000065e .LASF74
     /tmp/ccTZgZex.s:2575   .debug_str:00000000000002c6 .LASF76
     /tmp/ccTZgZex.s:2489   .debug_str:0000000000000038 .LASF83
     /tmp/ccTZgZex.s:2557   .debug_str:000000000000023c .LASF57
     /tmp/ccTZgZex.s:2635   .debug_str:0000000000000476 .LASF59
     /tmp/ccTZgZex.s:2625   .debug_str:0000000000000417 .LASF61
     /tmp/ccTZgZex.s:2549   .debug_str:00000000000001ed .LASF63
     /tmp/ccTZgZex.s:2589   .debug_str:0000000000000343 .LASF58
     /tmp/ccTZgZex.s:2705   .debug_str:0000000000000718 .LASF60
     /tmp/ccTZgZex.s:2583   .debug_str:000000000000031a .LASF62
     /tmp/ccTZgZex.s:2495   .debug_str:000000000000004d .LASF64
     /tmp/ccTZgZex.s:2513   .debug_str:00000000000000d0 .LASF65
     /tmp/ccTZgZex.s:2581   .debug_str:00000000000002fe .LASF66
     /tmp/ccTZgZex.s:2639   .debug_str:000000000000048a .LASF110
     /tmp/ccTZgZex.s:2647   .debug_str:00000000000004b5 .LASF67
GAS LISTING /tmp/ccTZgZex.s 			page 19


     /tmp/ccTZgZex.s:2593   .debug_str:0000000000000359 .LASF68
     /tmp/ccTZgZex.s:2527   .debug_str:000000000000013a .LASF111
     /tmp/ccTZgZex.s:2659   .debug_str:000000000000050c .LASF112
     /tmp/ccTZgZex.s:2569   .debug_str:00000000000002b0 .LASF69
     /tmp/ccTZgZex.s:2605   .debug_str:00000000000003a9 .LASF70
     /tmp/ccTZgZex.s:2573   .debug_str:00000000000002be .LASF71
     /tmp/ccTZgZex.s:2609   .debug_str:00000000000003b4 .LASF72
     /tmp/ccTZgZex.s:2567   .debug_str:00000000000002a7 .LASF73
     /tmp/ccTZgZex.s:2585   .debug_str:0000000000000327 .LASF75
     /tmp/ccTZgZex.s:2687   .debug_str:00000000000006a2 .LASF77
     /tmp/ccTZgZex.s:2685   .debug_str:0000000000000694 .LASF113
     /tmp/ccTZgZex.s:2561   .debug_str:0000000000000257 .LASF114
     /tmp/ccTZgZex.s:2603   .debug_str:00000000000003a0 .LASF78
     /tmp/ccTZgZex.s:2533   .debug_str:000000000000016b .LASF79
     /tmp/ccTZgZex.s:2653   .debug_str:00000000000004e5 .LASF89
     /tmp/ccTZgZex.s:2579   .debug_str:00000000000002f3 .LASF80
     /tmp/ccTZgZex.s:2689   .debug_str:00000000000006bb .LASF81
     /tmp/ccTZgZex.s:2535   .debug_str:000000000000017e .LASF82
     /tmp/ccTZgZex.s:2537   .debug_str:0000000000000183 .LASF84
     /tmp/ccTZgZex.s:2511   .debug_str:00000000000000cb .LASF85
     /tmp/ccTZgZex.s:2693   .debug_str:00000000000006d0 .LASF86
     /tmp/ccTZgZex.s:2641   .debug_str:000000000000048f .LASF87
     /tmp/ccTZgZex.s:2595   .debug_str:0000000000000369 .LASF88
     /tmp/ccTZgZex.s:2481   .debug_str:000000000000000f .LASF90
     /tmp/ccTZgZex.s:2477   .debug_str:0000000000000000 .LASF91
     /tmp/ccTZgZex.s:2519   .debug_str:0000000000000107 .LASF92
     /tmp/ccTZgZex.s:2691   .debug_str:00000000000006c6 .LASF93
     /tmp/ccTZgZex.s:2627   .debug_str:0000000000000422 .LASF94
     /tmp/ccTZgZex.s:2619   .debug_str:00000000000003eb .LASF95
     /tmp/ccTZgZex.s:2547   .debug_str:00000000000001ca .LASF96
     /tmp/ccTZgZex.s:2677   .debug_str:000000000000064d .LASF97
     /tmp/ccTZgZex.s:2683   .debug_str:0000000000000673 .LASF98
     /tmp/ccTZgZex.s:2631   .debug_str:000000000000045a .LASF99
     /tmp/ccTZgZex.s:2565   .debug_str:0000000000000286 .LASF100
     /tmp/ccTZgZex.s:46     .text:0000000000000020 .LFB34
     /tmp/ccTZgZex.s:410    .text:0000000000000198 .LFE34
     /tmp/ccTZgZex.s:2607   .debug_str:00000000000003af .LASF101
     /tmp/ccTZgZex.s:2637   .debug_str:0000000000000482 .LASF102
     /tmp/ccTZgZex.s:2349   .debug_loc:0000000000000000 .LLST0
     /tmp/ccTZgZex.s:2487   .debug_str:0000000000000031 .LASF103
     /tmp/ccTZgZex.s:2360   .debug_loc:0000000000000036 .LLST1
     /tmp/ccTZgZex.s:270    .text:0000000000000104 .LBB41
     /tmp/ccTZgZex.s:290    .text:0000000000000118 .LBE41
     /tmp/ccTZgZex.s:2403   .debug_loc:00000000000000e6 .LLST5
     /tmp/ccTZgZex.s:2679   .debug_str:0000000000000657 .LASF104
     /tmp/ccTZgZex.s:276    .text:0000000000000110 .LVL11
     /tmp/ccTZgZex.s:295    .text:000000000000011c .LBB40
     /tmp/ccTZgZex.s:315    .text:0000000000000130 .LBE40
     /tmp/ccTZgZex.s:2411   .debug_loc:000000000000010b .LLST4
     /tmp/ccTZgZex.s:301    .text:0000000000000128 .LVL14
     /tmp/ccTZgZex.s:103    .text:0000000000000054 .LBB26
     /tmp/ccTZgZex.s:119    .text:0000000000000060 .LBE26
     /tmp/ccTZgZex.s:125    .text:0000000000000068 .LBB28
     /tmp/ccTZgZex.s:140    .text:0000000000000074 .LBE28
     /tmp/ccTZgZex.s:153    .text:000000000000007c .LBB30
     /tmp/ccTZgZex.s:169    .text:0000000000000088 .LBE30
     /tmp/ccTZgZex.s:212    .text:00000000000000cc .LBB34
GAS LISTING /tmp/ccTZgZex.s 			page 20


     /tmp/ccTZgZex.s:223    .text:00000000000000d0 .LBE34
     /tmp/ccTZgZex.s:2419   .debug_loc:0000000000000130 .LLST2
     /tmp/ccTZgZex.s:254    .text:00000000000000fc .LBB38
     /tmp/ccTZgZex.s:268    .text:0000000000000104 .LBE38
     /tmp/ccTZgZex.s:2426   .debug_loc:0000000000000153 .LLST3
     /tmp/ccTZgZex.s:323    .text:0000000000000134 .LBB45
     /tmp/ccTZgZex.s:335    .text:000000000000013c .LBE45
     /tmp/ccTZgZex.s:2433   .debug_loc:0000000000000176 .LLST6
     /tmp/ccTZgZex.s:348    .text:000000000000015c .LBB47
     /tmp/ccTZgZex.s:356    .text:0000000000000160 .LBE47
     /tmp/ccTZgZex.s:2441   .debug_loc:000000000000019a .LLST7
     /tmp/ccTZgZex.s:371    .text:000000000000017c .LBB49
     /tmp/ccTZgZex.s:382    .text:0000000000000180 .LBE49
     /tmp/ccTZgZex.s:2448   .debug_loc:00000000000001bd .LLST8
     /tmp/ccTZgZex.s:387    .text:0000000000000184 .LBB51
     /tmp/ccTZgZex.s:401    .text:000000000000018c .LBE51
     /tmp/ccTZgZex.s:2455   .debug_loc:00000000000001e0 .LLST9
     /tmp/ccTZgZex.s:249    .text:00000000000000f8 .LVL8
     /tmp/ccTZgZex.s:366    .text:0000000000000178 .LVL21
     /tmp/ccTZgZex.s:405    .text:0000000000000194 .LVL26
     /tmp/ccTZgZex.s:10     .text:0000000000000000 .LFB33
     /tmp/ccTZgZex.s:40     .text:0000000000000020 .LFE33
     /tmp/ccTZgZex.s:2697   .debug_str:00000000000006e8 .LASF115
     /tmp/ccTZgZex.s:2707   .debug_str:000000000000072f .LASF105
     /tmp/ccTZgZex.s:2521   .debug_str:000000000000010c .LASF116
     /tmp/ccTZgZex.s:150    .text:000000000000007c .LVL0
     /tmp/ccTZgZex.s:199    .text:00000000000000c0 .LVL3
     /tmp/ccTZgZex.s:203    .text:00000000000000c8 .LVL4
     /tmp/ccTZgZex.s:167    .text:0000000000000088 .LVL1
     /tmp/ccTZgZex.s:187    .text:00000000000000b4 .LVL2
     /tmp/ccTZgZex.s:230    .text:00000000000000d8 .LVL7
     /tmp/ccTZgZex.s:265    .text:0000000000000104 .LVL10
     /tmp/ccTZgZex.s:292    .text:000000000000011c .LVL13
     /tmp/ccTZgZex.s:317    .text:0000000000000134 .LVL16
     /tmp/ccTZgZex.s:339    .text:0000000000000144 .LVL18
     /tmp/ccTZgZex.s:398    .text:000000000000018c .LVL25
     /tmp/ccTZgZex.s:211    .text:00000000000000cc .LVL5
     /tmp/ccTZgZex.s:220    .text:00000000000000d0 .LVL6
     /tmp/ccTZgZex.s:253    .text:00000000000000fc .LVL9
     /tmp/ccTZgZex.s:332    .text:000000000000013c .LVL17
     /tmp/ccTZgZex.s:347    .text:000000000000015c .LVL19
     /tmp/ccTZgZex.s:354    .text:0000000000000160 .LVL20
     /tmp/ccTZgZex.s:370    .text:000000000000017c .LVL22
     /tmp/ccTZgZex.s:379    .text:0000000000000180 .LVL23
     /tmp/ccTZgZex.s:386    .text:0000000000000184 .LVL24
     /tmp/ccTZgZex.s:417    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3TCB7runningE
console_handler
