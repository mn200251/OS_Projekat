GAS LISTING /tmp/ccS0rjrr.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB16:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** 
   2:src/riscv.cpp **** #include "../h/riscv.hpp"
   3:src/riscv.cpp **** #include "../lib/console.h"
   4:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   5:src/riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   6:src/riscv.cpp **** 
   7:src/riscv.cpp **** void Riscv::popSppSpie()
   8:src/riscv.cpp **** {
  12              		.loc 1 8 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
   9:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 9 5
  21              		.loc 1 9 38 is_stmt 0
  22              	#APP
  23              	# 9 "src/riscv.cpp" 1
  10              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 10 5 is_stmt 1
  27              		.loc 1 10 29 is_stmt 0
  28              	# 10 "src/riscv.cpp" 1
  11              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 11 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE16:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB17:
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  14:src/riscv.cpp **** {
GAS LISTING /tmp/ccS0rjrr.s 			page 2


  47              		.loc 1 14 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101F7 		addi	sp,sp,-144
  50              		.cfi_def_cfa_offset 144
  51 0024 23341108 		sd	ra,136(sp)
  52 0028 23308108 		sd	s0,128(sp)
  53 002c 233C9106 		sd	s1,120(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56              		.cfi_offset 9, -24
  57 0030 13040109 		addi	s0,sp,144
  58              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     uint64 a[8];
  59              		.loc 1 15 5
  16:src/riscv.cpp ****     asm volatile("sd a0, %0" : "=m" (a[0]));
  60              		.loc 1 16 5
  61              		.loc 1 16 44 is_stmt 0
  62              	#APP
  63              	# 16 "src/riscv.cpp" 1
  17              	    asm volatile("sd a1, %0" : "=m" (a[1]));
  64              		sd a0, -96(s0)
  65              	# 0 "" 2
  66              		.loc 1 17 5 is_stmt 1
  67              		.loc 1 17 44 is_stmt 0
  68              	# 17 "src/riscv.cpp" 1
  18              	    asm volatile("sd a2, %0" : "=m" (a[2]));
  69              		sd a1, -88(s0)
  70              	# 0 "" 2
  71              		.loc 1 18 5 is_stmt 1
  72              		.loc 1 18 44 is_stmt 0
  73              	# 18 "src/riscv.cpp" 1
  19              	    asm volatile("sd a3, %0" : "=m" (a[3]));
  74              		sd a2, -80(s0)
  75              	# 0 "" 2
  76              		.loc 1 19 5 is_stmt 1
  77              		.loc 1 19 44 is_stmt 0
  78              	# 19 "src/riscv.cpp" 1
  20              	    asm volatile("sd a4, %0" : "=m" (a[4]));
  79              		sd a3, -72(s0)
  80              	# 0 "" 2
  81              		.loc 1 20 5 is_stmt 1
  82              		.loc 1 20 44 is_stmt 0
  83              	# 20 "src/riscv.cpp" 1
  21              	    asm volatile("sd a5, %0" : "=m" (a[5]));
  84              		sd a4, -64(s0)
  85              	# 0 "" 2
  86              		.loc 1 21 5 is_stmt 1
  87              		.loc 1 21 44 is_stmt 0
  88              	# 21 "src/riscv.cpp" 1
  22              	    asm volatile("sd a6, %0" : "=m" (a[6]));
  89              		sd a5, -56(s0)
  90              	# 0 "" 2
  91              		.loc 1 22 5 is_stmt 1
  92              		.loc 1 22 44 is_stmt 0
  93              	# 22 "src/riscv.cpp" 1
  23              	    asm volatile("sd a7, %0" : "=m" (a[7]));
  94              		sd a6, -48(s0)
GAS LISTING /tmp/ccS0rjrr.s 			page 3


  95              	# 0 "" 2
  96              		.loc 1 23 5 is_stmt 1
  97              		.loc 1 23 44 is_stmt 0
  98              	# 23 "src/riscv.cpp" 1
  24              	
  25:src/riscv.cpp ****     uint64 volatile sepc = r_sepc();
  99              		sd a7, -40(s0)
 100              	# 0 "" 2
 101              		.loc 1 25 5 is_stmt 1
 102              	#NO_APP
 103              	.LBB30:
 104              	.LBB31:
 105              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** 
   2:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   3:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #include "../lib/hw.h"
   6:src/../h/riscv.hpp **** 
   7:src/../h/riscv.hpp **** class Riscv
   8:src/../h/riscv.hpp **** {
   9:src/../h/riscv.hpp **** public:
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  12:src/../h/riscv.hpp ****     static void popSppSpie();
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // read register scause
  15:src/../h/riscv.hpp ****     static uint64 r_scause();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // write register scause
  18:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // read register sepc
  21:src/../h/riscv.hpp ****     static uint64 r_sepc();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // write register sepc
  24:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // read register stvec
  27:src/../h/riscv.hpp ****     static uint64 r_stvec();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // write register stvec
  30:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // read register stval
  33:src/../h/riscv.hpp ****     static uint64 r_stval();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // write register stval
  36:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     enum BitMaskSip
  39:src/../h/riscv.hpp ****     {
  40:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  41:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  42:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  43:src/../h/riscv.hpp ****     };
  44:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccS0rjrr.s 			page 4


  45:src/../h/riscv.hpp ****     // mask set register sip
  46:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask clear register sip
  49:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // read register sip
  52:src/../h/riscv.hpp ****     static uint64 r_sip();
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // write register sip
  55:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     enum BitMaskSstatus
  58:src/../h/riscv.hpp ****     {
  59:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  60:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  61:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  62:src/../h/riscv.hpp ****     };
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // mask set register sstatus
  65:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask clear register sstatus
  68:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // read register sstatus
  71:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // write register sstatus
  74:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // supervisor trap
  77:src/../h/riscv.hpp ****     static void supervisorTrap();
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp **** private:
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // supervisor trap handler
  82:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp **** };
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  87:src/../h/riscv.hpp **** {
  88:src/../h/riscv.hpp ****     uint64 volatile scause;
  89:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  90:src/../h/riscv.hpp ****     return scause;
  91:src/../h/riscv.hpp **** }
  92:src/../h/riscv.hpp **** 
  93:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  94:src/../h/riscv.hpp **** {
  95:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  96:src/../h/riscv.hpp **** }
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
  99:src/../h/riscv.hpp **** {
 100:src/../h/riscv.hpp ****     uint64 volatile sepc;
 106              		.loc 2 100 5
GAS LISTING /tmp/ccS0rjrr.s 			page 5


 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 107              		.loc 2 101 5
 108              		.loc 2 101 64 is_stmt 0
 109              	#APP
 110              	# 101 "src/../h/riscv.hpp" 1
 102              	    return sepc;
 111              		csrr a5, sepc
 112              	# 0 "" 2
 113              	#NO_APP
 114 0058 2334F4F8 		sd	a5,-120(s0)
 115              		.loc 2 102 5 is_stmt 1
 116              		.loc 2 102 12 is_stmt 0
 117 005c 833784F8 		ld	a5,-120(s0)
 118              	.LBE31:
 119              	.LBE30:
 120              		.loc 1 25 35
 121 0060 233CF4F8 		sd	a5,-104(s0)
  26:src/riscv.cpp ****     uint64 volatile sstatus = r_sstatus();
 122              		.loc 1 26 5 is_stmt 1
 123              	.LBB32:
 124              	.LBB33:
 103:src/../h/riscv.hpp **** }
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 106:src/../h/riscv.hpp **** {
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 108:src/../h/riscv.hpp **** }
 109:src/../h/riscv.hpp **** 
 110:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 111:src/../h/riscv.hpp **** {
 112:src/../h/riscv.hpp ****     uint64 volatile stvec;
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 114:src/../h/riscv.hpp ****     return stvec;
 115:src/../h/riscv.hpp **** }
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 118:src/../h/riscv.hpp **** {
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 120:src/../h/riscv.hpp **** }
 121:src/../h/riscv.hpp **** 
 122:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 123:src/../h/riscv.hpp **** {
 124:src/../h/riscv.hpp ****     uint64 volatile stval;
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 126:src/../h/riscv.hpp ****     return stval;
 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 130:src/../h/riscv.hpp **** {
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 132:src/../h/riscv.hpp **** }
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 135:src/../h/riscv.hpp **** {
 136:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 137:src/../h/riscv.hpp **** }
 138:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccS0rjrr.s 			page 6


 139:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 140:src/../h/riscv.hpp **** {
 141:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 142:src/../h/riscv.hpp **** }
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 145:src/../h/riscv.hpp **** {
 146:src/../h/riscv.hpp ****     uint64 volatile sip;
 147:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 148:src/../h/riscv.hpp ****     return sip;
 149:src/../h/riscv.hpp **** }
 150:src/../h/riscv.hpp **** 
 151:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 152:src/../h/riscv.hpp **** {
 153:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 154:src/../h/riscv.hpp **** }
 155:src/../h/riscv.hpp **** 
 156:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 157:src/../h/riscv.hpp **** {
 158:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 159:src/../h/riscv.hpp **** }
 160:src/../h/riscv.hpp **** 
 161:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 162:src/../h/riscv.hpp **** {
 163:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 164:src/../h/riscv.hpp **** }
 165:src/../h/riscv.hpp **** 
 166:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 167:src/../h/riscv.hpp **** {
 168:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 125              		.loc 2 168 5
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 126              		.loc 2 169 5
 127              		.loc 2 169 76 is_stmt 0
 128              	#APP
 129              	# 169 "src/../h/riscv.hpp" 1
 170              	    return sstatus;
 130              		csrr a5, sstatus
 131              	# 0 "" 2
 132              	#NO_APP
 133 0068 2330F4F8 		sd	a5,-128(s0)
 134              		.loc 2 170 5 is_stmt 1
 135              		.loc 2 170 12 is_stmt 0
 136 006c 833704F8 		ld	a5,-128(s0)
 137              	.LBE33:
 138              	.LBE32:
 139              		.loc 1 26 41
 140 0070 2338F4F8 		sd	a5,-112(s0)
  27:src/riscv.cpp **** 
  28:src/riscv.cpp ****     // retrieve stack pointer relative to saved registers
  29:src/riscv.cpp ****     void* SP;
 141              		.loc 1 29 5 is_stmt 1
  30:src/riscv.cpp ****     asm volatile("csrr %0, sscratch" : "=r" (SP));
 142              		.loc 1 30 5
 143              		.loc 1 30 50 is_stmt 0
 144              	#APP
 145              	# 30 "src/riscv.cpp" 1
GAS LISTING /tmp/ccS0rjrr.s 			page 7


  31              	
 146              		csrr s1, sscratch
 147              	# 0 "" 2
 148              	.LVL0:
  32:src/riscv.cpp ****     uint64 scause = r_scause();
 149              		.loc 1 32 5 is_stmt 1
 150              	#NO_APP
 151              	.LBB34:
 152              	.LBB35:
  88:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 153              		.loc 2 88 5
  89:src/../h/riscv.hpp ****     return scause;
 154              		.loc 2 89 5
  89:src/../h/riscv.hpp ****     return scause;
 155              		.loc 2 89 72 is_stmt 0
 156              	#APP
 157              	# 89 "src/../h/riscv.hpp" 1
 158              		csrr a5, scause
 159              	# 0 "" 2
 160              	#NO_APP
 161 007c 233CF4F6 		sd	a5,-136(s0)
  90:src/../h/riscv.hpp **** }
 162              		.loc 2 90 5 is_stmt 1
  90:src/../h/riscv.hpp **** }
 163              		.loc 2 90 12 is_stmt 0
 164 0080 033784F7 		ld	a4,-136(s0)
 165              	.LVL1:
 166              	.LBE35:
 167              	.LBE34:
  33:src/riscv.cpp **** 
  34:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 168              		.loc 1 34 5 is_stmt 1
 169              	.LBB36:
 170              		.loc 1 34 40 is_stmt 0
 171 0084 930687FF 		addi	a3,a4,-8
 172              		.loc 1 34 5
 173 0088 93071000 		li	a5,1
 174 008c 63FCD702 		bleu	a3,a5,.L12
  35:src/riscv.cpp ****     {
  36:src/riscv.cpp ****         w_sepc(sepc + 4);
  37:src/riscv.cpp **** 
  38:src/riscv.cpp ****         // mem_alloc
  39:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
  40:src/riscv.cpp ****         {
  41:src/riscv.cpp ****             // get the size argument
  42:src/riscv.cpp ****             size_t size = reinterpret_cast<size_t>(a[1]);
  43:src/riscv.cpp **** 
  44:src/riscv.cpp ****             size_t blockNum = MemoryAllocator::convert2Blocks(size);
  45:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(blockNum);
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****             // retVal should already be in a0 but just in case
  48:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  49:src/riscv.cpp **** 
  50:src/riscv.cpp ****             // put the return value on the stack
  51:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
  52:src/riscv.cpp ****             // asm volatile("sd a0, 0x50(%0)" : : "r" (SP));
  53:src/riscv.cpp ****         }
GAS LISTING /tmp/ccS0rjrr.s 			page 8


  54:src/riscv.cpp ****         // mem_free
  55:src/riscv.cpp ****         else if (a[0] == 0x0000000000000002UL)
  56:src/riscv.cpp ****         {
  57:src/riscv.cpp ****             // get the ptr argument
  58:src/riscv.cpp ****             void* ptr = reinterpret_cast<void *>(a[1]);
  59:src/riscv.cpp **** 
  60:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
  61:src/riscv.cpp **** 
  62:src/riscv.cpp ****             // retVal should already be in a0 but just in case
  63:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  64:src/riscv.cpp **** 
  65:src/riscv.cpp ****             // put the return value on the stack
  66:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
  67:src/riscv.cpp ****             // asm volatile("sd a0, 0x50(%0)" : : "r" (SP));
  68:src/riscv.cpp ****         }
  69:src/riscv.cpp ****         // thread_create
  70:src/riscv.cpp ****         else if (a[0] == 0x0000000000000011UL)
  71:src/riscv.cpp ****         {
  72:src/riscv.cpp ****             thread_t* handle = reinterpret_cast<thread_t *>(a[1]);
  73:src/riscv.cpp ****             void(*start_routine)(void*) = reinterpret_cast<void (*)(void *)>(a[2]);
  74:src/riscv.cpp ****             void* arg = reinterpret_cast<void *>(a[3]);
  75:src/riscv.cpp ****             void* stack_space = reinterpret_cast<void *>(a[4]);
  76:src/riscv.cpp **** 
  77:src/riscv.cpp ****             int retVal = _thread::threadCreate(handle, start_routine, arg, stack_space);
  78:src/riscv.cpp **** 
  79:src/riscv.cpp ****             // retVal should already be in a0 but just in case
  80:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  81:src/riscv.cpp **** 
  82:src/riscv.cpp ****             // put the return value on the stack
  83:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
  84:src/riscv.cpp ****         }
  85:src/riscv.cpp ****         // thread_exit
  86:src/riscv.cpp ****         else if (a[0] == 0x0000000000000012UL)
  87:src/riscv.cpp ****         {
  88:src/riscv.cpp ****             _thread::running->finished = true;
  89:src/riscv.cpp **** 
  90:src/riscv.cpp ****             _thread::threadDispatch();
  91:src/riscv.cpp **** 
  92:src/riscv.cpp ****             int retVal;
  93:src/riscv.cpp **** 
  94:src/riscv.cpp ****             // return error code if thread didn't exit
  95:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  96:src/riscv.cpp ****         }
  97:src/riscv.cpp ****         // thread_dispatch
  98:src/riscv.cpp ****         else if (a[0] == 0x0000000000000013UL)
  99:src/riscv.cpp ****         {
 100:src/riscv.cpp ****             // sepc and sstatus already saved
 101:src/riscv.cpp ****             // seps already added +4
 102:src/riscv.cpp **** 
 103:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 104:src/riscv.cpp **** 
 105:src/riscv.cpp ****             _thread::threadDispatch();
 106:src/riscv.cpp **** 
 107:src/riscv.cpp ****             w_sstatus(sstatus);
 108:src/riscv.cpp ****             w_sepc(sepc);
 109:src/riscv.cpp **** 
 110:src/riscv.cpp ****             // nothing to return
GAS LISTING /tmp/ccS0rjrr.s 			page 9


 111:src/riscv.cpp ****         }
 112:src/riscv.cpp ****         else
 113:src/riscv.cpp ****         {
 114:src/riscv.cpp **** 
 115:src/riscv.cpp ****         }
 116:src/riscv.cpp ****     }
 117:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 175              		.loc 1 117 10 is_stmt 1
 176 0090 9307F0FF 		li	a5,-1
 177 0094 9397F703 		slli	a5,a5,63
 178 0098 93871700 		addi	a5,a5,1
 179 009c 6306F710 		beq	a4,a5,.L13
 118:src/riscv.cpp ****     {
 119:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 120:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 121:src/riscv.cpp ****         _thread::running->timeSlice++;
 122:src/riscv.cpp ****         if (DEFAULT_TIME_SLICE >= _thread::running->timeSlice)
 123:src/riscv.cpp ****         {
 124:src/riscv.cpp ****             // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
 125:src/riscv.cpp ****             // uint64 volatile sepc = r_sepc() + 4;
 126:src/riscv.cpp ****             // uint64 volatile sstatus = r_sstatus();
 127:src/riscv.cpp ****             sepc = sepc + 4;
 128:src/riscv.cpp **** 
 129:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 130:src/riscv.cpp ****             _thread::threadDispatch();
 131:src/riscv.cpp ****             w_sstatus(sstatus);
 132:src/riscv.cpp ****             w_sepc(sepc);
 133:src/riscv.cpp ****         }
 134:src/riscv.cpp ****     }
 135:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 180              		.loc 1 135 10
 181 00a0 9307F0FF 		li	a5,-1
 182 00a4 9397F703 		slli	a5,a5,63
 183 00a8 93879700 		addi	a5,a5,9
 184 00ac 6306F714 		beq	a4,a5,.L14
 185              	.LVL2:
 186              	.L3:
 187              	.LBE36:
 136:src/riscv.cpp ****     {
 137:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 138:src/riscv.cpp ****         console_handler();
 139:src/riscv.cpp ****     }
 140:src/riscv.cpp ****     else
 141:src/riscv.cpp ****     {
 142:src/riscv.cpp ****         // unexpected trap cause
 143:src/riscv.cpp ****     }
 144:src/riscv.cpp **** }...
 188              		.loc 1 144 1 is_stmt 0
 189 00b0 83308108 		ld	ra,136(sp)
 190              		.cfi_remember_state
 191              		.cfi_restore 1
 192 00b4 03340108 		ld	s0,128(sp)
 193              		.cfi_restore 8
 194              		.cfi_def_cfa 2, 144
 195 00b8 83348107 		ld	s1,120(sp)
 196              		.cfi_restore 9
 197              	.LVL3:
GAS LISTING /tmp/ccS0rjrr.s 			page 10


 198 00bc 13010109 		addi	sp,sp,144
 199              		.cfi_def_cfa_offset 0
 200 00c0 67800000 		jr	ra
 201              	.LVL4:
 202              	.L12:
 203              		.cfi_restore_state
 204              	.LBB70:
 205              	.LBB37:
  36:src/riscv.cpp ****         w_sepc(sepc + 4);
 206              		.loc 1 36 9 is_stmt 1
  36:src/riscv.cpp ****         w_sepc(sepc + 4);
 207              		.loc 1 36 16 is_stmt 0
 208 00c4 833784F9 		ld	a5,-104(s0)
  36:src/riscv.cpp ****         w_sepc(sepc + 4);
 209              		.loc 1 36 15
 210 00c8 93874700 		addi	a5,a5,4
 211              	.LVL5:
 212              	.LBB38:
 213              	.LBB39:
 107:src/../h/riscv.hpp **** }
 214              		.loc 2 107 5 is_stmt 1
 107:src/../h/riscv.hpp **** }
 215              		.loc 2 107 65 is_stmt 0
 216              	#APP
 217              	# 107 "src/../h/riscv.hpp" 1
 218              		csrw sepc, a5
 219              	# 0 "" 2
 220              	.LVL6:
 221              	#NO_APP
 222              	.LBE39:
 223              	.LBE38:
  39:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 224              		.loc 1 39 9 is_stmt 1
 225              	.LBB40:
  39:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 226              		.loc 1 39 16 is_stmt 0
 227 00d0 833704FA 		ld	a5,-96(s0)
  39:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 228              		.loc 1 39 9
 229 00d4 13071000 		li	a4,1
 230              	.LVL7:
 231 00d8 6388E704 		beq	a5,a4,.L15
 232              	.LBE40:
 233              	.LBE37:
 234              	.LBE70:
  55:src/riscv.cpp ****         else if (a[0] == 0x0000000000000002UL)
 235              		.loc 1 55 14 is_stmt 1
 236              	.LBB71:
 237              	.LBB61:
 238              	.LBB58:
 239              	.LBB41:
 240 00dc 13072000 		li	a4,2
 241 00e0 6384E706 		beq	a5,a4,.L16
 242              	.LBE41:
 243              	.LBE58:
 244              	.LBE61:
 245              	.LBE71:
GAS LISTING /tmp/ccS0rjrr.s 			page 11


  70:src/riscv.cpp ****         else if (a[0] == 0x0000000000000011UL)
 246              		.loc 1 70 14
 247              	.LBB72:
 248              	.LBB62:
 249              	.LBB59:
 250              	.LBB54:
 251              	.LBB42:
 252 00e4 13071001 		li	a4,17
 253 00e8 638CE706 		beq	a5,a4,.L17
 254              	.LBE42:
 255              	.LBE54:
 256              	.LBE59:
 257              	.LBE62:
 258              	.LBE72:
  86:src/riscv.cpp ****         else if (a[0] == 0x0000000000000012UL)
 259              		.loc 1 86 14
 260              	.LBB73:
 261              	.LBB63:
 262              	.LBB60:
 263              	.LBB55:
 264              	.LBB51:
 265              	.LBB43:
 266 00ec 13072001 		li	a4,18
 267 00f0 638AE708 		beq	a5,a4,.L18
  98:src/riscv.cpp ****         else if (a[0] == 0x0000000000000013UL)
 268              		.loc 1 98 14
 269 00f4 13073001 		li	a4,19
 270 00f8 E39CE7FA 		bne	a5,a4,.L3
 103:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 271              		.loc 1 103 13
 103:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 272              		.loc 1 103 31 is_stmt 0
 273 00fc 97070000 		la	a5,_ZN7_thread7runningE
 273      83B70700 
 274 0104 83B70700 		ld	a5,0(a5)
 103:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 275              		.loc 1 103 41
 276 0108 23B80702 		sd	zero,48(a5)
 105:src/riscv.cpp ****             _thread::threadDispatch();
 277              		.loc 1 105 13 is_stmt 1
 105:src/riscv.cpp ****             _thread::threadDispatch();
 278              		.loc 1 105 36 is_stmt 0
 279 010c 97000000 		call	_ZN7_thread14threadDispatchEv@plt
 279      E7800000 
 280              	.LVL8:
 107:src/riscv.cpp ****             w_sstatus(sstatus);
 281              		.loc 1 107 13 is_stmt 1
 107:src/riscv.cpp ****             w_sstatus(sstatus);
 282              		.loc 1 107 22 is_stmt 0
 283 0114 833704F9 		ld	a5,-112(s0)
 284              	.LVL9:
 285              	.LBB44:
 286              	.LBB45:
 171:src/../h/riscv.hpp **** }
 172:src/../h/riscv.hpp **** 
 173:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 174:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccS0rjrr.s 			page 12


 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 287              		.loc 2 175 5 is_stmt 1
 288              		.loc 2 175 77 is_stmt 0
 289              	#APP
 290              	# 175 "src/../h/riscv.hpp" 1
 176              	}
 291              		csrw sstatus, a5
 292              	# 0 "" 2
 293              	.LVL10:
 294              	#NO_APP
 295              	.LBE45:
 296              	.LBE44:
 108:src/riscv.cpp ****             w_sepc(sepc);
 297              		.loc 1 108 13 is_stmt 1
 108:src/riscv.cpp ****             w_sepc(sepc);
 298              		.loc 1 108 19 is_stmt 0
 299 011c 833784F9 		ld	a5,-104(s0)
 300              	.LVL11:
 301              	.LBB46:
 302              	.LBB47:
 107:src/../h/riscv.hpp **** }
 303              		.loc 2 107 5 is_stmt 1
 107:src/../h/riscv.hpp **** }
 304              		.loc 2 107 65 is_stmt 0
 305              	#APP
 306              	# 107 "src/../h/riscv.hpp" 1
 108:src/../h/riscv.hpp **** 
 307              		csrw sepc, a5
 308              	# 0 "" 2
 309              		.loc 2 108 1
 310              	#NO_APP
 311 0124 6FF0DFF8 		j	.L3
 312              	.LVL12:
 313              	.L15:
 314              	.LBE47:
 315              	.LBE46:
 316              	.LBE43:
 317              	.LBE51:
 318              	.LBE55:
 319              	.LBB56:
  42:src/riscv.cpp ****             size_t size = reinterpret_cast<size_t>(a[1]);
 320              		.loc 1 42 13 is_stmt 1
  44:src/riscv.cpp ****             size_t blockNum = MemoryAllocator::convert2Blocks(size);
 321              		.loc 1 44 13
  44:src/riscv.cpp ****             size_t blockNum = MemoryAllocator::convert2Blocks(size);
 322              		.loc 1 44 62 is_stmt 0
 323 0128 033584FA 		ld	a0,-88(s0)
 324 012c 97000000 		call	_ZN15MemoryAllocator14convert2BlocksEm@plt
 324      E7800000 
 325              	.LVL13:
  45:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(blockNum);
 326              		.loc 1 45 13 is_stmt 1
  45:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(blockNum);
 327              		.loc 1 45 54 is_stmt 0
 328 0134 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 328      E7800000 
 329              	.LVL14:
GAS LISTING /tmp/ccS0rjrr.s 			page 13


  48:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 330              		.loc 1 48 13 is_stmt 1
  48:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 331              		.loc 1 48 54 is_stmt 0
 332              	#APP
 333              	# 48 "src/riscv.cpp" 1
 334              		mv a5, a0
 335              	# 0 "" 2
 336              	.LVL15:
  51:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 337              		.loc 1 51 13 is_stmt 1
  51:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 338              		.loc 1 51 59 is_stmt 0
 339              	# 51 "src/riscv.cpp" 1
 340              		sd a0, 10 * 8(s1)
 341              	# 0 "" 2
 342              	#NO_APP
 343              	.LBE56:
 344 0144 6FF0DFF6 		j	.L3
 345              	.LVL16:
 346              	.L16:
 347              	.LBB57:
 348              	.LBB52:
  58:src/riscv.cpp ****             void* ptr = reinterpret_cast<void *>(a[1]);
 349              		.loc 1 58 13 is_stmt 1
  60:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
 350              		.loc 1 60 13
  60:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
 351              		.loc 1 60 51 is_stmt 0
 352 0148 033584FA 		ld	a0,-88(s0)
 353 014c 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 353      E7800000 
 354              	.LVL17:
  63:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 355              		.loc 1 63 13 is_stmt 1
  63:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 356              		.loc 1 63 54 is_stmt 0
 357              	#APP
 358              	# 63 "src/riscv.cpp" 1
 359              		mv a5, a0
 360              	# 0 "" 2
 361              	.LVL18:
  66:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 362              		.loc 1 66 13 is_stmt 1
  66:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 363              		.loc 1 66 59 is_stmt 0
 364              	# 66 "src/riscv.cpp" 1
 365              		sd a0, 10 * 8(s1)
 366              	# 0 "" 2
 367              	#NO_APP
 368              	.LBE52:
 369 015c 6FF05FF5 		j	.L3
 370              	.LVL19:
 371              	.L17:
 372              	.LBB53:
 373              	.LBB49:
  72:src/riscv.cpp ****             thread_t* handle = reinterpret_cast<thread_t *>(a[1]);
GAS LISTING /tmp/ccS0rjrr.s 			page 14


 374              		.loc 1 72 13 is_stmt 1
  73:src/riscv.cpp ****             void(*start_routine)(void*) = reinterpret_cast<void (*)(void *)>(a[2]);
 375              		.loc 1 73 13
  74:src/riscv.cpp ****             void* arg = reinterpret_cast<void *>(a[3]);
 376              		.loc 1 74 13
  75:src/riscv.cpp ****             void* stack_space = reinterpret_cast<void *>(a[4]);
 377              		.loc 1 75 13
  77:src/riscv.cpp ****             int retVal = _thread::threadCreate(handle, start_routine, arg, stack_space);
 378              		.loc 1 77 13
  77:src/riscv.cpp ****             int retVal = _thread::threadCreate(handle, start_routine, arg, stack_space);
 379              		.loc 1 77 47 is_stmt 0
 380 0160 833604FC 		ld	a3,-64(s0)
 381              	.LVL20:
 382 0164 033684FB 		ld	a2,-72(s0)
 383 0168 833504FB 		ld	a1,-80(s0)
 384 016c 033584FA 		ld	a0,-88(s0)
 385 0170 97000000 		call	_ZN7_thread12threadCreateEPPS_PFvPvES2_S2_@plt
 385      E7800000 
 386              	.LVL21:
  80:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 387              		.loc 1 80 13 is_stmt 1
  80:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 388              		.loc 1 80 54 is_stmt 0
 389              	#APP
 390              	# 80 "src/riscv.cpp" 1
 391              		mv a5, a0
 392              	# 0 "" 2
 393              	.LVL22:
  83:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 394              		.loc 1 83 13 is_stmt 1
  83:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 395              		.loc 1 83 59 is_stmt 0
 396              	# 83 "src/riscv.cpp" 1
 397              		sd a0, 10 * 8(s1)
 398              	# 0 "" 2
 399              	#NO_APP
 400              	.LBE49:
 401 0180 6FF01FF3 		j	.L3
 402              	.LVL23:
 403              	.L18:
 404              	.LBB50:
 405              	.LBB48:
  88:src/riscv.cpp ****             _thread::running->finished = true;
 406              		.loc 1 88 13 is_stmt 1
  88:src/riscv.cpp ****             _thread::running->finished = true;
 407              		.loc 1 88 31 is_stmt 0
 408 0184 97070000 		la	a5,_ZN7_thread7runningE
 408      83B70700 
 409 018c 83B70700 		ld	a5,0(a5)
  88:src/riscv.cpp ****             _thread::running->finished = true;
 410              		.loc 1 88 40
 411 0190 13071000 		li	a4,1
 412 0194 2384E700 		sb	a4,8(a5)
  90:src/riscv.cpp ****             _thread::threadDispatch();
 413              		.loc 1 90 13 is_stmt 1
  90:src/riscv.cpp ****             _thread::threadDispatch();
 414              		.loc 1 90 36 is_stmt 0
GAS LISTING /tmp/ccS0rjrr.s 			page 15


 415 0198 97000000 		call	_ZN7_thread14threadDispatchEv@plt
 415      E7800000 
 416              	.LVL24:
  92:src/riscv.cpp ****             int retVal;
 417              		.loc 1 92 13 is_stmt 1
  95:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 418              		.loc 1 95 13
  95:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 419              		.loc 1 95 54 is_stmt 0
 420              	#APP
 421              	# 95 "src/riscv.cpp" 1
 422              		mv a5, a0
 423              	# 0 "" 2
 424              	.LVL25:
 425              	#NO_APP
 426              	.LBE48:
 427 01a4 6FF0DFF0 		j	.L3
 428              	.LVL26:
 429              	.L13:
 430              	.LBE50:
 431              	.LBE53:
 432              	.LBE57:
 433              	.LBE60:
 434              	.LBE63:
 120:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 435              		.loc 1 120 9 is_stmt 1
 436              	.LBB64:
 437              	.LBB65:
 141:src/../h/riscv.hpp **** }
 438              		.loc 2 141 5
 141:src/../h/riscv.hpp **** }
 439              		.loc 2 141 64 is_stmt 0
 440 01a8 93062000 		li	a3,2
 441              	#APP
 442              	# 141 "src/../h/riscv.hpp" 1
 443              		csrc sip, a3
 444              	# 0 "" 2
 445              	.LVL27:
 446              	#NO_APP
 447              	.LBE65:
 448              	.LBE64:
 121:src/riscv.cpp ****         _thread::running->timeSlice++;
 449              		.loc 1 121 9 is_stmt 1
 121:src/riscv.cpp ****         _thread::running->timeSlice++;
 450              		.loc 1 121 27 is_stmt 0
 451 01b0 97070000 		la	a5,_ZN7_thread7runningE
 451      83B70700 
 452 01b8 03B70700 		ld	a4,0(a5)
 453              	.LVL28:
 454 01bc 83370703 		ld	a5,48(a4)
 121:src/riscv.cpp ****         _thread::running->timeSlice++;
 455              		.loc 1 121 36
 456 01c0 93871700 		addi	a5,a5,1
 457 01c4 2338F702 		sd	a5,48(a4)
 122:src/riscv.cpp ****         if (DEFAULT_TIME_SLICE >= _thread::running->timeSlice)
 458              		.loc 1 122 9 is_stmt 1
 459 01c8 E3E4F6EE 		bgtu	a5,a3,.L3
GAS LISTING /tmp/ccS0rjrr.s 			page 16


 127:src/riscv.cpp ****             sepc = sepc + 4;
 460              		.loc 1 127 13
 127:src/riscv.cpp ****             sepc = sepc + 4;
 461              		.loc 1 127 20 is_stmt 0
 462 01cc 833784F9 		ld	a5,-104(s0)
 127:src/riscv.cpp ****             sepc = sepc + 4;
 463              		.loc 1 127 25
 464 01d0 93874700 		addi	a5,a5,4
 127:src/riscv.cpp ****             sepc = sepc + 4;
 465              		.loc 1 127 18
 466 01d4 233CF4F8 		sd	a5,-104(s0)
 129:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 467              		.loc 1 129 13 is_stmt 1
 129:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 468              		.loc 1 129 41 is_stmt 0
 469 01d8 23380702 		sd	zero,48(a4)
 130:src/riscv.cpp ****             _thread::threadDispatch();
 470              		.loc 1 130 13 is_stmt 1
 130:src/riscv.cpp ****             _thread::threadDispatch();
 471              		.loc 1 130 36 is_stmt 0
 472 01dc 97000000 		call	_ZN7_thread14threadDispatchEv@plt
 472      E7800000 
 473              	.LVL29:
 131:src/riscv.cpp ****             w_sstatus(sstatus);
 474              		.loc 1 131 13 is_stmt 1
 131:src/riscv.cpp ****             w_sstatus(sstatus);
 475              		.loc 1 131 22 is_stmt 0
 476 01e4 833704F9 		ld	a5,-112(s0)
 477              	.LVL30:
 478              	.LBB66:
 479              	.LBB67:
 175:src/../h/riscv.hpp **** }
 480              		.loc 2 175 5 is_stmt 1
 175:src/../h/riscv.hpp **** }
 481              		.loc 2 175 77 is_stmt 0
 482              	#APP
 483              	# 175 "src/../h/riscv.hpp" 1
 484              		csrw sstatus, a5
 485              	# 0 "" 2
 486              	.LVL31:
 487              	#NO_APP
 488              	.LBE67:
 489              	.LBE66:
 132:src/riscv.cpp ****             w_sepc(sepc);
 490              		.loc 1 132 13 is_stmt 1
 132:src/riscv.cpp ****             w_sepc(sepc);
 491              		.loc 1 132 19 is_stmt 0
 492 01ec 833784F9 		ld	a5,-104(s0)
 493              	.LVL32:
 494              	.LBB68:
 495              	.LBB69:
 107:src/../h/riscv.hpp **** }
 496              		.loc 2 107 5 is_stmt 1
 107:src/../h/riscv.hpp **** }
 497              		.loc 2 107 65 is_stmt 0
 498              	#APP
 499              	# 107 "src/../h/riscv.hpp" 1
GAS LISTING /tmp/ccS0rjrr.s 			page 17


 108:src/../h/riscv.hpp **** 
 500              		csrw sepc, a5
 501              	# 0 "" 2
 502              		.loc 2 108 1
 503              	#NO_APP
 504 01f4 6FF0DFEB 		j	.L3
 505              	.LVL33:
 506              	.L14:
 507              	.LBE69:
 508              	.LBE68:
 138:src/riscv.cpp ****         console_handler();
 509              		.loc 1 138 9 is_stmt 1
 138:src/riscv.cpp ****         console_handler();
 510              		.loc 1 138 24 is_stmt 0
 511 01f8 97000000 		call	console_handler@plt
 511      E7800000 
 512              	.LVL34:
 513              	.LBE73:
 514              		.loc 1 144 1
 515 0200 6FF01FEB 		j	.L3
 516              		.cfi_endproc
 517              	.LFE17:
 519              	.Letext0:
 520              		.file 3 "src/../h/../lib/hw.h"
 521              		.file 4 "src/../h/../h/thread.hpp"
 522              		.file 5 "src/../h/MemoryAllocator.hpp"
 523              		.file 6 "src/../lib/console.h"
GAS LISTING /tmp/ccS0rjrr.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccS0rjrr.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccS0rjrr.s:13     .text:0000000000000000 .L0 
     /tmp/ccS0rjrr.s:14     .text:0000000000000000 .L0 
     /tmp/ccS0rjrr.s:15     .text:0000000000000004 .L0 
     /tmp/ccS0rjrr.s:17     .text:0000000000000008 .L0 
     /tmp/ccS0rjrr.s:19     .text:000000000000000c .L0 
     /tmp/ccS0rjrr.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:9      .text:000000000000000c .L0 
     /tmp/ccS0rjrr.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:10     .text:0000000000000010 .L0 
     /tmp/ccS0rjrr.s:33     .text:0000000000000014 .L0 
     /tmp/ccS0rjrr.s:34     .text:0000000000000018 .L0 
     /tmp/ccS0rjrr.s:35     .text:0000000000000018 .L0 
     /tmp/ccS0rjrr.s:37     .text:000000000000001c .L0 
     /tmp/ccS0rjrr.s:39     .text:0000000000000020 .L0 
     /tmp/ccS0rjrr.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccS0rjrr.s:48     .text:0000000000000020 .L0 
     /tmp/ccS0rjrr.s:49     .text:0000000000000020 .L0 
     /tmp/ccS0rjrr.s:50     .text:0000000000000024 .L0 
     /tmp/ccS0rjrr.s:54     .text:0000000000000030 .L0 
     /tmp/ccS0rjrr.s:55     .text:0000000000000030 .L0 
     /tmp/ccS0rjrr.s:56     .text:0000000000000030 .L0 
     /tmp/ccS0rjrr.s:58     .text:0000000000000034 .L0 
     /tmp/ccS0rjrr.s:60     .text:0000000000000034 .L0 
     /tmp/ccS0rjrr.s:61     .text:0000000000000034 .L0 
       src/riscv.cpp:16     .text:0000000000000034 .L0 
     /tmp/ccS0rjrr.s:67     .text:0000000000000038 .L0 
       src/riscv.cpp:17     .text:0000000000000038 .L0 
     /tmp/ccS0rjrr.s:72     .text:000000000000003c .L0 
       src/riscv.cpp:18     .text:000000000000003c .L0 
     /tmp/ccS0rjrr.s:77     .text:0000000000000040 .L0 
       src/riscv.cpp:19     .text:0000000000000040 .L0 
     /tmp/ccS0rjrr.s:82     .text:0000000000000044 .L0 
       src/riscv.cpp:20     .text:0000000000000044 .L0 
     /tmp/ccS0rjrr.s:87     .text:0000000000000048 .L0 
       src/riscv.cpp:21     .text:0000000000000048 .L0 
     /tmp/ccS0rjrr.s:92     .text:000000000000004c .L0 
       src/riscv.cpp:22     .text:000000000000004c .L0 
     /tmp/ccS0rjrr.s:97     .text:0000000000000050 .L0 
       src/riscv.cpp:23     .text:0000000000000050 .L0 
     /tmp/ccS0rjrr.s:106    .text:0000000000000054 .L0 
     /tmp/ccS0rjrr.s:107    .text:0000000000000054 .L0 
     /tmp/ccS0rjrr.s:108    .text:0000000000000054 .L0 
  src/../h/riscv.hpp:101    .text:0000000000000054 .L0 
     /tmp/ccS0rjrr.s:116    .text:000000000000005c .L0 
     /tmp/ccS0rjrr.s:117    .text:000000000000005c .L0 
     /tmp/ccS0rjrr.s:121    .text:0000000000000060 .L0 
     /tmp/ccS0rjrr.s:125    .text:0000000000000064 .L0 
     /tmp/ccS0rjrr.s:126    .text:0000000000000064 .L0 
     /tmp/ccS0rjrr.s:127    .text:0000000000000064 .L0 
  src/../h/riscv.hpp:169    .text:0000000000000064 .L0 
     /tmp/ccS0rjrr.s:135    .text:000000000000006c .L0 
     /tmp/ccS0rjrr.s:136    .text:000000000000006c .L0 
     /tmp/ccS0rjrr.s:140    .text:0000000000000070 .L0 
     /tmp/ccS0rjrr.s:142    .text:0000000000000074 .L0 
GAS LISTING /tmp/ccS0rjrr.s 			page 19


     /tmp/ccS0rjrr.s:143    .text:0000000000000074 .L0 
       src/riscv.cpp:30     .text:0000000000000074 .L0 
     /tmp/ccS0rjrr.s:153    .text:0000000000000078 .L0 
     /tmp/ccS0rjrr.s:154    .text:0000000000000078 .L0 
     /tmp/ccS0rjrr.s:155    .text:0000000000000078 .L0 
  src/../h/riscv.hpp:89     .text:0000000000000078 .L0 
     /tmp/ccS0rjrr.s:163    .text:0000000000000080 .L0 
     /tmp/ccS0rjrr.s:164    .text:0000000000000080 .L0 
     /tmp/ccS0rjrr.s:170    .text:0000000000000084 .L0 
     /tmp/ccS0rjrr.s:171    .text:0000000000000084 .L0 
     /tmp/ccS0rjrr.s:173    .text:0000000000000088 .L0 
     /tmp/ccS0rjrr.s:176    .text:0000000000000090 .L0 
     /tmp/ccS0rjrr.s:181    .text:00000000000000a0 .L0 
     /tmp/ccS0rjrr.s:189    .text:00000000000000b0 .L0 
     /tmp/ccS0rjrr.s:190    .text:00000000000000b4 .L0 
     /tmp/ccS0rjrr.s:191    .text:00000000000000b4 .L0 
     /tmp/ccS0rjrr.s:193    .text:00000000000000b8 .L0 
     /tmp/ccS0rjrr.s:194    .text:00000000000000b8 .L0 
     /tmp/ccS0rjrr.s:196    .text:00000000000000bc .L0 
     /tmp/ccS0rjrr.s:199    .text:00000000000000c0 .L0 
     /tmp/ccS0rjrr.s:203    .text:00000000000000c4 .L0 
     /tmp/ccS0rjrr.s:207    .text:00000000000000c4 .L0 
     /tmp/ccS0rjrr.s:208    .text:00000000000000c4 .L0 
     /tmp/ccS0rjrr.s:210    .text:00000000000000c8 .L0 
     /tmp/ccS0rjrr.s:215    .text:00000000000000cc .L0 
  src/../h/riscv.hpp:107    .text:00000000000000cc .L0 
     /tmp/ccS0rjrr.s:226    .text:00000000000000d0 .L0 
     /tmp/ccS0rjrr.s:227    .text:00000000000000d0 .L0 
     /tmp/ccS0rjrr.s:229    .text:00000000000000d4 .L0 
     /tmp/ccS0rjrr.s:240    .text:00000000000000dc .L0 
     /tmp/ccS0rjrr.s:252    .text:00000000000000e4 .L0 
     /tmp/ccS0rjrr.s:266    .text:00000000000000ec .L0 
     /tmp/ccS0rjrr.s:269    .text:00000000000000f4 .L0 
     /tmp/ccS0rjrr.s:272    .text:00000000000000fc .L0 
     /tmp/ccS0rjrr.s:273    .text:00000000000000fc .L0 
     /tmp/ccS0rjrr.s:276    .text:0000000000000108 .L0 
     /tmp/ccS0rjrr.s:278    .text:000000000000010c .L0 
     /tmp/ccS0rjrr.s:279    .text:000000000000010c .L0 
     /tmp/ccS0rjrr.s:282    .text:0000000000000114 .L0 
     /tmp/ccS0rjrr.s:283    .text:0000000000000114 .L0 
     /tmp/ccS0rjrr.s:288    .text:0000000000000118 .L0 
  src/../h/riscv.hpp:175    .text:0000000000000118 .L0 
     /tmp/ccS0rjrr.s:298    .text:000000000000011c .L0 
     /tmp/ccS0rjrr.s:299    .text:000000000000011c .L0 
     /tmp/ccS0rjrr.s:304    .text:0000000000000120 .L0 
  src/../h/riscv.hpp:107    .text:0000000000000120 .L0 
     /tmp/ccS0rjrr.s:311    .text:0000000000000124 .L0 
     /tmp/ccS0rjrr.s:321    .text:0000000000000128 .L0 
     /tmp/ccS0rjrr.s:322    .text:0000000000000128 .L0 
     /tmp/ccS0rjrr.s:323    .text:0000000000000128 .L0 
     /tmp/ccS0rjrr.s:327    .text:0000000000000134 .L0 
     /tmp/ccS0rjrr.s:328    .text:0000000000000134 .L0 
     /tmp/ccS0rjrr.s:331    .text:000000000000013c .L0 
       src/riscv.cpp:48     .text:000000000000013c .L0 
     /tmp/ccS0rjrr.s:338    .text:0000000000000140 .L0 
       src/riscv.cpp:51     .text:0000000000000140 .L0 
     /tmp/ccS0rjrr.s:350    .text:0000000000000148 .L0 
GAS LISTING /tmp/ccS0rjrr.s 			page 20


     /tmp/ccS0rjrr.s:351    .text:0000000000000148 .L0 
     /tmp/ccS0rjrr.s:352    .text:0000000000000148 .L0 
     /tmp/ccS0rjrr.s:356    .text:0000000000000154 .L0 
       src/riscv.cpp:63     .text:0000000000000154 .L0 
     /tmp/ccS0rjrr.s:363    .text:0000000000000158 .L0 
       src/riscv.cpp:66     .text:0000000000000158 .L0 
     /tmp/ccS0rjrr.s:375    .text:0000000000000160 .L0 
     /tmp/ccS0rjrr.s:376    .text:0000000000000160 .L0 
     /tmp/ccS0rjrr.s:377    .text:0000000000000160 .L0 
     /tmp/ccS0rjrr.s:378    .text:0000000000000160 .L0 
     /tmp/ccS0rjrr.s:379    .text:0000000000000160 .L0 
     /tmp/ccS0rjrr.s:380    .text:0000000000000160 .L0 
     /tmp/ccS0rjrr.s:388    .text:0000000000000178 .L0 
       src/riscv.cpp:80     .text:0000000000000178 .L0 
     /tmp/ccS0rjrr.s:395    .text:000000000000017c .L0 
       src/riscv.cpp:83     .text:000000000000017c .L0 
     /tmp/ccS0rjrr.s:407    .text:0000000000000184 .L0 
     /tmp/ccS0rjrr.s:408    .text:0000000000000184 .L0 
     /tmp/ccS0rjrr.s:411    .text:0000000000000190 .L0 
     /tmp/ccS0rjrr.s:414    .text:0000000000000198 .L0 
     /tmp/ccS0rjrr.s:415    .text:0000000000000198 .L0 
     /tmp/ccS0rjrr.s:418    .text:00000000000001a0 .L0 
     /tmp/ccS0rjrr.s:419    .text:00000000000001a0 .L0 
       src/riscv.cpp:95     .text:00000000000001a0 .L0 
     /tmp/ccS0rjrr.s:438    .text:00000000000001a8 .L0 
     /tmp/ccS0rjrr.s:439    .text:00000000000001a8 .L0 
     /tmp/ccS0rjrr.s:440    .text:00000000000001a8 .L0 
     /tmp/ccS0rjrr.s:450    .text:00000000000001b0 .L0 
     /tmp/ccS0rjrr.s:451    .text:00000000000001b0 .L0 
     /tmp/ccS0rjrr.s:456    .text:00000000000001c0 .L0 
     /tmp/ccS0rjrr.s:459    .text:00000000000001c8 .L0 
     /tmp/ccS0rjrr.s:461    .text:00000000000001cc .L0 
     /tmp/ccS0rjrr.s:462    .text:00000000000001cc .L0 
     /tmp/ccS0rjrr.s:464    .text:00000000000001d0 .L0 
     /tmp/ccS0rjrr.s:466    .text:00000000000001d4 .L0 
     /tmp/ccS0rjrr.s:468    .text:00000000000001d8 .L0 
     /tmp/ccS0rjrr.s:469    .text:00000000000001d8 .L0 
     /tmp/ccS0rjrr.s:471    .text:00000000000001dc .L0 
     /tmp/ccS0rjrr.s:472    .text:00000000000001dc .L0 
     /tmp/ccS0rjrr.s:475    .text:00000000000001e4 .L0 
     /tmp/ccS0rjrr.s:476    .text:00000000000001e4 .L0 
     /tmp/ccS0rjrr.s:481    .text:00000000000001e8 .L0 
  src/../h/riscv.hpp:175    .text:00000000000001e8 .L0 
     /tmp/ccS0rjrr.s:491    .text:00000000000001ec .L0 
     /tmp/ccS0rjrr.s:492    .text:00000000000001ec .L0 
     /tmp/ccS0rjrr.s:497    .text:00000000000001f0 .L0 
  src/../h/riscv.hpp:107    .text:00000000000001f0 .L0 
     /tmp/ccS0rjrr.s:504    .text:00000000000001f4 .L0 
     /tmp/ccS0rjrr.s:510    .text:00000000000001f8 .L0 
     /tmp/ccS0rjrr.s:511    .text:00000000000001f8 .L0 
     /tmp/ccS0rjrr.s:515    .text:0000000000000200 .L0 
     /tmp/ccS0rjrr.s:516    .text:0000000000000204 .L0 
     /tmp/ccS0rjrr.s:524    .text:0000000000000204 .L0 
     /tmp/ccS0rjrr.s:273    .text:00000000000000fc .L0 
     /tmp/ccS0rjrr.s:408    .text:0000000000000184 .L0 
     /tmp/ccS0rjrr.s:451    .text:00000000000001b0 .L0 
     /tmp/ccS0rjrr.s:202    .text:00000000000000c4 .L12
GAS LISTING /tmp/ccS0rjrr.s 			page 21


     /tmp/ccS0rjrr.s:429    .text:00000000000001a8 .L13
     /tmp/ccS0rjrr.s:506    .text:00000000000001f8 .L14
     /tmp/ccS0rjrr.s:313    .text:0000000000000128 .L15
     /tmp/ccS0rjrr.s:346    .text:0000000000000148 .L16
     /tmp/ccS0rjrr.s:371    .text:0000000000000160 .L17
     /tmp/ccS0rjrr.s:403    .text:0000000000000184 .L18
     /tmp/ccS0rjrr.s:186    .text:00000000000000b0 .L3
     /tmp/ccS0rjrr.s:1502   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccS0rjrr.s:2551   .debug_str:00000000000004ea .LASF102
     /tmp/ccS0rjrr.s:2511   .debug_str:00000000000003c1 .LASF103
     /tmp/ccS0rjrr.s:2433   .debug_str:000000000000016e .LASF104
     /tmp/ccS0rjrr.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccS0rjrr.s:519    .text:0000000000000204 .Letext0
     /tmp/ccS0rjrr.s:2371   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccS0rjrr.s:2487   .debug_str:000000000000033e .LASF0
     /tmp/ccS0rjrr.s:2505   .debug_str:0000000000000390 .LASF1
     /tmp/ccS0rjrr.s:2477   .debug_str:00000000000002dc .LASF2
     /tmp/ccS0rjrr.s:2459   .debug_str:0000000000000272 .LASF4
     /tmp/ccS0rjrr.s:2533   .debug_str:000000000000046e .LASF3
     /tmp/ccS0rjrr.s:2397   .debug_str:0000000000000071 .LASF5
     /tmp/ccS0rjrr.s:2509   .debug_str:00000000000003ae .LASF6
     /tmp/ccS0rjrr.s:2485   .debug_str:000000000000032b .LASF7
     /tmp/ccS0rjrr.s:2561   .debug_str:000000000000060f .LASF8
     /tmp/ccS0rjrr.s:2447   .debug_str:00000000000001ff .LASF9
     /tmp/ccS0rjrr.s:2517   .debug_str:00000000000003fd .LASF10
     /tmp/ccS0rjrr.s:2553   .debug_str:00000000000005ae .LASF11
     /tmp/ccS0rjrr.s:2399   .debug_str:0000000000000078 .LASF12
     /tmp/ccS0rjrr.s:2381   .debug_str:0000000000000027 .LASF13
     /tmp/ccS0rjrr.s:2407   .debug_str:00000000000000c2 .LASF14
     /tmp/ccS0rjrr.s:2529   .debug_str:0000000000000440 .LASF15
     /tmp/ccS0rjrr.s:2411   .debug_str:00000000000000d3 .LASF16
     /tmp/ccS0rjrr.s:2501   .debug_str:000000000000037f .LASF77
     /tmp/ccS0rjrr.s:2473   .debug_str:00000000000002c3 .LASF105
     /tmp/ccS0rjrr.s:2539   .debug_str:0000000000000496 .LASF17
     /tmp/ccS0rjrr.s:2499   .debug_str:0000000000000376 .LASF18
     /tmp/ccS0rjrr.s:2467   .debug_str:0000000000000290 .LASF19
     /tmp/ccS0rjrr.s:2527   .debug_str:0000000000000435 .LASF52
     /tmp/ccS0rjrr.s:2577   .debug_str:0000000000000688 .LASF54
     /tmp/ccS0rjrr.s:2383   .debug_str:0000000000000037 .LASF20
     /tmp/ccS0rjrr.s:2425   .debug_str:0000000000000138 .LASF22
     /tmp/ccS0rjrr.s:2421   .debug_str:0000000000000127 .LASF24
     /tmp/ccS0rjrr.s:2419   .debug_str:0000000000000112 .LASF26
     /tmp/ccS0rjrr.s:2535   .debug_str:0000000000000480 .LASF21
     /tmp/ccS0rjrr.s:2521   .debug_str:0000000000000415 .LASF23
     /tmp/ccS0rjrr.s:2549   .debug_str:00000000000004e3 .LASF25
     /tmp/ccS0rjrr.s:2545   .debug_str:00000000000004be .LASF27
     /tmp/ccS0rjrr.s:2437   .debug_str:000000000000019f .LASF28
     /tmp/ccS0rjrr.s:2413   .debug_str:00000000000000e9 .LASF29
     /tmp/ccS0rjrr.s:2377   .debug_str:0000000000000010 .LASF30
     /tmp/ccS0rjrr.s:2453   .debug_str:0000000000000240 .LASF31
     /tmp/ccS0rjrr.s:2395   .debug_str:0000000000000069 .LASF32
     /tmp/ccS0rjrr.s:2401   .debug_str:0000000000000088 .LASF33
     /tmp/ccS0rjrr.s:2581   .debug_str:00000000000006ab .LASF34
     /tmp/ccS0rjrr.s:2427   .debug_str:000000000000014d .LASF35
     /tmp/ccS0rjrr.s:2489   .debug_str:000000000000034b .LASF36
     /tmp/ccS0rjrr.s:2575   .debug_str:0000000000000675 .LASF37
     /tmp/ccS0rjrr.s:2393   .debug_str:0000000000000062 .LASF38
GAS LISTING /tmp/ccS0rjrr.s 			page 22


     /tmp/ccS0rjrr.s:2435   .debug_str:000000000000018c .LASF39
     /tmp/ccS0rjrr.s:2441   .debug_str:00000000000001b5 .LASF40
     /tmp/ccS0rjrr.s:2547   .debug_str:00000000000004d1 .LASF41
     /tmp/ccS0rjrr.s:2391   .debug_str:000000000000005c .LASF42
     /tmp/ccS0rjrr.s:2585   .debug_str:00000000000006bf .LASF43
     /tmp/ccS0rjrr.s:2579   .debug_str:00000000000006a0 .LASF44
     /tmp/ccS0rjrr.s:2531   .debug_str:0000000000000456 .LASF45
     /tmp/ccS0rjrr.s:2503   .debug_str:0000000000000385 .LASF46
     /tmp/ccS0rjrr.s:2541   .debug_str:000000000000049f .LASF47
     /tmp/ccS0rjrr.s:2405   .debug_str:00000000000000b8 .LASF48
     /tmp/ccS0rjrr.s:2455   .debug_str:0000000000000254 .LASF49
     /tmp/ccS0rjrr.s:2479   .debug_str:00000000000002ea .LASF50
     /tmp/ccS0rjrr.s:2449   .debug_str:000000000000020d .LASF51
     /tmp/ccS0rjrr.s:2537   .debug_str:0000000000000487 .LASF53
     /tmp/ccS0rjrr.s:2403   .debug_str:000000000000009c .LASF55
     /tmp/ccS0rjrr.s:2567   .debug_str:0000000000000630 .LASF65
     /tmp/ccS0rjrr.s:2471   .debug_str:00000000000002a1 .LASF67
     /tmp/ccS0rjrr.s:2457   .debug_str:000000000000026a .LASF56
     /tmp/ccS0rjrr.s:2389   .debug_str:0000000000000054 .LASF57
     /tmp/ccS0rjrr.s:2465   .debug_str:000000000000028b .LASF58
     /tmp/ccS0rjrr.s:2463   .debug_str:0000000000000282 .LASF59
     /tmp/ccS0rjrr.s:2493   .debug_str:0000000000000361 .LASF60
     /tmp/ccS0rjrr.s:2469   .debug_str:0000000000000299 .LASF61
     /tmp/ccS0rjrr.s:2497   .debug_str:000000000000036c .LASF62
     /tmp/ccS0rjrr.s:2423   .debug_str:0000000000000130 .LASF79
     /tmp/ccS0rjrr.s:2387   .debug_str:0000000000000047 .LASF63
     /tmp/ccS0rjrr.s:2557   .debug_str:00000000000005c6 .LASF64
     /tmp/ccS0rjrr.s:2475   .debug_str:00000000000002ce .LASF66
     /tmp/ccS0rjrr.s:2451   .debug_str:0000000000000223 .LASF68
     /tmp/ccS0rjrr.s:2379   .debug_str:0000000000000018 .LASF69
     /tmp/ccS0rjrr.s:2559   .debug_str:00000000000005f1 .LASF70
     /tmp/ccS0rjrr.s:2429   .debug_str:0000000000000161 .LASF71
     /tmp/ccS0rjrr.s:2373   .debug_str:0000000000000000 .LASF72
     /tmp/ccS0rjrr.s:2431   .debug_str:0000000000000166 .LASF73
     /tmp/ccS0rjrr.s:2513   .debug_str:00000000000003cf .LASF74
     /tmp/ccS0rjrr.s:2573   .debug_str:0000000000000670 .LASF75
     /tmp/ccS0rjrr.s:2525   .debug_str:0000000000000430 .LASF76
     /tmp/ccS0rjrr.s:2481   .debug_str:00000000000002f4 .LASF78
     /tmp/ccS0rjrr.s:2519   .debug_str:000000000000040c .LASF80
     /tmp/ccS0rjrr.s:2375   .debug_str:0000000000000009 .LASF81
     /tmp/ccS0rjrr.s:2415   .debug_str:00000000000000fd .LASF82
     /tmp/ccS0rjrr.s:2571   .debug_str:0000000000000666 .LASF83
     /tmp/ccS0rjrr.s:2515   .debug_str:00000000000003d4 .LASF84
     /tmp/ccS0rjrr.s:2507   .debug_str:00000000000003a3 .LASF85
     /tmp/ccS0rjrr.s:2443   .debug_str:00000000000001bb .LASF86
     /tmp/ccS0rjrr.s:2563   .debug_str:000000000000061f .LASF87
     /tmp/ccS0rjrr.s:2569   .debug_str:0000000000000645 .LASF89
     /tmp/ccS0rjrr.s:2461   .debug_str:0000000000000279 .LASF88
     /tmp/ccS0rjrr.s:2445   .debug_str:00000000000001de .LASF90
     /tmp/ccS0rjrr.s:2491   .debug_str:0000000000000352 .LASF91
     /tmp/ccS0rjrr.s:2483   .debug_str:0000000000000304 .LASF92
     /tmp/ccS0rjrr.s:46     .text:0000000000000020 .LFB17
     /tmp/ccS0rjrr.s:517    .text:0000000000000204 .LFE17
     /tmp/ccS0rjrr.s:2495   .debug_str:0000000000000367 .LASF93
     /tmp/ccS0rjrr.s:2523   .debug_str:0000000000000428 .LASF94
     /tmp/ccS0rjrr.s:2200   .debug_loc:0000000000000000 .LLST0
     /tmp/ccS0rjrr.s:2385   .debug_str:0000000000000040 .LASF95
GAS LISTING /tmp/ccS0rjrr.s 			page 23


     /tmp/ccS0rjrr.s:2211   .debug_loc:0000000000000036 .LLST1
     /tmp/ccS0rjrr.s:319    .text:0000000000000128 .LBB56
     /tmp/ccS0rjrr.s:343    .text:0000000000000144 .LBE56
     /tmp/ccS0rjrr.s:2260   .debug_loc:00000000000000fb .LLST10
     /tmp/ccS0rjrr.s:2555   .debug_str:00000000000005bd .LASF96
     /tmp/ccS0rjrr.s:2268   .debug_loc:0000000000000120 .LLST11
     /tmp/ccS0rjrr.s:2565   .debug_str:0000000000000629 .LASF97
     /tmp/ccS0rjrr.s:325    .text:0000000000000134 .LVL13
     /tmp/ccS0rjrr.s:329    .text:000000000000013c .LVL14
     /tmp/ccS0rjrr.s:348    .text:0000000000000148 .LBB52
     /tmp/ccS0rjrr.s:368    .text:000000000000015c .LBE52
     /tmp/ccS0rjrr.s:2275   .debug_loc:0000000000000143 .LLST9
     /tmp/ccS0rjrr.s:354    .text:0000000000000154 .LVL17
     /tmp/ccS0rjrr.s:373    .text:0000000000000160 .LBB49
     /tmp/ccS0rjrr.s:400    .text:0000000000000180 .LBE49
     /tmp/ccS0rjrr.s:2543   .debug_str:00000000000004b7 .LASF98
     /tmp/ccS0rjrr.s:2283   .debug_loc:0000000000000168 .LLST5
     /tmp/ccS0rjrr.s:2439   .debug_str:00000000000001a7 .LASF99
     /tmp/ccS0rjrr.s:2291   .debug_loc:000000000000018d .LLST6
     /tmp/ccS0rjrr.s:2299   .debug_loc:00000000000001b2 .LLST7
     /tmp/ccS0rjrr.s:2583   .debug_str:00000000000006b3 .LASF100
     /tmp/ccS0rjrr.s:2307   .debug_loc:00000000000001d7 .LLST8
     /tmp/ccS0rjrr.s:386    .text:0000000000000178 .LVL21
     /tmp/ccS0rjrr.s:405    .text:0000000000000184 .LBB48
     /tmp/ccS0rjrr.s:426    .text:00000000000001a4 .LBE48
     /tmp/ccS0rjrr.s:416    .text:00000000000001a0 .LVL24
     /tmp/ccS0rjrr.s:103    .text:0000000000000054 .LBB30
     /tmp/ccS0rjrr.s:119    .text:0000000000000060 .LBE30
     /tmp/ccS0rjrr.s:123    .text:0000000000000064 .LBB32
     /tmp/ccS0rjrr.s:138    .text:0000000000000070 .LBE32
     /tmp/ccS0rjrr.s:151    .text:0000000000000078 .LBB34
     /tmp/ccS0rjrr.s:167    .text:0000000000000084 .LBE34
     /tmp/ccS0rjrr.s:212    .text:00000000000000cc .LBB38
     /tmp/ccS0rjrr.s:223    .text:00000000000000d0 .LBE38
     /tmp/ccS0rjrr.s:2315   .debug_loc:00000000000001fb .LLST2
     /tmp/ccS0rjrr.s:285    .text:0000000000000118 .LBB44
     /tmp/ccS0rjrr.s:296    .text:000000000000011c .LBE44
     /tmp/ccS0rjrr.s:2322   .debug_loc:000000000000021e .LLST3
     /tmp/ccS0rjrr.s:301    .text:0000000000000120 .LBB46
     /tmp/ccS0rjrr.s:315    .text:0000000000000128 .LBE46
     /tmp/ccS0rjrr.s:2329   .debug_loc:0000000000000241 .LLST4
     /tmp/ccS0rjrr.s:436    .text:00000000000001a8 .LBB64
     /tmp/ccS0rjrr.s:448    .text:00000000000001b0 .LBE64
     /tmp/ccS0rjrr.s:2336   .debug_loc:0000000000000264 .LLST12
     /tmp/ccS0rjrr.s:478    .text:00000000000001e8 .LBB66
     /tmp/ccS0rjrr.s:489    .text:00000000000001ec .LBE66
     /tmp/ccS0rjrr.s:2344   .debug_loc:0000000000000288 .LLST13
     /tmp/ccS0rjrr.s:494    .text:00000000000001f0 .LBB68
     /tmp/ccS0rjrr.s:508    .text:00000000000001f8 .LBE68
     /tmp/ccS0rjrr.s:2351   .debug_loc:00000000000002ab .LLST14
     /tmp/ccS0rjrr.s:280    .text:0000000000000114 .LVL8
     /tmp/ccS0rjrr.s:473    .text:00000000000001e4 .LVL29
     /tmp/ccS0rjrr.s:512    .text:0000000000000200 .LVL34
     /tmp/ccS0rjrr.s:10     .text:0000000000000000 .LFB16
     /tmp/ccS0rjrr.s:40     .text:0000000000000020 .LFE16
     /tmp/ccS0rjrr.s:2409   .debug_str:00000000000000ce .LASF101
     /tmp/ccS0rjrr.s:2417   .debug_str:0000000000000102 .LASF106
GAS LISTING /tmp/ccS0rjrr.s 			page 24


     /tmp/ccS0rjrr.s:148    .text:0000000000000078 .LVL0
     /tmp/ccS0rjrr.s:197    .text:00000000000000bc .LVL3
     /tmp/ccS0rjrr.s:201    .text:00000000000000c4 .LVL4
     /tmp/ccS0rjrr.s:165    .text:0000000000000084 .LVL1
     /tmp/ccS0rjrr.s:185    .text:00000000000000b0 .LVL2
     /tmp/ccS0rjrr.s:230    .text:00000000000000d8 .LVL7
     /tmp/ccS0rjrr.s:312    .text:0000000000000128 .LVL12
     /tmp/ccS0rjrr.s:345    .text:0000000000000148 .LVL16
     /tmp/ccS0rjrr.s:370    .text:0000000000000160 .LVL19
     /tmp/ccS0rjrr.s:381    .text:0000000000000164 .LVL20
     /tmp/ccS0rjrr.s:402    .text:0000000000000184 .LVL23
     /tmp/ccS0rjrr.s:428    .text:00000000000001a8 .LVL26
     /tmp/ccS0rjrr.s:453    .text:00000000000001bc .LVL28
     /tmp/ccS0rjrr.s:505    .text:00000000000001f8 .LVL33
     /tmp/ccS0rjrr.s:211    .text:00000000000000cc .LVL5
     /tmp/ccS0rjrr.s:220    .text:00000000000000d0 .LVL6
     /tmp/ccS0rjrr.s:284    .text:0000000000000118 .LVL9
     /tmp/ccS0rjrr.s:293    .text:000000000000011c .LVL10
     /tmp/ccS0rjrr.s:300    .text:0000000000000120 .LVL11
     /tmp/ccS0rjrr.s:445    .text:00000000000001b0 .LVL27
     /tmp/ccS0rjrr.s:477    .text:00000000000001e8 .LVL30
     /tmp/ccS0rjrr.s:486    .text:00000000000001ec .LVL31
     /tmp/ccS0rjrr.s:493    .text:00000000000001f0 .LVL32
     /tmp/ccS0rjrr.s:525    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN7_thread7runningE
_ZN7_thread14threadDispatchEv
_ZN15MemoryAllocator14convert2BlocksEm
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN7_thread12threadCreateEPPS_PFvPvES2_S2_
console_handler
