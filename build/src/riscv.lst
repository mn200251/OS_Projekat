GAS LISTING /tmp/ccbTplG0.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB16:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** 
   2:src/riscv.cpp **** #include "../h/riscv.hpp"
   3:src/riscv.cpp **** #include "../lib/console.h"
   4:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   5:src/riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   6:src/riscv.cpp **** 
   7:src/riscv.cpp **** #include "../h/print.hpp"
   8:src/riscv.cpp **** 
   9:src/riscv.cpp **** void Riscv::popSppSpie()
  10:src/riscv.cpp **** {
  12              		.loc 1 10 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  11:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 11 5
  21              		.loc 1 11 38 is_stmt 0
  22              	#APP
  23              	# 11 "src/riscv.cpp" 1
  12              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 12 5 is_stmt 1
  27              		.loc 1 12 29 is_stmt 0
  28              	# 12 "src/riscv.cpp" 1
  13              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 13 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE16:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
  44              	.LC0:
  45 0000 73636175 		.string	"scause: "
  45      73653A20 
GAS LISTING /tmp/ccbTplG0.s 			page 2


  45      00
  46 0009 00000000 		.align	3
  46      000000
  47              	.LC1:
  48 0010 0A00     		.string	"\n"
  49 0012 00000000 		.align	3
  49      0000
  50              	.LC2:
  51 0018 4B657962 		.string	"Keyboard interrupt!\n"
  51      6F617264 
  51      20696E74 
  51      65727275 
  51      7074210A 
  52 002d 000000   		.align	3
  53              	.LC3:
  54 0030 73657063 		.string	"sepc = "
  54      203D2000 
  55              		.align	3
  56              	.LC4:
  57 0038 0A556E65 		.string	"\nUnexpected trap cause!\n"
  57      78706563 
  57      74656420 
  57      74726170 
  57      20636175 
  58              		.text
  59              		.align	2
  60              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  62              	_ZN5Riscv20handleSupervisorTrapEv:
  63              	.LFB17:
  14:src/riscv.cpp **** 
  15:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  16:src/riscv.cpp **** {
  64              		.loc 1 16 1 is_stmt 1
  65              		.cfi_startproc
  66 0020 130101F7 		addi	sp,sp,-144
  67              		.cfi_def_cfa_offset 144
  68 0024 23341108 		sd	ra,136(sp)
  69 0028 23308108 		sd	s0,128(sp)
  70 002c 233C9106 		sd	s1,120(sp)
  71 0030 23382107 		sd	s2,112(sp)
  72              		.cfi_offset 1, -8
  73              		.cfi_offset 8, -16
  74              		.cfi_offset 9, -24
  75              		.cfi_offset 18, -32
  76 0034 13040109 		addi	s0,sp,144
  77              		.cfi_def_cfa 8, 0
  17:src/riscv.cpp ****     uint64 a[8];
  78              		.loc 1 17 5
  18:src/riscv.cpp ****     asm volatile("sd a0, %0" : "=m" (a[0]));
  79              		.loc 1 18 5
  80              		.loc 1 18 44 is_stmt 0
  81              	#APP
  82              	# 18 "src/riscv.cpp" 1
  19              	    asm volatile("sd a1, %0" : "=m" (a[1]));
  83              		sd a0, -96(s0)
  84              	# 0 "" 2
  85              		.loc 1 19 5 is_stmt 1
GAS LISTING /tmp/ccbTplG0.s 			page 3


  86              		.loc 1 19 44 is_stmt 0
  87              	# 19 "src/riscv.cpp" 1
  20              	    asm volatile("sd a2, %0" : "=m" (a[2]));
  88              		sd a1, -88(s0)
  89              	# 0 "" 2
  90              		.loc 1 20 5 is_stmt 1
  91              		.loc 1 20 44 is_stmt 0
  92              	# 20 "src/riscv.cpp" 1
  21              	    asm volatile("sd a3, %0" : "=m" (a[3]));
  93              		sd a2, -80(s0)
  94              	# 0 "" 2
  95              		.loc 1 21 5 is_stmt 1
  96              		.loc 1 21 44 is_stmt 0
  97              	# 21 "src/riscv.cpp" 1
  22              	    asm volatile("sd a4, %0" : "=m" (a[4]));
  98              		sd a3, -72(s0)
  99              	# 0 "" 2
 100              		.loc 1 22 5 is_stmt 1
 101              		.loc 1 22 44 is_stmt 0
 102              	# 22 "src/riscv.cpp" 1
  23              	    asm volatile("sd a5, %0" : "=m" (a[5]));
 103              		sd a4, -64(s0)
 104              	# 0 "" 2
 105              		.loc 1 23 5 is_stmt 1
 106              		.loc 1 23 44 is_stmt 0
 107              	# 23 "src/riscv.cpp" 1
  24              	    asm volatile("sd a6, %0" : "=m" (a[6]));
 108              		sd a5, -56(s0)
 109              	# 0 "" 2
 110              		.loc 1 24 5 is_stmt 1
 111              		.loc 1 24 44 is_stmt 0
 112              	# 24 "src/riscv.cpp" 1
  25              	    asm volatile("sd a7, %0" : "=m" (a[7]));
 113              		sd a6, -48(s0)
 114              	# 0 "" 2
 115              		.loc 1 25 5 is_stmt 1
 116              		.loc 1 25 44 is_stmt 0
 117              	# 25 "src/riscv.cpp" 1
  26              	
  27:src/riscv.cpp ****     uint64 volatile sepc = r_sepc();
 118              		sd a7, -40(s0)
 119              	# 0 "" 2
 120              		.loc 1 27 5 is_stmt 1
 121              	#NO_APP
 122              	.LBB30:
 123              	.LBB31:
 124              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** 
   2:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   3:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #include "../lib/hw.h"
   6:src/../h/riscv.hpp **** 
   7:src/../h/riscv.hpp **** class Riscv
   8:src/../h/riscv.hpp **** {
   9:src/../h/riscv.hpp **** public:
  10:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccbTplG0.s 			page 4


  11:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  12:src/../h/riscv.hpp ****     static void popSppSpie();
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // read register scause
  15:src/../h/riscv.hpp ****     static uint64 r_scause();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // write register scause
  18:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // read register sepc
  21:src/../h/riscv.hpp ****     static uint64 r_sepc();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // write register sepc
  24:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // read register stvec
  27:src/../h/riscv.hpp ****     static uint64 r_stvec();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // write register stvec
  30:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // read register stval
  33:src/../h/riscv.hpp ****     static uint64 r_stval();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // write register stval
  36:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     enum BitMaskSip
  39:src/../h/riscv.hpp ****     {
  40:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  41:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  42:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  43:src/../h/riscv.hpp ****     };
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // mask set register sip
  46:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask clear register sip
  49:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // read register sip
  52:src/../h/riscv.hpp ****     static uint64 r_sip();
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // write register sip
  55:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     enum BitMaskSstatus
  58:src/../h/riscv.hpp ****     {
  59:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  60:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  61:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  62:src/../h/riscv.hpp ****     };
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // mask set register sstatus
  65:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask clear register sstatus
GAS LISTING /tmp/ccbTplG0.s 			page 5


  68:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // read register sstatus
  71:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // write register sstatus
  74:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // supervisor trap
  77:src/../h/riscv.hpp ****     static void supervisorTrap();
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp **** private:
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // supervisor trap handler
  82:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp **** };
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  87:src/../h/riscv.hpp **** {
  88:src/../h/riscv.hpp ****     uint64 volatile scause;
  89:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  90:src/../h/riscv.hpp ****     return scause;
  91:src/../h/riscv.hpp **** }
  92:src/../h/riscv.hpp **** 
  93:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  94:src/../h/riscv.hpp **** {
  95:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  96:src/../h/riscv.hpp **** }
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
  99:src/../h/riscv.hpp **** {
 100:src/../h/riscv.hpp ****     uint64 volatile sepc;
 125              		.loc 2 100 5
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 126              		.loc 2 101 5
 127              		.loc 2 101 64 is_stmt 0
 128              	#APP
 129              	# 101 "src/../h/riscv.hpp" 1
 102              	    return sepc;
 130              		csrr a5, sepc
 131              	# 0 "" 2
 132              	#NO_APP
 133 005c 2334F4F8 		sd	a5,-120(s0)
 134              		.loc 2 102 5 is_stmt 1
 135              		.loc 2 102 12 is_stmt 0
 136 0060 833784F8 		ld	a5,-120(s0)
 137              	.LBE31:
 138              	.LBE30:
 139              		.loc 1 27 35
 140 0064 233CF4F8 		sd	a5,-104(s0)
  28:src/riscv.cpp ****     uint64 volatile sstatus = r_sstatus();
 141              		.loc 1 28 5 is_stmt 1
 142              	.LBB32:
 143              	.LBB33:
 103:src/../h/riscv.hpp **** }
 104:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccbTplG0.s 			page 6


 105:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 106:src/../h/riscv.hpp **** {
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 108:src/../h/riscv.hpp **** }
 109:src/../h/riscv.hpp **** 
 110:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 111:src/../h/riscv.hpp **** {
 112:src/../h/riscv.hpp ****     uint64 volatile stvec;
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 114:src/../h/riscv.hpp ****     return stvec;
 115:src/../h/riscv.hpp **** }
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 118:src/../h/riscv.hpp **** {
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 120:src/../h/riscv.hpp **** }
 121:src/../h/riscv.hpp **** 
 122:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 123:src/../h/riscv.hpp **** {
 124:src/../h/riscv.hpp ****     uint64 volatile stval;
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 126:src/../h/riscv.hpp ****     return stval;
 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 130:src/../h/riscv.hpp **** {
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 132:src/../h/riscv.hpp **** }
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 135:src/../h/riscv.hpp **** {
 136:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 137:src/../h/riscv.hpp **** }
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 140:src/../h/riscv.hpp **** {
 141:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 142:src/../h/riscv.hpp **** }
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 145:src/../h/riscv.hpp **** {
 146:src/../h/riscv.hpp ****     uint64 volatile sip;
 147:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 148:src/../h/riscv.hpp ****     return sip;
 149:src/../h/riscv.hpp **** }
 150:src/../h/riscv.hpp **** 
 151:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 152:src/../h/riscv.hpp **** {
 153:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 154:src/../h/riscv.hpp **** }
 155:src/../h/riscv.hpp **** 
 156:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 157:src/../h/riscv.hpp **** {
 158:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 159:src/../h/riscv.hpp **** }
 160:src/../h/riscv.hpp **** 
 161:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
GAS LISTING /tmp/ccbTplG0.s 			page 7


 162:src/../h/riscv.hpp **** {
 163:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 164:src/../h/riscv.hpp **** }
 165:src/../h/riscv.hpp **** 
 166:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 167:src/../h/riscv.hpp **** {
 168:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 144              		.loc 2 168 5
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 145              		.loc 2 169 5
 146              		.loc 2 169 76 is_stmt 0
 147              	#APP
 148              	# 169 "src/../h/riscv.hpp" 1
 170              	    return sstatus;
 149              		csrr a5, sstatus
 150              	# 0 "" 2
 151              	#NO_APP
 152 006c 2330F4F8 		sd	a5,-128(s0)
 153              		.loc 2 170 5 is_stmt 1
 154              		.loc 2 170 12 is_stmt 0
 155 0070 833704F8 		ld	a5,-128(s0)
 156              	.LBE33:
 157              	.LBE32:
 158              		.loc 1 28 41
 159 0074 2338F4F8 		sd	a5,-112(s0)
  29:src/riscv.cpp **** 
  30:src/riscv.cpp ****     // retrieve stack pointer relative to saved registers
  31:src/riscv.cpp ****     void* SP;
 160              		.loc 1 31 5 is_stmt 1
  32:src/riscv.cpp ****     asm volatile("csrr %0, sscratch" : "=r" (SP));
 161              		.loc 1 32 5
 162              		.loc 1 32 50 is_stmt 0
 163              	#APP
 164              	# 32 "src/riscv.cpp" 1
  33              	
 165              		csrr s2, sscratch
 166              	# 0 "" 2
 167              	.LVL0:
  34:src/riscv.cpp ****     uint64 scause = r_scause();
 168              		.loc 1 34 5 is_stmt 1
 169              	#NO_APP
 170              	.LBB34:
 171              	.LBB35:
  88:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 172              		.loc 2 88 5
  89:src/../h/riscv.hpp ****     return scause;
 173              		.loc 2 89 5
  89:src/../h/riscv.hpp ****     return scause;
 174              		.loc 2 89 72 is_stmt 0
 175              	#APP
 176              	# 89 "src/../h/riscv.hpp" 1
 177              		csrr a5, scause
 178              	# 0 "" 2
 179              	#NO_APP
 180 0080 233CF4F6 		sd	a5,-136(s0)
  90:src/../h/riscv.hpp **** }
 181              		.loc 2 90 5 is_stmt 1
GAS LISTING /tmp/ccbTplG0.s 			page 8


  90:src/../h/riscv.hpp **** }
 182              		.loc 2 90 12 is_stmt 0
 183 0084 833484F7 		ld	s1,-136(s0)
 184              	.LVL1:
 185              	.LBE35:
 186              	.LBE34:
  35:src/riscv.cpp **** 
  36:src/riscv.cpp ****     printString("scause: ");
 187              		.loc 1 36 5 is_stmt 1
 188              		.loc 1 36 16 is_stmt 0
 189 0088 17050000 		lla	a0,.LC0
 189      13050500 
 190 0090 97000000 		call	_Z11printStringPKc@plt
 190      E7800000 
 191              	.LVL2:
  37:src/riscv.cpp ****     printInteger(scause);
 192              		.loc 1 37 5 is_stmt 1
 193              		.loc 1 37 17 is_stmt 0
 194 0098 13850400 		mv	a0,s1
 195 009c 97000000 		call	_Z12printIntegerm@plt
 195      E7800000 
 196              	.LVL3:
  38:src/riscv.cpp ****     printString("\n");
 197              		.loc 1 38 5 is_stmt 1
 198              		.loc 1 38 16 is_stmt 0
 199 00a4 17050000 		lla	a0,.LC1
 199      13050500 
 200 00ac 97000000 		call	_Z11printStringPKc@plt
 200      E7800000 
 201              	.LVL4:
  39:src/riscv.cpp **** 
  40:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 202              		.loc 1 40 5 is_stmt 1
 203              	.LBB36:
 204              		.loc 1 40 40 is_stmt 0
 205 00b4 138784FF 		addi	a4,s1,-8
 206              		.loc 1 40 5
 207 00b8 93071000 		li	a5,1
 208 00bc 63F2E708 		bleu	a4,a5,.L13
  41:src/riscv.cpp ****     {
  42:src/riscv.cpp ****         w_sepc(sepc + 4);
  43:src/riscv.cpp **** 
  44:src/riscv.cpp ****         // mem_alloc
  45:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
  46:src/riscv.cpp ****         {
  47:src/riscv.cpp ****             // get the size argument
  48:src/riscv.cpp ****             size_t size = reinterpret_cast<size_t>(a[1]);
  49:src/riscv.cpp **** 
  50:src/riscv.cpp ****             size_t blockNum = MemoryAllocator::convert2Blocks(size);
  51:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(blockNum);
  52:src/riscv.cpp **** 
  53:src/riscv.cpp ****             // retVal should already be in a0 but just in case
  54:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  55:src/riscv.cpp **** 
  56:src/riscv.cpp ****             // put the return value on the stack
  57:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
  58:src/riscv.cpp ****             // asm volatile("sd a0, 0x50(%0)" : : "r" (SP));
GAS LISTING /tmp/ccbTplG0.s 			page 9


  59:src/riscv.cpp ****         }
  60:src/riscv.cpp ****         // mem_free
  61:src/riscv.cpp ****         else if (a[0] == 0x0000000000000002UL)
  62:src/riscv.cpp ****         {
  63:src/riscv.cpp ****             // get the ptr argument
  64:src/riscv.cpp ****             void* ptr = reinterpret_cast<void *>(a[1]);
  65:src/riscv.cpp **** 
  66:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
  67:src/riscv.cpp **** 
  68:src/riscv.cpp ****             // retVal should already be in a0 but just in case
  69:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  70:src/riscv.cpp **** 
  71:src/riscv.cpp ****             // put the return value on the stack
  72:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
  73:src/riscv.cpp ****             // asm volatile("sd a0, 0x50(%0)" : : "r" (SP));
  74:src/riscv.cpp ****         }
  75:src/riscv.cpp ****         // thread_create
  76:src/riscv.cpp ****         else if (a[0] == 0x0000000000000011UL)
  77:src/riscv.cpp ****         {
  78:src/riscv.cpp ****             thread_t* handle = reinterpret_cast<thread_t *>(a[1]);
  79:src/riscv.cpp ****             void(*start_routine)(void*) = reinterpret_cast<void (*)(void *)>(a[2]);
  80:src/riscv.cpp ****             void* arg = reinterpret_cast<void *>(a[3]);
  81:src/riscv.cpp ****             void* stack_space = reinterpret_cast<void *>(a[4]);
  82:src/riscv.cpp **** 
  83:src/riscv.cpp ****             int retVal = _thread::threadCreate(handle, start_routine, arg, stack_space);
  84:src/riscv.cpp **** 
  85:src/riscv.cpp ****             // retVal should already be in a0 but just in case
  86:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
  87:src/riscv.cpp **** 
  88:src/riscv.cpp ****             // put the return value on the stack
  89:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
  90:src/riscv.cpp ****         }
  91:src/riscv.cpp ****         // thread_exit
  92:src/riscv.cpp ****         else if (a[0] == 0x0000000000000012UL)
  93:src/riscv.cpp ****         {
  94:src/riscv.cpp ****             _thread::running->finished = true;
  95:src/riscv.cpp **** 
  96:src/riscv.cpp ****             _thread::threadDispatch();
  97:src/riscv.cpp **** 
  98:src/riscv.cpp ****             int retVal;
  99:src/riscv.cpp **** 
 100:src/riscv.cpp ****             // return error code if thread didn't exit
 101:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 102:src/riscv.cpp ****         }
 103:src/riscv.cpp ****         // thread_dispatch
 104:src/riscv.cpp ****         else if (a[0] == 0x0000000000000013UL)
 105:src/riscv.cpp ****         {
 106:src/riscv.cpp ****             // sepc and sstatus already saved
 107:src/riscv.cpp ****             // seps already added +4
 108:src/riscv.cpp **** 
 109:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 110:src/riscv.cpp **** 
 111:src/riscv.cpp ****             _thread::threadDispatch();
 112:src/riscv.cpp **** 
 113:src/riscv.cpp ****             w_sstatus(sstatus);
 114:src/riscv.cpp ****             w_sepc(sepc);
 115:src/riscv.cpp **** 
GAS LISTING /tmp/ccbTplG0.s 			page 10


 116:src/riscv.cpp ****             // nothing to return
 117:src/riscv.cpp ****         }
 118:src/riscv.cpp ****         else
 119:src/riscv.cpp ****         {
 120:src/riscv.cpp **** 
 121:src/riscv.cpp ****         }
 122:src/riscv.cpp ****     }
 123:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 209              		.loc 1 123 10 is_stmt 1
 210 00c0 9307F0FF 		li	a5,-1
 211 00c4 9397F703 		slli	a5,a5,63
 212 00c8 93871700 		addi	a5,a5,1
 213 00cc 638CF414 		beq	s1,a5,.L14
 124:src/riscv.cpp ****     {
 125:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 126:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 127:src/riscv.cpp ****         _thread::running->timeSlice++;
 128:src/riscv.cpp ****         if (DEFAULT_TIME_SLICE <= _thread::running->timeSlice)
 129:src/riscv.cpp ****         {
 130:src/riscv.cpp ****             // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
 131:src/riscv.cpp ****             // uint64 volatile sepc = r_sepc() + 4;
 132:src/riscv.cpp ****             // uint64 volatile sstatus = r_sstatus();
 133:src/riscv.cpp ****             sepc = sepc + 4;
 134:src/riscv.cpp **** 
 135:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 136:src/riscv.cpp ****             _thread::threadDispatch();
 137:src/riscv.cpp ****             w_sstatus(sstatus);
 138:src/riscv.cpp ****             w_sepc(sepc);
 139:src/riscv.cpp ****         }
 140:src/riscv.cpp ****     }
 141:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 214              		.loc 1 141 10
 215 00d0 9307F0FF 		li	a5,-1
 216 00d4 9397F703 		slli	a5,a5,63
 217 00d8 93879700 		addi	a5,a5,9
 218 00dc 638EF418 		beq	s1,a5,.L15
 142:src/riscv.cpp ****     {
 143:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 144:src/riscv.cpp ****         printString("Keyboard interrupt!\n");
 145:src/riscv.cpp ****         console_handler();
 146:src/riscv.cpp **** 
 147:src/riscv.cpp ****     }
 148:src/riscv.cpp ****     else
 149:src/riscv.cpp ****     {
 150:src/riscv.cpp ****         printInteger(scause);
 219              		.loc 1 150 9
 220              		.loc 1 150 21 is_stmt 0
 221 00e0 13850400 		mv	a0,s1
 222 00e4 97000000 		call	_Z12printIntegerm@plt
 222      E7800000 
 223              	.LVL5:
 151:src/riscv.cpp ****         printString("\n");
 224              		.loc 1 151 9 is_stmt 1
 225              		.loc 1 151 20 is_stmt 0
 226 00ec 17050000 		lla	a0,.LC1
 226      13050500 
 227 00f4 97000000 		call	_Z11printStringPKc@plt
GAS LISTING /tmp/ccbTplG0.s 			page 11


 227      E7800000 
 228              	.LVL6:
 152:src/riscv.cpp ****         printString("sepc = ");
 229              		.loc 1 152 9 is_stmt 1
 230              		.loc 1 152 20 is_stmt 0
 231 00fc 17050000 		lla	a0,.LC3
 231      13050500 
 232 0104 97000000 		call	_Z11printStringPKc@plt
 232      E7800000 
 233              	.LVL7:
 153:src/riscv.cpp ****         printInteger(sepc);
 234              		.loc 1 153 9 is_stmt 1
 235              		.loc 1 153 21 is_stmt 0
 236 010c 033584F9 		ld	a0,-104(s0)
 237 0110 97000000 		call	_Z12printIntegerm@plt
 237      E7800000 
 238              	.LVL8:
 154:src/riscv.cpp ****         printString("\nUnexpected trap cause!\n");
 239              		.loc 1 154 9 is_stmt 1
 240              		.loc 1 154 20 is_stmt 0
 241 0118 17050000 		lla	a0,.LC4
 241      13050500 
 242 0120 97000000 		call	_Z11printStringPKc@plt
 242      E7800000 
 243              	.LVL9:
 244              	.L3:
 245              	.LBE36:
 155:src/riscv.cpp ****         // unexpected trap cause
 156:src/riscv.cpp ****     }
 157:src/riscv.cpp **** }...
 246              		.loc 1 157 1
 247 0128 83308108 		ld	ra,136(sp)
 248              		.cfi_remember_state
 249              		.cfi_restore 1
 250 012c 03340108 		ld	s0,128(sp)
 251              		.cfi_restore 8
 252              		.cfi_def_cfa 2, 144
 253 0130 83348107 		ld	s1,120(sp)
 254              		.cfi_restore 9
 255              	.LVL10:
 256 0134 03390107 		ld	s2,112(sp)
 257              		.cfi_restore 18
 258              	.LVL11:
 259 0138 13010109 		addi	sp,sp,144
 260              		.cfi_def_cfa_offset 0
 261 013c 67800000 		jr	ra
 262              	.LVL12:
 263              	.L13:
 264              		.cfi_restore_state
 265              	.LBB70:
 266              	.LBB37:
  42:src/riscv.cpp ****         w_sepc(sepc + 4);
 267              		.loc 1 42 9 is_stmt 1
  42:src/riscv.cpp ****         w_sepc(sepc + 4);
 268              		.loc 1 42 16 is_stmt 0
 269 0140 833784F9 		ld	a5,-104(s0)
  42:src/riscv.cpp ****         w_sepc(sepc + 4);
GAS LISTING /tmp/ccbTplG0.s 			page 12


 270              		.loc 1 42 15
 271 0144 93874700 		addi	a5,a5,4
 272              	.LVL13:
 273              	.LBB38:
 274              	.LBB39:
 107:src/../h/riscv.hpp **** }
 275              		.loc 2 107 5 is_stmt 1
 107:src/../h/riscv.hpp **** }
 276              		.loc 2 107 65 is_stmt 0
 277              	#APP
 278              	# 107 "src/../h/riscv.hpp" 1
 279              		csrw sepc, a5
 280              	# 0 "" 2
 281              	.LVL14:
 282              	#NO_APP
 283              	.LBE39:
 284              	.LBE38:
  45:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 285              		.loc 1 45 9 is_stmt 1
 286              	.LBB40:
  45:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 287              		.loc 1 45 16 is_stmt 0
 288 014c 833704FA 		ld	a5,-96(s0)
  45:src/riscv.cpp ****         if (a[0] == 0x0000000000000001UL)
 289              		.loc 1 45 9
 290 0150 13071000 		li	a4,1
 291 0154 6388E704 		beq	a5,a4,.L16
 292              	.LBE40:
 293              	.LBE37:
 294              	.LBE70:
  61:src/riscv.cpp ****         else if (a[0] == 0x0000000000000002UL)
 295              		.loc 1 61 14 is_stmt 1
 296              	.LBB71:
 297              	.LBB61:
 298              	.LBB58:
 299              	.LBB41:
 300 0158 13072000 		li	a4,2
 301 015c 6384E706 		beq	a5,a4,.L17
 302              	.LBE41:
 303              	.LBE58:
 304              	.LBE61:
 305              	.LBE71:
  76:src/riscv.cpp ****         else if (a[0] == 0x0000000000000011UL)
 306              		.loc 1 76 14
 307              	.LBB72:
 308              	.LBB62:
 309              	.LBB59:
 310              	.LBB54:
 311              	.LBB42:
 312 0160 13071001 		li	a4,17
 313 0164 638CE706 		beq	a5,a4,.L18
 314              	.LBE42:
 315              	.LBE54:
 316              	.LBE59:
 317              	.LBE62:
 318              	.LBE72:
  92:src/riscv.cpp ****         else if (a[0] == 0x0000000000000012UL)
GAS LISTING /tmp/ccbTplG0.s 			page 13


 319              		.loc 1 92 14
 320              	.LBB73:
 321              	.LBB63:
 322              	.LBB60:
 323              	.LBB55:
 324              	.LBB51:
 325              	.LBB43:
 326 0168 13072001 		li	a4,18
 327 016c 638AE708 		beq	a5,a4,.L19
 104:src/riscv.cpp ****         else if (a[0] == 0x0000000000000013UL)
 328              		.loc 1 104 14
 329 0170 13073001 		li	a4,19
 330 0174 E39AE7FA 		bne	a5,a4,.L3
 109:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 331              		.loc 1 109 13
 109:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 332              		.loc 1 109 31 is_stmt 0
 333 0178 97070000 		la	a5,_ZN7_thread7runningE
 333      83B70700 
 334 0180 83B70700 		ld	a5,0(a5)
 109:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 335              		.loc 1 109 41
 336 0184 23B80702 		sd	zero,48(a5)
 111:src/riscv.cpp ****             _thread::threadDispatch();
 337              		.loc 1 111 13 is_stmt 1
 111:src/riscv.cpp ****             _thread::threadDispatch();
 338              		.loc 1 111 36 is_stmt 0
 339 0188 97000000 		call	_ZN7_thread14threadDispatchEv@plt
 339      E7800000 
 340              	.LVL15:
 113:src/riscv.cpp ****             w_sstatus(sstatus);
 341              		.loc 1 113 13 is_stmt 1
 113:src/riscv.cpp ****             w_sstatus(sstatus);
 342              		.loc 1 113 22 is_stmt 0
 343 0190 833704F9 		ld	a5,-112(s0)
 344              	.LVL16:
 345              	.LBB44:
 346              	.LBB45:
 171:src/../h/riscv.hpp **** }
 172:src/../h/riscv.hpp **** 
 173:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 174:src/../h/riscv.hpp **** {
 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 347              		.loc 2 175 5 is_stmt 1
 348              		.loc 2 175 77 is_stmt 0
 349              	#APP
 350              	# 175 "src/../h/riscv.hpp" 1
 176              	}
 351              		csrw sstatus, a5
 352              	# 0 "" 2
 353              	.LVL17:
 354              	#NO_APP
 355              	.LBE45:
 356              	.LBE44:
 114:src/riscv.cpp ****             w_sepc(sepc);
 357              		.loc 1 114 13 is_stmt 1
 114:src/riscv.cpp ****             w_sepc(sepc);
GAS LISTING /tmp/ccbTplG0.s 			page 14


 358              		.loc 1 114 19 is_stmt 0
 359 0198 833784F9 		ld	a5,-104(s0)
 360              	.LVL18:
 361              	.LBB46:
 362              	.LBB47:
 107:src/../h/riscv.hpp **** }
 363              		.loc 2 107 5 is_stmt 1
 107:src/../h/riscv.hpp **** }
 364              		.loc 2 107 65 is_stmt 0
 365              	#APP
 366              	# 107 "src/../h/riscv.hpp" 1
 108:src/../h/riscv.hpp **** 
 367              		csrw sepc, a5
 368              	# 0 "" 2
 369              		.loc 2 108 1
 370              	#NO_APP
 371 01a0 6FF09FF8 		j	.L3
 372              	.LVL19:
 373              	.L16:
 374              	.LBE47:
 375              	.LBE46:
 376              	.LBE43:
 377              	.LBE51:
 378              	.LBE55:
 379              	.LBB56:
  48:src/riscv.cpp ****             size_t size = reinterpret_cast<size_t>(a[1]);
 380              		.loc 1 48 13 is_stmt 1
  50:src/riscv.cpp ****             size_t blockNum = MemoryAllocator::convert2Blocks(size);
 381              		.loc 1 50 13
  50:src/riscv.cpp ****             size_t blockNum = MemoryAllocator::convert2Blocks(size);
 382              		.loc 1 50 62 is_stmt 0
 383 01a4 033584FA 		ld	a0,-88(s0)
 384 01a8 97000000 		call	_ZN15MemoryAllocator14convert2BlocksEm@plt
 384      E7800000 
 385              	.LVL20:
  51:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(blockNum);
 386              		.loc 1 51 13 is_stmt 1
  51:src/riscv.cpp ****             void* retVal = MemoryAllocator::mem_alloc(blockNum);
 387              		.loc 1 51 54 is_stmt 0
 388 01b0 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 388      E7800000 
 389              	.LVL21:
  54:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 390              		.loc 1 54 13 is_stmt 1
  54:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 391              		.loc 1 54 54 is_stmt 0
 392              	#APP
 393              	# 54 "src/riscv.cpp" 1
 394              		mv a5, a0
 395              	# 0 "" 2
 396              	.LVL22:
  57:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 397              		.loc 1 57 13 is_stmt 1
  57:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 398              		.loc 1 57 59 is_stmt 0
 399              	# 57 "src/riscv.cpp" 1
 400              		sd a0, 10 * 8(s2)
GAS LISTING /tmp/ccbTplG0.s 			page 15


 401              	# 0 "" 2
 402              	#NO_APP
 403              	.LBE56:
 404 01c0 6FF09FF6 		j	.L3
 405              	.L17:
 406              	.LBB57:
 407              	.LBB52:
  64:src/riscv.cpp ****             void* ptr = reinterpret_cast<void *>(a[1]);
 408              		.loc 1 64 13 is_stmt 1
 409              	.LVL23:
  66:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
 410              		.loc 1 66 13
  66:src/riscv.cpp ****             int retVal = MemoryAllocator::mem_free(ptr);
 411              		.loc 1 66 51 is_stmt 0
 412 01c4 033584FA 		ld	a0,-88(s0)
 413 01c8 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 413      E7800000 
 414              	.LVL24:
  69:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 415              		.loc 1 69 13 is_stmt 1
  69:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 416              		.loc 1 69 54 is_stmt 0
 417              	#APP
 418              	# 69 "src/riscv.cpp" 1
 419              		mv a5, a0
 420              	# 0 "" 2
 421              	.LVL25:
  72:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 422              		.loc 1 72 13 is_stmt 1
  72:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 423              		.loc 1 72 59 is_stmt 0
 424              	# 72 "src/riscv.cpp" 1
 425              		sd a0, 10 * 8(s2)
 426              	# 0 "" 2
 427              	#NO_APP
 428              	.LBE52:
 429 01d8 6FF01FF5 		j	.L3
 430              	.L18:
 431              	.LBB53:
 432              	.LBB49:
  78:src/riscv.cpp ****             thread_t* handle = reinterpret_cast<thread_t *>(a[1]);
 433              		.loc 1 78 13 is_stmt 1
 434              	.LVL26:
  79:src/riscv.cpp ****             void(*start_routine)(void*) = reinterpret_cast<void (*)(void *)>(a[2]);
 435              		.loc 1 79 13
  80:src/riscv.cpp ****             void* arg = reinterpret_cast<void *>(a[3]);
 436              		.loc 1 80 13
  81:src/riscv.cpp ****             void* stack_space = reinterpret_cast<void *>(a[4]);
 437              		.loc 1 81 13
  83:src/riscv.cpp ****             int retVal = _thread::threadCreate(handle, start_routine, arg, stack_space);
 438              		.loc 1 83 13
  83:src/riscv.cpp ****             int retVal = _thread::threadCreate(handle, start_routine, arg, stack_space);
 439              		.loc 1 83 47 is_stmt 0
 440 01dc 833604FC 		ld	a3,-64(s0)
 441 01e0 033684FB 		ld	a2,-72(s0)
 442 01e4 833504FB 		ld	a1,-80(s0)
 443 01e8 033584FA 		ld	a0,-88(s0)
GAS LISTING /tmp/ccbTplG0.s 			page 16


 444 01ec 97000000 		call	_ZN7_thread12threadCreateEPPS_PFvPvES2_S2_@plt
 444      E7800000 
 445              	.LVL27:
  86:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 446              		.loc 1 86 13 is_stmt 1
  86:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 447              		.loc 1 86 54 is_stmt 0
 448              	#APP
 449              	# 86 "src/riscv.cpp" 1
 450              		mv a5, a0
 451              	# 0 "" 2
 452              	.LVL28:
  89:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 453              		.loc 1 89 13 is_stmt 1
  89:src/riscv.cpp ****             asm volatile("sd a0, 10 * 8(%0)" : : "r" (SP));
 454              		.loc 1 89 59 is_stmt 0
 455              	# 89 "src/riscv.cpp" 1
 456              		sd a0, 10 * 8(s2)
 457              	# 0 "" 2
 458              	#NO_APP
 459              	.LBE49:
 460 01fc 6FF0DFF2 		j	.L3
 461              	.L19:
 462              	.LBB50:
 463              	.LBB48:
  94:src/riscv.cpp ****             _thread::running->finished = true;
 464              		.loc 1 94 13 is_stmt 1
  94:src/riscv.cpp ****             _thread::running->finished = true;
 465              		.loc 1 94 31 is_stmt 0
 466 0200 97070000 		la	a5,_ZN7_thread7runningE
 466      83B70700 
 467 0208 83B70700 		ld	a5,0(a5)
  94:src/riscv.cpp ****             _thread::running->finished = true;
 468              		.loc 1 94 40
 469 020c 13071000 		li	a4,1
 470 0210 2384E700 		sb	a4,8(a5)
  96:src/riscv.cpp ****             _thread::threadDispatch();
 471              		.loc 1 96 13 is_stmt 1
  96:src/riscv.cpp ****             _thread::threadDispatch();
 472              		.loc 1 96 36 is_stmt 0
 473 0214 97000000 		call	_ZN7_thread14threadDispatchEv@plt
 473      E7800000 
 474              	.LVL29:
  98:src/riscv.cpp ****             int retVal;
 475              		.loc 1 98 13 is_stmt 1
 101:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 476              		.loc 1 101 13
 101:src/riscv.cpp ****             asm volatile("mv %0, a0" : "=r" (retVal));
 477              		.loc 1 101 54 is_stmt 0
 478              	#APP
 479              	# 101 "src/riscv.cpp" 1
 480              		mv a5, a0
 481              	# 0 "" 2
 482              	.LVL30:
 483              	#NO_APP
 484              	.LBE48:
 485 0220 6FF09FF0 		j	.L3
GAS LISTING /tmp/ccbTplG0.s 			page 17


 486              	.L14:
 487              	.LBE50:
 488              	.LBE53:
 489              	.LBE57:
 490              	.LBE60:
 491              	.LBE63:
 126:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 492              		.loc 1 126 9 is_stmt 1
 493              	.LVL31:
 494              	.LBB64:
 495              	.LBB65:
 141:src/../h/riscv.hpp **** }
 496              		.loc 2 141 5
 141:src/../h/riscv.hpp **** }
 497              		.loc 2 141 64 is_stmt 0
 498 0224 93072000 		li	a5,2
 499              	#APP
 500              	# 141 "src/../h/riscv.hpp" 1
 501              		csrc sip, a5
 502              	# 0 "" 2
 503              	.LVL32:
 504              	#NO_APP
 505              	.LBE65:
 506              	.LBE64:
 127:src/riscv.cpp ****         _thread::running->timeSlice++;
 507              		.loc 1 127 9 is_stmt 1
 127:src/riscv.cpp ****         _thread::running->timeSlice++;
 508              		.loc 1 127 27 is_stmt 0
 509 022c 97070000 		la	a5,_ZN7_thread7runningE
 509      83B70700 
 510 0234 03B70700 		ld	a4,0(a5)
 511 0238 83370703 		ld	a5,48(a4)
 127:src/riscv.cpp ****         _thread::running->timeSlice++;
 512              		.loc 1 127 36
 513 023c 93871700 		addi	a5,a5,1
 514 0240 2338F702 		sd	a5,48(a4)
 128:src/riscv.cpp ****         if (DEFAULT_TIME_SLICE <= _thread::running->timeSlice)
 515              		.loc 1 128 9 is_stmt 1
 516 0244 93061000 		li	a3,1
 517 0248 E3F0F6EE 		bleu	a5,a3,.L3
 133:src/riscv.cpp ****             sepc = sepc + 4;
 518              		.loc 1 133 13
 133:src/riscv.cpp ****             sepc = sepc + 4;
 519              		.loc 1 133 20 is_stmt 0
 520 024c 833784F9 		ld	a5,-104(s0)
 133:src/riscv.cpp ****             sepc = sepc + 4;
 521              		.loc 1 133 25
 522 0250 93874700 		addi	a5,a5,4
 133:src/riscv.cpp ****             sepc = sepc + 4;
 523              		.loc 1 133 18
 524 0254 233CF4F8 		sd	a5,-104(s0)
 135:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 525              		.loc 1 135 13 is_stmt 1
 135:src/riscv.cpp ****             _thread::running->timeSlice = 0;
 526              		.loc 1 135 41 is_stmt 0
 527 0258 23380702 		sd	zero,48(a4)
 136:src/riscv.cpp ****             _thread::threadDispatch();
GAS LISTING /tmp/ccbTplG0.s 			page 18


 528              		.loc 1 136 13 is_stmt 1
 136:src/riscv.cpp ****             _thread::threadDispatch();
 529              		.loc 1 136 36 is_stmt 0
 530 025c 97000000 		call	_ZN7_thread14threadDispatchEv@plt
 530      E7800000 
 531              	.LVL33:
 137:src/riscv.cpp ****             w_sstatus(sstatus);
 532              		.loc 1 137 13 is_stmt 1
 137:src/riscv.cpp ****             w_sstatus(sstatus);
 533              		.loc 1 137 22 is_stmt 0
 534 0264 833704F9 		ld	a5,-112(s0)
 535              	.LVL34:
 536              	.LBB66:
 537              	.LBB67:
 175:src/../h/riscv.hpp **** }
 538              		.loc 2 175 5 is_stmt 1
 175:src/../h/riscv.hpp **** }
 539              		.loc 2 175 77 is_stmt 0
 540              	#APP
 541              	# 175 "src/../h/riscv.hpp" 1
 542              		csrw sstatus, a5
 543              	# 0 "" 2
 544              	.LVL35:
 545              	#NO_APP
 546              	.LBE67:
 547              	.LBE66:
 138:src/riscv.cpp ****             w_sepc(sepc);
 548              		.loc 1 138 13 is_stmt 1
 138:src/riscv.cpp ****             w_sepc(sepc);
 549              		.loc 1 138 19 is_stmt 0
 550 026c 833784F9 		ld	a5,-104(s0)
 551              	.LVL36:
 552              	.LBB68:
 553              	.LBB69:
 107:src/../h/riscv.hpp **** }
 554              		.loc 2 107 5 is_stmt 1
 107:src/../h/riscv.hpp **** }
 555              		.loc 2 107 65 is_stmt 0
 556              	#APP
 557              	# 107 "src/../h/riscv.hpp" 1
 108:src/../h/riscv.hpp **** 
 558              		csrw sepc, a5
 559              	# 0 "" 2
 560              		.loc 2 108 1
 561              	#NO_APP
 562 0274 6FF05FEB 		j	.L3
 563              	.LVL37:
 564              	.L15:
 565              	.LBE69:
 566              	.LBE68:
 144:src/riscv.cpp ****         printString("Keyboard interrupt!\n");
 567              		.loc 1 144 9 is_stmt 1
 144:src/riscv.cpp ****         printString("Keyboard interrupt!\n");
 568              		.loc 1 144 20 is_stmt 0
 569 0278 17050000 		lla	a0,.LC2
 569      13050500 
 570 0280 97000000 		call	_Z11printStringPKc@plt
GAS LISTING /tmp/ccbTplG0.s 			page 19


 570      E7800000 
 571              	.LVL38:
 145:src/riscv.cpp ****         console_handler();
 572              		.loc 1 145 9 is_stmt 1
 145:src/riscv.cpp ****         console_handler();
 573              		.loc 1 145 24 is_stmt 0
 574 0288 97000000 		call	console_handler@plt
 574      E7800000 
 575              	.LVL39:
 576 0290 6FF09FE9 		j	.L3
 577              	.LBE73:
 578              		.cfi_endproc
 579              	.LFE17:
 581              	.Letext0:
 582              		.file 3 "src/../h/../lib/hw.h"
 583              		.file 4 "src/../h/../h/thread.hpp"
 584              		.file 5 "src/../h/MemoryAllocator.hpp"
 585              		.file 6 "src/../h/print.hpp"
 586              		.file 7 "src/../lib/console.h"
GAS LISTING /tmp/ccbTplG0.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccbTplG0.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccbTplG0.s:13     .text:0000000000000000 .L0 
     /tmp/ccbTplG0.s:14     .text:0000000000000000 .L0 
     /tmp/ccbTplG0.s:15     .text:0000000000000004 .L0 
     /tmp/ccbTplG0.s:17     .text:0000000000000008 .L0 
     /tmp/ccbTplG0.s:19     .text:000000000000000c .L0 
     /tmp/ccbTplG0.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:11     .text:000000000000000c .L0 
     /tmp/ccbTplG0.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:12     .text:0000000000000010 .L0 
     /tmp/ccbTplG0.s:33     .text:0000000000000014 .L0 
     /tmp/ccbTplG0.s:34     .text:0000000000000018 .L0 
     /tmp/ccbTplG0.s:35     .text:0000000000000018 .L0 
     /tmp/ccbTplG0.s:37     .text:000000000000001c .L0 
     /tmp/ccbTplG0.s:39     .text:0000000000000020 .L0 
     /tmp/ccbTplG0.s:62     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccbTplG0.s:65     .text:0000000000000020 .L0 
     /tmp/ccbTplG0.s:66     .text:0000000000000020 .L0 
     /tmp/ccbTplG0.s:67     .text:0000000000000024 .L0 
     /tmp/ccbTplG0.s:72     .text:0000000000000034 .L0 
     /tmp/ccbTplG0.s:73     .text:0000000000000034 .L0 
     /tmp/ccbTplG0.s:74     .text:0000000000000034 .L0 
     /tmp/ccbTplG0.s:75     .text:0000000000000034 .L0 
     /tmp/ccbTplG0.s:77     .text:0000000000000038 .L0 
     /tmp/ccbTplG0.s:79     .text:0000000000000038 .L0 
     /tmp/ccbTplG0.s:80     .text:0000000000000038 .L0 
       src/riscv.cpp:18     .text:0000000000000038 .L0 
     /tmp/ccbTplG0.s:86     .text:000000000000003c .L0 
       src/riscv.cpp:19     .text:000000000000003c .L0 
     /tmp/ccbTplG0.s:91     .text:0000000000000040 .L0 
       src/riscv.cpp:20     .text:0000000000000040 .L0 
     /tmp/ccbTplG0.s:96     .text:0000000000000044 .L0 
       src/riscv.cpp:21     .text:0000000000000044 .L0 
     /tmp/ccbTplG0.s:101    .text:0000000000000048 .L0 
       src/riscv.cpp:22     .text:0000000000000048 .L0 
     /tmp/ccbTplG0.s:106    .text:000000000000004c .L0 
       src/riscv.cpp:23     .text:000000000000004c .L0 
     /tmp/ccbTplG0.s:111    .text:0000000000000050 .L0 
       src/riscv.cpp:24     .text:0000000000000050 .L0 
     /tmp/ccbTplG0.s:116    .text:0000000000000054 .L0 
       src/riscv.cpp:25     .text:0000000000000054 .L0 
     /tmp/ccbTplG0.s:125    .text:0000000000000058 .L0 
     /tmp/ccbTplG0.s:126    .text:0000000000000058 .L0 
     /tmp/ccbTplG0.s:127    .text:0000000000000058 .L0 
  src/../h/riscv.hpp:101    .text:0000000000000058 .L0 
     /tmp/ccbTplG0.s:135    .text:0000000000000060 .L0 
     /tmp/ccbTplG0.s:136    .text:0000000000000060 .L0 
     /tmp/ccbTplG0.s:140    .text:0000000000000064 .L0 
     /tmp/ccbTplG0.s:144    .text:0000000000000068 .L0 
     /tmp/ccbTplG0.s:145    .text:0000000000000068 .L0 
     /tmp/ccbTplG0.s:146    .text:0000000000000068 .L0 
  src/../h/riscv.hpp:169    .text:0000000000000068 .L0 
     /tmp/ccbTplG0.s:154    .text:0000000000000070 .L0 
     /tmp/ccbTplG0.s:155    .text:0000000000000070 .L0 
     /tmp/ccbTplG0.s:159    .text:0000000000000074 .L0 
GAS LISTING /tmp/ccbTplG0.s 			page 21


     /tmp/ccbTplG0.s:161    .text:0000000000000078 .L0 
     /tmp/ccbTplG0.s:162    .text:0000000000000078 .L0 
       src/riscv.cpp:32     .text:0000000000000078 .L0 
     /tmp/ccbTplG0.s:172    .text:000000000000007c .L0 
     /tmp/ccbTplG0.s:173    .text:000000000000007c .L0 
     /tmp/ccbTplG0.s:174    .text:000000000000007c .L0 
  src/../h/riscv.hpp:89     .text:000000000000007c .L0 
     /tmp/ccbTplG0.s:182    .text:0000000000000084 .L0 
     /tmp/ccbTplG0.s:183    .text:0000000000000084 .L0 
     /tmp/ccbTplG0.s:188    .text:0000000000000088 .L0 
     /tmp/ccbTplG0.s:189    .text:0000000000000088 .L0 
     /tmp/ccbTplG0.s:193    .text:0000000000000098 .L0 
     /tmp/ccbTplG0.s:194    .text:0000000000000098 .L0 
     /tmp/ccbTplG0.s:198    .text:00000000000000a4 .L0 
     /tmp/ccbTplG0.s:199    .text:00000000000000a4 .L0 
     /tmp/ccbTplG0.s:204    .text:00000000000000b4 .L0 
     /tmp/ccbTplG0.s:205    .text:00000000000000b4 .L0 
     /tmp/ccbTplG0.s:207    .text:00000000000000b8 .L0 
     /tmp/ccbTplG0.s:210    .text:00000000000000c0 .L0 
     /tmp/ccbTplG0.s:215    .text:00000000000000d0 .L0 
     /tmp/ccbTplG0.s:220    .text:00000000000000e0 .L0 
     /tmp/ccbTplG0.s:221    .text:00000000000000e0 .L0 
     /tmp/ccbTplG0.s:225    .text:00000000000000ec .L0 
     /tmp/ccbTplG0.s:226    .text:00000000000000ec .L0 
     /tmp/ccbTplG0.s:230    .text:00000000000000fc .L0 
     /tmp/ccbTplG0.s:231    .text:00000000000000fc .L0 
     /tmp/ccbTplG0.s:235    .text:000000000000010c .L0 
     /tmp/ccbTplG0.s:236    .text:000000000000010c .L0 
     /tmp/ccbTplG0.s:240    .text:0000000000000118 .L0 
     /tmp/ccbTplG0.s:241    .text:0000000000000118 .L0 
     /tmp/ccbTplG0.s:247    .text:0000000000000128 .L0 
     /tmp/ccbTplG0.s:248    .text:000000000000012c .L0 
     /tmp/ccbTplG0.s:249    .text:000000000000012c .L0 
     /tmp/ccbTplG0.s:251    .text:0000000000000130 .L0 
     /tmp/ccbTplG0.s:252    .text:0000000000000130 .L0 
     /tmp/ccbTplG0.s:254    .text:0000000000000134 .L0 
     /tmp/ccbTplG0.s:257    .text:0000000000000138 .L0 
     /tmp/ccbTplG0.s:260    .text:000000000000013c .L0 
     /tmp/ccbTplG0.s:264    .text:0000000000000140 .L0 
     /tmp/ccbTplG0.s:268    .text:0000000000000140 .L0 
     /tmp/ccbTplG0.s:269    .text:0000000000000140 .L0 
     /tmp/ccbTplG0.s:271    .text:0000000000000144 .L0 
     /tmp/ccbTplG0.s:276    .text:0000000000000148 .L0 
  src/../h/riscv.hpp:107    .text:0000000000000148 .L0 
     /tmp/ccbTplG0.s:287    .text:000000000000014c .L0 
     /tmp/ccbTplG0.s:288    .text:000000000000014c .L0 
     /tmp/ccbTplG0.s:290    .text:0000000000000150 .L0 
     /tmp/ccbTplG0.s:300    .text:0000000000000158 .L0 
     /tmp/ccbTplG0.s:312    .text:0000000000000160 .L0 
     /tmp/ccbTplG0.s:326    .text:0000000000000168 .L0 
     /tmp/ccbTplG0.s:329    .text:0000000000000170 .L0 
     /tmp/ccbTplG0.s:332    .text:0000000000000178 .L0 
     /tmp/ccbTplG0.s:333    .text:0000000000000178 .L0 
     /tmp/ccbTplG0.s:336    .text:0000000000000184 .L0 
     /tmp/ccbTplG0.s:338    .text:0000000000000188 .L0 
     /tmp/ccbTplG0.s:339    .text:0000000000000188 .L0 
     /tmp/ccbTplG0.s:342    .text:0000000000000190 .L0 
GAS LISTING /tmp/ccbTplG0.s 			page 22


     /tmp/ccbTplG0.s:343    .text:0000000000000190 .L0 
     /tmp/ccbTplG0.s:348    .text:0000000000000194 .L0 
  src/../h/riscv.hpp:175    .text:0000000000000194 .L0 
     /tmp/ccbTplG0.s:358    .text:0000000000000198 .L0 
     /tmp/ccbTplG0.s:359    .text:0000000000000198 .L0 
     /tmp/ccbTplG0.s:364    .text:000000000000019c .L0 
  src/../h/riscv.hpp:107    .text:000000000000019c .L0 
     /tmp/ccbTplG0.s:371    .text:00000000000001a0 .L0 
     /tmp/ccbTplG0.s:381    .text:00000000000001a4 .L0 
     /tmp/ccbTplG0.s:382    .text:00000000000001a4 .L0 
     /tmp/ccbTplG0.s:383    .text:00000000000001a4 .L0 
     /tmp/ccbTplG0.s:387    .text:00000000000001b0 .L0 
     /tmp/ccbTplG0.s:388    .text:00000000000001b0 .L0 
     /tmp/ccbTplG0.s:391    .text:00000000000001b8 .L0 
       src/riscv.cpp:54     .text:00000000000001b8 .L0 
     /tmp/ccbTplG0.s:398    .text:00000000000001bc .L0 
       src/riscv.cpp:57     .text:00000000000001bc .L0 
     /tmp/ccbTplG0.s:410    .text:00000000000001c4 .L0 
     /tmp/ccbTplG0.s:411    .text:00000000000001c4 .L0 
     /tmp/ccbTplG0.s:412    .text:00000000000001c4 .L0 
     /tmp/ccbTplG0.s:416    .text:00000000000001d0 .L0 
       src/riscv.cpp:69     .text:00000000000001d0 .L0 
     /tmp/ccbTplG0.s:423    .text:00000000000001d4 .L0 
       src/riscv.cpp:72     .text:00000000000001d4 .L0 
     /tmp/ccbTplG0.s:435    .text:00000000000001dc .L0 
     /tmp/ccbTplG0.s:436    .text:00000000000001dc .L0 
     /tmp/ccbTplG0.s:437    .text:00000000000001dc .L0 
     /tmp/ccbTplG0.s:438    .text:00000000000001dc .L0 
     /tmp/ccbTplG0.s:439    .text:00000000000001dc .L0 
     /tmp/ccbTplG0.s:440    .text:00000000000001dc .L0 
     /tmp/ccbTplG0.s:447    .text:00000000000001f4 .L0 
       src/riscv.cpp:86     .text:00000000000001f4 .L0 
     /tmp/ccbTplG0.s:454    .text:00000000000001f8 .L0 
       src/riscv.cpp:89     .text:00000000000001f8 .L0 
     /tmp/ccbTplG0.s:465    .text:0000000000000200 .L0 
     /tmp/ccbTplG0.s:466    .text:0000000000000200 .L0 
     /tmp/ccbTplG0.s:469    .text:000000000000020c .L0 
     /tmp/ccbTplG0.s:472    .text:0000000000000214 .L0 
     /tmp/ccbTplG0.s:473    .text:0000000000000214 .L0 
     /tmp/ccbTplG0.s:476    .text:000000000000021c .L0 
     /tmp/ccbTplG0.s:477    .text:000000000000021c .L0 
       src/riscv.cpp:101    .text:000000000000021c .L0 
     /tmp/ccbTplG0.s:496    .text:0000000000000224 .L0 
     /tmp/ccbTplG0.s:497    .text:0000000000000224 .L0 
     /tmp/ccbTplG0.s:498    .text:0000000000000224 .L0 
     /tmp/ccbTplG0.s:508    .text:000000000000022c .L0 
     /tmp/ccbTplG0.s:509    .text:000000000000022c .L0 
     /tmp/ccbTplG0.s:513    .text:000000000000023c .L0 
     /tmp/ccbTplG0.s:516    .text:0000000000000244 .L0 
     /tmp/ccbTplG0.s:519    .text:000000000000024c .L0 
     /tmp/ccbTplG0.s:520    .text:000000000000024c .L0 
     /tmp/ccbTplG0.s:522    .text:0000000000000250 .L0 
     /tmp/ccbTplG0.s:524    .text:0000000000000254 .L0 
     /tmp/ccbTplG0.s:526    .text:0000000000000258 .L0 
     /tmp/ccbTplG0.s:527    .text:0000000000000258 .L0 
     /tmp/ccbTplG0.s:529    .text:000000000000025c .L0 
     /tmp/ccbTplG0.s:530    .text:000000000000025c .L0 
GAS LISTING /tmp/ccbTplG0.s 			page 23


     /tmp/ccbTplG0.s:533    .text:0000000000000264 .L0 
     /tmp/ccbTplG0.s:534    .text:0000000000000264 .L0 
     /tmp/ccbTplG0.s:539    .text:0000000000000268 .L0 
  src/../h/riscv.hpp:175    .text:0000000000000268 .L0 
     /tmp/ccbTplG0.s:549    .text:000000000000026c .L0 
     /tmp/ccbTplG0.s:550    .text:000000000000026c .L0 
     /tmp/ccbTplG0.s:555    .text:0000000000000270 .L0 
  src/../h/riscv.hpp:107    .text:0000000000000270 .L0 
     /tmp/ccbTplG0.s:562    .text:0000000000000274 .L0 
     /tmp/ccbTplG0.s:568    .text:0000000000000278 .L0 
     /tmp/ccbTplG0.s:569    .text:0000000000000278 .L0 
     /tmp/ccbTplG0.s:573    .text:0000000000000288 .L0 
     /tmp/ccbTplG0.s:574    .text:0000000000000288 .L0 
     /tmp/ccbTplG0.s:578    .text:0000000000000294 .L0 
     /tmp/ccbTplG0.s:587    .text:0000000000000294 .L0 
     /tmp/ccbTplG0.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccbTplG0.s:189    .text:0000000000000088 .L0 
     /tmp/ccbTplG0.s:47     .rodata.str1.8:0000000000000010 .LC1
     /tmp/ccbTplG0.s:199    .text:00000000000000a4 .L0 
     /tmp/ccbTplG0.s:226    .text:00000000000000ec .L0 
     /tmp/ccbTplG0.s:53     .rodata.str1.8:0000000000000030 .LC3
     /tmp/ccbTplG0.s:231    .text:00000000000000fc .L0 
     /tmp/ccbTplG0.s:56     .rodata.str1.8:0000000000000038 .LC4
     /tmp/ccbTplG0.s:241    .text:0000000000000118 .L0 
     /tmp/ccbTplG0.s:333    .text:0000000000000178 .L0 
     /tmp/ccbTplG0.s:466    .text:0000000000000200 .L0 
     /tmp/ccbTplG0.s:509    .text:000000000000022c .L0 
     /tmp/ccbTplG0.s:50     .rodata.str1.8:0000000000000018 .LC2
     /tmp/ccbTplG0.s:569    .text:0000000000000278 .L0 
     /tmp/ccbTplG0.s:263    .text:0000000000000140 .L13
     /tmp/ccbTplG0.s:486    .text:0000000000000224 .L14
     /tmp/ccbTplG0.s:564    .text:0000000000000278 .L15
     /tmp/ccbTplG0.s:373    .text:00000000000001a4 .L16
     /tmp/ccbTplG0.s:405    .text:00000000000001c4 .L17
     /tmp/ccbTplG0.s:430    .text:00000000000001dc .L18
     /tmp/ccbTplG0.s:461    .text:0000000000000200 .L19
     /tmp/ccbTplG0.s:244    .text:0000000000000128 .L3
     /tmp/ccbTplG0.s:1668   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccbTplG0.s:2701   .debug_str:00000000000004fd .LASF107
     /tmp/ccbTplG0.s:2661   .debug_str:00000000000003d4 .LASF108
     /tmp/ccbTplG0.s:2581   .debug_str:000000000000016e .LASF109
     /tmp/ccbTplG0.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccbTplG0.s:581    .text:0000000000000294 .Letext0
     /tmp/ccbTplG0.s:2519   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccbTplG0.s:2637   .debug_str:0000000000000351 .LASF0
     /tmp/ccbTplG0.s:2655   .debug_str:00000000000003a3 .LASF1
     /tmp/ccbTplG0.s:2625   .debug_str:00000000000002dc .LASF2
     /tmp/ccbTplG0.s:2607   .debug_str:0000000000000272 .LASF4
     /tmp/ccbTplG0.s:2683   .debug_str:0000000000000481 .LASF3
     /tmp/ccbTplG0.s:2545   .debug_str:0000000000000071 .LASF5
     /tmp/ccbTplG0.s:2659   .debug_str:00000000000003c1 .LASF6
     /tmp/ccbTplG0.s:2635   .debug_str:000000000000033e .LASF7
     /tmp/ccbTplG0.s:2713   .debug_str:0000000000000634 .LASF8
     /tmp/ccbTplG0.s:2595   .debug_str:00000000000001ff .LASF9
     /tmp/ccbTplG0.s:2667   .debug_str:0000000000000410 .LASF10
     /tmp/ccbTplG0.s:2703   .debug_str:00000000000005c1 .LASF11
     /tmp/ccbTplG0.s:2547   .debug_str:0000000000000078 .LASF12
GAS LISTING /tmp/ccbTplG0.s 			page 24


     /tmp/ccbTplG0.s:2529   .debug_str:0000000000000027 .LASF13
     /tmp/ccbTplG0.s:2555   .debug_str:00000000000000c2 .LASF14
     /tmp/ccbTplG0.s:2679   .debug_str:0000000000000453 .LASF15
     /tmp/ccbTplG0.s:2559   .debug_str:00000000000000d3 .LASF16
     /tmp/ccbTplG0.s:2651   .debug_str:0000000000000392 .LASF77
     /tmp/ccbTplG0.s:2621   .debug_str:00000000000002c3 .LASF110
     /tmp/ccbTplG0.s:2689   .debug_str:00000000000004a9 .LASF17
     /tmp/ccbTplG0.s:2649   .debug_str:0000000000000389 .LASF18
     /tmp/ccbTplG0.s:2615   .debug_str:0000000000000290 .LASF19
     /tmp/ccbTplG0.s:2677   .debug_str:0000000000000448 .LASF52
     /tmp/ccbTplG0.s:2731   .debug_str:00000000000006ba .LASF54
     /tmp/ccbTplG0.s:2531   .debug_str:0000000000000037 .LASF20
     /tmp/ccbTplG0.s:2573   .debug_str:0000000000000138 .LASF22
     /tmp/ccbTplG0.s:2569   .debug_str:0000000000000127 .LASF24
     /tmp/ccbTplG0.s:2567   .debug_str:0000000000000112 .LASF26
     /tmp/ccbTplG0.s:2685   .debug_str:0000000000000493 .LASF21
     /tmp/ccbTplG0.s:2671   .debug_str:0000000000000428 .LASF23
     /tmp/ccbTplG0.s:2699   .debug_str:00000000000004f6 .LASF25
     /tmp/ccbTplG0.s:2695   .debug_str:00000000000004d1 .LASF27
     /tmp/ccbTplG0.s:2585   .debug_str:000000000000019f .LASF28
     /tmp/ccbTplG0.s:2561   .debug_str:00000000000000e9 .LASF29
     /tmp/ccbTplG0.s:2525   .debug_str:0000000000000010 .LASF30
     /tmp/ccbTplG0.s:2601   .debug_str:0000000000000240 .LASF31
     /tmp/ccbTplG0.s:2543   .debug_str:0000000000000069 .LASF32
     /tmp/ccbTplG0.s:2549   .debug_str:0000000000000088 .LASF33
     /tmp/ccbTplG0.s:2737   .debug_str:00000000000006e9 .LASF34
     /tmp/ccbTplG0.s:2575   .debug_str:000000000000014d .LASF35
     /tmp/ccbTplG0.s:2639   .debug_str:000000000000035e .LASF36
     /tmp/ccbTplG0.s:2729   .debug_str:00000000000006a7 .LASF37
     /tmp/ccbTplG0.s:2541   .debug_str:0000000000000062 .LASF38
     /tmp/ccbTplG0.s:2583   .debug_str:000000000000018c .LASF39
     /tmp/ccbTplG0.s:2589   .debug_str:00000000000001b5 .LASF40
     /tmp/ccbTplG0.s:2697   .debug_str:00000000000004e4 .LASF41
     /tmp/ccbTplG0.s:2539   .debug_str:000000000000005c .LASF42
     /tmp/ccbTplG0.s:2741   .debug_str:00000000000006fd .LASF43
     /tmp/ccbTplG0.s:2735   .debug_str:00000000000006de .LASF44
     /tmp/ccbTplG0.s:2681   .debug_str:0000000000000469 .LASF45
     /tmp/ccbTplG0.s:2653   .debug_str:0000000000000398 .LASF46
     /tmp/ccbTplG0.s:2691   .debug_str:00000000000004b2 .LASF47
     /tmp/ccbTplG0.s:2553   .debug_str:00000000000000b8 .LASF48
     /tmp/ccbTplG0.s:2603   .debug_str:0000000000000254 .LASF49
     /tmp/ccbTplG0.s:2629   .debug_str:00000000000002fd .LASF50
     /tmp/ccbTplG0.s:2597   .debug_str:000000000000020d .LASF51
     /tmp/ccbTplG0.s:2687   .debug_str:000000000000049a .LASF53
     /tmp/ccbTplG0.s:2551   .debug_str:000000000000009c .LASF55
     /tmp/ccbTplG0.s:2719   .debug_str:0000000000000655 .LASF65
     /tmp/ccbTplG0.s:2619   .debug_str:00000000000002a1 .LASF67
     /tmp/ccbTplG0.s:2605   .debug_str:000000000000026a .LASF56
     /tmp/ccbTplG0.s:2537   .debug_str:0000000000000054 .LASF57
     /tmp/ccbTplG0.s:2613   .debug_str:000000000000028b .LASF58
     /tmp/ccbTplG0.s:2611   .debug_str:0000000000000282 .LASF59
     /tmp/ccbTplG0.s:2643   .debug_str:0000000000000374 .LASF60
     /tmp/ccbTplG0.s:2617   .debug_str:0000000000000299 .LASF61
     /tmp/ccbTplG0.s:2647   .debug_str:000000000000037f .LASF62
     /tmp/ccbTplG0.s:2571   .debug_str:0000000000000130 .LASF79
     /tmp/ccbTplG0.s:2535   .debug_str:0000000000000047 .LASF63
     /tmp/ccbTplG0.s:2709   .debug_str:00000000000005eb .LASF64
GAS LISTING /tmp/ccbTplG0.s 			page 25


     /tmp/ccbTplG0.s:2623   .debug_str:00000000000002ce .LASF66
     /tmp/ccbTplG0.s:2599   .debug_str:0000000000000223 .LASF68
     /tmp/ccbTplG0.s:2527   .debug_str:0000000000000018 .LASF69
     /tmp/ccbTplG0.s:2711   .debug_str:0000000000000616 .LASF70
     /tmp/ccbTplG0.s:2577   .debug_str:0000000000000161 .LASF71
     /tmp/ccbTplG0.s:2521   .debug_str:0000000000000000 .LASF72
     /tmp/ccbTplG0.s:2579   .debug_str:0000000000000166 .LASF73
     /tmp/ccbTplG0.s:2663   .debug_str:00000000000003e2 .LASF74
     /tmp/ccbTplG0.s:2727   .debug_str:00000000000006a2 .LASF75
     /tmp/ccbTplG0.s:2675   .debug_str:0000000000000443 .LASF76
     /tmp/ccbTplG0.s:2631   .debug_str:0000000000000307 .LASF78
     /tmp/ccbTplG0.s:2669   .debug_str:000000000000041f .LASF80
     /tmp/ccbTplG0.s:2523   .debug_str:0000000000000009 .LASF81
     /tmp/ccbTplG0.s:2563   .debug_str:00000000000000fd .LASF82
     /tmp/ccbTplG0.s:2725   .debug_str:0000000000000698 .LASF83
     /tmp/ccbTplG0.s:2665   .debug_str:00000000000003e7 .LASF84
     /tmp/ccbTplG0.s:2657   .debug_str:00000000000003b6 .LASF85
     /tmp/ccbTplG0.s:2591   .debug_str:00000000000001bb .LASF86
     /tmp/ccbTplG0.s:2715   .debug_str:0000000000000644 .LASF87
     /tmp/ccbTplG0.s:2721   .debug_str:000000000000066a .LASF89
     /tmp/ccbTplG0.s:2609   .debug_str:0000000000000279 .LASF88
     /tmp/ccbTplG0.s:2593   .debug_str:00000000000001de .LASF90
     /tmp/ccbTplG0.s:2641   .debug_str:0000000000000365 .LASF91
     /tmp/ccbTplG0.s:2633   .debug_str:0000000000000317 .LASF92
     /tmp/ccbTplG0.s:63     .text:0000000000000020 .LFB17
     /tmp/ccbTplG0.s:579    .text:0000000000000294 .LFE17
     /tmp/ccbTplG0.s:2645   .debug_str:000000000000037a .LASF93
     /tmp/ccbTplG0.s:2673   .debug_str:000000000000043b .LASF94
     /tmp/ccbTplG0.s:2386   .debug_loc:0000000000000000 .LLST0
     /tmp/ccbTplG0.s:2533   .debug_str:0000000000000040 .LASF95
     /tmp/ccbTplG0.s:2397   .debug_loc:0000000000000036 .LLST1
     /tmp/ccbTplG0.s:379    .text:00000000000001a4 .LBB56
     /tmp/ccbTplG0.s:403    .text:00000000000001c0 .LBE56
     /tmp/ccbTplG0.s:2408   .debug_loc:000000000000006c .LLST10
     /tmp/ccbTplG0.s:2705   .debug_str:00000000000005d0 .LASF96
     /tmp/ccbTplG0.s:2416   .debug_loc:0000000000000091 .LLST11
     /tmp/ccbTplG0.s:2717   .debug_str:000000000000064e .LASF97
     /tmp/ccbTplG0.s:385    .text:00000000000001b0 .LVL20
     /tmp/ccbTplG0.s:389    .text:00000000000001b8 .LVL21
     /tmp/ccbTplG0.s:407    .text:00000000000001c4 .LBB52
     /tmp/ccbTplG0.s:428    .text:00000000000001d8 .LBE52
     /tmp/ccbTplG0.s:2423   .debug_loc:00000000000000b4 .LLST9
     /tmp/ccbTplG0.s:414    .text:00000000000001d0 .LVL24
     /tmp/ccbTplG0.s:432    .text:00000000000001dc .LBB49
     /tmp/ccbTplG0.s:459    .text:00000000000001fc .LBE49
     /tmp/ccbTplG0.s:2693   .debug_str:00000000000004ca .LASF98
     /tmp/ccbTplG0.s:2431   .debug_loc:00000000000000d9 .LLST5
     /tmp/ccbTplG0.s:2587   .debug_str:00000000000001a7 .LASF99
     /tmp/ccbTplG0.s:2439   .debug_loc:00000000000000fe .LLST6
     /tmp/ccbTplG0.s:2447   .debug_loc:0000000000000123 .LLST7
     /tmp/ccbTplG0.s:2739   .debug_str:00000000000006f1 .LASF100
     /tmp/ccbTplG0.s:2455   .debug_loc:0000000000000148 .LLST8
     /tmp/ccbTplG0.s:445    .text:00000000000001f4 .LVL27
     /tmp/ccbTplG0.s:463    .text:0000000000000200 .LBB48
     /tmp/ccbTplG0.s:484    .text:0000000000000220 .LBE48
     /tmp/ccbTplG0.s:474    .text:000000000000021c .LVL29
     /tmp/ccbTplG0.s:122    .text:0000000000000058 .LBB30
GAS LISTING /tmp/ccbTplG0.s 			page 26


     /tmp/ccbTplG0.s:138    .text:0000000000000064 .LBE30
     /tmp/ccbTplG0.s:142    .text:0000000000000068 .LBB32
     /tmp/ccbTplG0.s:157    .text:0000000000000074 .LBE32
     /tmp/ccbTplG0.s:170    .text:000000000000007c .LBB34
     /tmp/ccbTplG0.s:186    .text:0000000000000088 .LBE34
     /tmp/ccbTplG0.s:273    .text:0000000000000148 .LBB38
     /tmp/ccbTplG0.s:284    .text:000000000000014c .LBE38
     /tmp/ccbTplG0.s:2463   .debug_loc:000000000000016c .LLST2
     /tmp/ccbTplG0.s:345    .text:0000000000000194 .LBB44
     /tmp/ccbTplG0.s:356    .text:0000000000000198 .LBE44
     /tmp/ccbTplG0.s:2470   .debug_loc:000000000000018f .LLST3
     /tmp/ccbTplG0.s:361    .text:000000000000019c .LBB46
     /tmp/ccbTplG0.s:375    .text:00000000000001a4 .LBE46
     /tmp/ccbTplG0.s:2477   .debug_loc:00000000000001b2 .LLST4
     /tmp/ccbTplG0.s:494    .text:0000000000000224 .LBB64
     /tmp/ccbTplG0.s:506    .text:000000000000022c .LBE64
     /tmp/ccbTplG0.s:2484   .debug_loc:00000000000001d5 .LLST12
     /tmp/ccbTplG0.s:536    .text:0000000000000268 .LBB66
     /tmp/ccbTplG0.s:547    .text:000000000000026c .LBE66
     /tmp/ccbTplG0.s:2492   .debug_loc:00000000000001f9 .LLST13
     /tmp/ccbTplG0.s:552    .text:0000000000000270 .LBB68
     /tmp/ccbTplG0.s:566    .text:0000000000000278 .LBE68
     /tmp/ccbTplG0.s:2499   .debug_loc:000000000000021c .LLST14
     /tmp/ccbTplG0.s:191    .text:0000000000000098 .LVL2
     /tmp/ccbTplG0.s:196    .text:00000000000000a4 .LVL3
     /tmp/ccbTplG0.s:201    .text:00000000000000b4 .LVL4
     /tmp/ccbTplG0.s:223    .text:00000000000000ec .LVL5
     /tmp/ccbTplG0.s:228    .text:00000000000000fc .LVL6
     /tmp/ccbTplG0.s:233    .text:000000000000010c .LVL7
     /tmp/ccbTplG0.s:238    .text:0000000000000118 .LVL8
     /tmp/ccbTplG0.s:243    .text:0000000000000128 .LVL9
     /tmp/ccbTplG0.s:340    .text:0000000000000190 .LVL15
     /tmp/ccbTplG0.s:531    .text:0000000000000264 .LVL33
     /tmp/ccbTplG0.s:571    .text:0000000000000288 .LVL38
     /tmp/ccbTplG0.s:575    .text:0000000000000290 .LVL39
     /tmp/ccbTplG0.s:10     .text:0000000000000000 .LFB16
     /tmp/ccbTplG0.s:40     .text:0000000000000020 .LFE16
     /tmp/ccbTplG0.s:2557   .debug_str:00000000000000ce .LASF101
     /tmp/ccbTplG0.s:2627   .debug_str:00000000000002ea .LASF102
     /tmp/ccbTplG0.s:2733   .debug_str:00000000000006d2 .LASF104
     /tmp/ccbTplG0.s:2707   .debug_str:00000000000005d9 .LASF103
     /tmp/ccbTplG0.s:2723   .debug_str:000000000000068b .LASF105
     /tmp/ccbTplG0.s:2565   .debug_str:0000000000000102 .LASF106
     /tmp/ccbTplG0.s:167    .text:000000000000007c .LVL0
     /tmp/ccbTplG0.s:258    .text:0000000000000138 .LVL11
     /tmp/ccbTplG0.s:262    .text:0000000000000140 .LVL12
     /tmp/ccbTplG0.s:184    .text:0000000000000088 .LVL1
     /tmp/ccbTplG0.s:255    .text:0000000000000134 .LVL10
     /tmp/ccbTplG0.s:372    .text:00000000000001a4 .LVL19
     /tmp/ccbTplG0.s:409    .text:00000000000001c4 .LVL23
     /tmp/ccbTplG0.s:434    .text:00000000000001dc .LVL26
     /tmp/ccbTplG0.s:272    .text:0000000000000148 .LVL13
     /tmp/ccbTplG0.s:281    .text:000000000000014c .LVL14
     /tmp/ccbTplG0.s:344    .text:0000000000000194 .LVL16
     /tmp/ccbTplG0.s:353    .text:0000000000000198 .LVL17
     /tmp/ccbTplG0.s:360    .text:000000000000019c .LVL18
     /tmp/ccbTplG0.s:493    .text:0000000000000224 .LVL31
GAS LISTING /tmp/ccbTplG0.s 			page 27


     /tmp/ccbTplG0.s:503    .text:000000000000022c .LVL32
     /tmp/ccbTplG0.s:535    .text:0000000000000268 .LVL34
     /tmp/ccbTplG0.s:544    .text:000000000000026c .LVL35
     /tmp/ccbTplG0.s:551    .text:0000000000000270 .LVL36
     /tmp/ccbTplG0.s:563    .text:0000000000000278 .LVL37
     /tmp/ccbTplG0.s:588    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z12printIntegerm
_ZN7_thread7runningE
_ZN7_thread14threadDispatchEv
_ZN15MemoryAllocator14convert2BlocksEm
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN7_thread12threadCreateEPPS_PFvPvES2_S2_
console_handler
